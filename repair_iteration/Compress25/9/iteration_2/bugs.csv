bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)!=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)!=  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  =  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)>  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)!=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)!=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  <  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  if(toRead  <  =  csize)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  csize)  {	  if(toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  if(toRead  <  max)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  max)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  max)  {	  if(toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  if(toRead  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  current.bytesRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  current.bytesRead)  {	  if(toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  if(toRead  >=  csize)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >=  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  csize)  {	  if(toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  if(toRead  ==  csize)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  ==  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  csize)  {	  if(toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  if(toRead  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  length)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  length)  {	  if(toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  length)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  length)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  length)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)>  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  <  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  toRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  >=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  toRead)  >=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =(int)(current.bytesRead);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  int  csize  =(int)current.bytesRead.length;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =(int)current.bytesRead.length;  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesRead.length;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.length;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =  current.bytesReadFromStream.length;  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesReadFromStream.length;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  int  csize  =  size  -  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =  size  -  current.bytesRead;  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  size  -  current.bytesRead;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =  current.bytesRead.length();  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead.length();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead(buf,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  int  csize  =(int)current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =(int)current.bytesRead;  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesRead;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
33	[BUG]  [BUGGY]  if(toRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  ==  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0)  {	  if(toRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  if(toRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0)  {	  if(toRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  <  csize)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||  toRead  <  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  <  csize)  {	  if(toRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  if(toRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  0)  {	  if(toRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  if(toRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead!=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  0)  {	  if(toRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  <  =  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  size)  <  =  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  size)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)>  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  size)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  size)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  <  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  size)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)!=  size)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)!=  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)!=  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead  <  csize)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||  toRead  <  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead  <  csize)  {	  if(toRead    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  if(toRead  <  0  ||  csize  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||  csize  >  current.bytesRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  csize  >  current.bytesRead)  {	  if(toRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  if(toRead  >  csize)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  csize)  {	  if(toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  if(toRead!=  csize)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead!=  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  csize)  {	  if(toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  csize)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  csize)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  if(toRead  >>  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >>  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >>  0)  {	  if(toRead    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  =  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  >=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =  count(current.bytesReadFromStream);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =(int)(current.bytesReadFromStream);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesReadFromStream);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  1)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  1)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  length)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  size)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  <  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead  >  csize)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||  toRead  >  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead  >  csize)  {	  if(toRead    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  <  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  toRead)  <  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  >  csize)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||  toRead  >  csize)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  >  csize)  {	  if(toRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)>  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  >=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  >=  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
81	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
82	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)Math.ceil(current.bytesRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
85	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  toRead)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  <  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  1)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  1)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
88	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);    [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  =  0)  {  [BUGGY]      toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
