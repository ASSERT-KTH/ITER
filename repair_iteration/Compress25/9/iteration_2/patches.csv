bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream,  toRead);	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
2	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream,  length);	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
3	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  buf.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  buf.length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream,  buf.length);	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
4	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  size);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream,  size);	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
5	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  buf.length());  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  buf.length());  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream,  buf.length());	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
6	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  buffer.length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream,  buffer.length);	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
7	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)>  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  toRead)>  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
8	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  length)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  length)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  length)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
9	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  +  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  +  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  +  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
10	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  toRead)  ==  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
11	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  +  toRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  +  toRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  +  toRead)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
12	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  length)>  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  length)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  length)>  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
13	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  length)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
14	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  >=  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
15	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  =  length)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
16	[BUG]  [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
17	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)>  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
18	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)!=  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
19	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  size)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
20	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  1)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)>  1)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  int  csize  =(int)current.bytesRead.length  +  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesRead.length  +  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesRead.length  +  1;	  int    csize    =(int)current.bytesRead.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
23	[BUG]  [BUGGY]  int  csize  =(int)current.bytesRead.length  -  1;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesRead.length  -  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesRead.length  -  1;	  int    csize    =(int)current.bytesRead.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
24	[BUG]  [BUGGY]  byte  csize  =(byte)current.bytesRead.length;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  byte  csize  =(byte)current.bytesRead.length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	byte  csize  =(byte)current.bytesRead.length;	  int    csize    =(int)current.bytesRead.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
25	[BUG]  [BUGGY]  long  csize  =(long)current.bytesRead.length;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  long  csize  =(long)current.bytesRead.length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	long  csize  =(long)current.bytesRead.length;	  int    csize    =(int)current.bytesRead.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
26	[BUG]  [BUGGY]  char  csize  =(char)current.bytesRead.length;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  char  csize  =(char)current.bytesRead.length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	char  csize  =(char)current.bytesRead.length;	  int    csize    =(int)current.bytesRead.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  int  csize  =(int)current.bytesRead.length  +  2;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesRead.length  +  2;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesRead.length  +  2;	  int    csize    =(int)current.bytesRead.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
28	[BUG]  [BUGGY]  if(toRead  >  0  ||  csize  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  0  ||  csize  >  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  0  ||  csize  >  current.bytesRead)  {	  if(toRead    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
29	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length()  -  1;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead.length()  -  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead.length()  -  1;	  int    csize    =    current.bytesRead.length();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
30	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length()  +  1;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead.length()  +  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead.length()  +  1;	  int    csize    =    current.bytesRead.length();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
31	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length()  -  2;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead.length()  -  2;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead.length()  -  2;	  int    csize    =    current.bytesRead.length();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
32	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length()  *  2;  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead.length()  *  2;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead.length()  *  2;	  int    csize    =    current.bytesRead.length();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
33	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length()  -  toRead;  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead.length()  -  toRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead.length()  -  toRead;	  int    csize    =    current.bytesRead.length();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
34	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length()  +  2;  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead.length()  +  2;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead.length()  +  2;	  int    csize    =    current.bytesRead.length();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
35	[BUG]  [BUGGY]  if(toRead  >  max)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  max)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  max)  {	  if(toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
36	[BUG]  [BUGGY]  if(toRead  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  current.bytesRead)  {	  if(toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
37	[BUG]  [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  =  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  ==  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  =  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  int  csize  =  current.bytesRead(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead(buffer,  offset,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead(buffer,  offset,  length);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
41	[BUG]  [BUGGY]  int  csize  =  current.bytesRead(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead(buffer,  offset,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead(buffer,  offset,  toRead);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
42	[BUG]  [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead(buf,  offset,  toRead);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
43	[BUG]  [BUGGY]  byte  csize  =  current.bytesRead(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  byte  csize  =  current.bytesRead(buffer,  offset,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	byte  csize  =  current.bytesRead(buffer,  offset,  length);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
44	[BUG]  [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead(buf,  offset,  length,  toRead);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
45	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesRead(buffer,  offset,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesRead(buffer,  offset,  length);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
46	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
47	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
48	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)!=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  toRead)!=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  int  csize  =  current.bytesRead  -  size;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead  -  size;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead  -  size;	  int    csize    =    size    -    current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
51	[BUG]  [BUGGY]  int  csize  =  max  -  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  max  -  current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  max  -  current.bytesRead;	  int    csize    =    size    -    current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
52	[BUG]  [BUGGY]  int  csize  =  length  -  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  length  -  current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  length  -  current.bytesRead;	  int    csize    =    size    -    current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
53	[BUG]  [BUGGY]  int  csize  =  size  -  current.bytesRead  +  1;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  size  -  current.bytesRead  +  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  size  -  current.bytesRead  +  1;	  int    csize    =    size    -    current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
54	[BUG]  [BUGGY]  int  csize  =  size  /  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  size  /  current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  size  /  current.bytesRead;	  int    csize    =    size    -    current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
55	[BUG]  [BUGGY]  int  csize  =  toRead  -  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  toRead  -  current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  toRead  -  current.bytesRead;	  int    csize    =    size    -    current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
56	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)>  csize)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)>  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)>  csize)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
57	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  csize)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  csize)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
58	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  csize)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  csize)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
59	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  csize)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  csize)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
60	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  csize)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  csize)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
61	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(length  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
62	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >>  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  >>  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
63	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  <  length)  {	  if(toRead    <    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
64	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  ==  csize)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  ==  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  ==  csize)  {	  if(toRead    <    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
65	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  >=  csize)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  >=  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  >=  csize)  {	  if(toRead    <    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
66	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  <  size)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  <  size)  {	  if(toRead    <    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
67	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  size)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
68	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  size)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
69	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
70	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  if(csize  <  0  ||(toRead  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(csize  <  0  ||(toRead  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(csize  <  0  ||(toRead  -  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
72	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  offset)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead  ==  csize)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||  toRead  ==  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead  ==  csize)  {	  if(toRead    <    =    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
74	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead  >=  csize)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||  toRead  >=  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead  >=  csize)  {	  if(toRead    <    =    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
75	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead!=  csize)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||  toRead!=  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead!=  csize)  {	  if(toRead    <    =    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
76	[BUG]  [BUGGY]  if(toRead  ==  0  ||  toRead  >  csize)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||  toRead  >  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||  toRead  >  csize)  {	  if(toRead    <    =    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
77	[BUG]  [BUGGY]  if(toRead  >=  0  ||  toRead  >  csize)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||  toRead  >  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||  toRead  >  csize)  {	  if(toRead    <    =    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
78	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)>  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
79	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
80	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  =  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
81	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  <  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
82	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||  toRead  <  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead  <  current.bytesRead)  {	  if(toRead    <    =    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
83	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||  toRead  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead  <  length)  {	  if(toRead    <    =    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
84	[BUG]  [BUGGY]  if(toRead  ==  0  ||  toRead  <  csize)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||  toRead  <  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||  toRead  <  csize)  {	  if(toRead    <    =    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
85	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead  <  size)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||  toRead  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead  <  size)  {	  if(toRead    <    =    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
86	[BUG]  [BUGGY]  if(toRead  >=  0  ||  toRead  <  csize)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||  toRead  <  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||  toRead  <  csize)  {	  if(toRead    <    =    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
87	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  size)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  size)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
88	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  size)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  size)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
89	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  size)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  size)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
90	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)!=  size)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)!=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)!=  size)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
91	[BUG]  [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
92	[BUG]  [BUGGY]  if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
93	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)>  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
94	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  ==  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
95	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesRead  +  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesRead  +  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesRead  +  length);	  int    csize    =(int)(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
96	[BUG]  [BUGGY]  byte  csize  =(byte)(current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  byte  csize  =(byte)(current.bytesRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	byte  csize  =(byte)(current.bytesRead);	  int    csize    =(int)(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
97	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesRead  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesRead  +  1);	  int    csize    =(int)(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
98	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesRead,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesRead,  length);	  int    csize    =(int)(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
99	[BUG]  [BUGGY]  int  csize  =(int)current.bytesRead  +  1;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesRead  +  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesRead  +  1;	  int    csize    =(int)(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
100	[BUG]  [BUGGY]  if(toRead!=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead!=  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  current.bytesRead)  {	  if(toRead!=    csize)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
101	[BUG]  [BUGGY]  if(toRead!=  max)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead!=  max)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  max)  {	  if(toRead!=    csize)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
102	[BUG]  [BUGGY]  if(toRead  ==  max)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  max)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  max)  {	  if(toRead!=    csize)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
103	[BUG]  [BUGGY]  if(toRead  >=  max)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  max)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  max)  {	  if(toRead!=    csize)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
104	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  *  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
105	[BUG]  [BUGGY]  if(toRead  >=  0  ||(current.bytesRead  -  toRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(current.bytesRead  -  toRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(current.bytesRead  -  toRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
106	[BUG]  [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
107	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  toRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
108	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  length)  <  =  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
109	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
110	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)>  csize)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)>  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)>  csize)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
111	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  csize)>  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
112	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  toRead)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
113	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  size)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  size)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  size)>  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
114	[BUG]  [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
115	[BUG]  [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
116	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)!=  toRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)!=  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)!=  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
117	[BUG]  [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  =  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
118	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  >=  toRead)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  >=  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  >=  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
119	[BUG]  [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  size)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  size)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(current.bytesRead  -  size)  <  =  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
120	[BUG]  [BUGGY]  if(toRead  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  length)  {	  if(toRead    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
121	[BUG]  [BUGGY]  if(toRead  <  csize  ||  toRead  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  csize  ||  toRead  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  csize  ||  toRead  <  length)  {	  if(toRead    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
122	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  >  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  >  current.bytesRead)  {	  if(toRead    <    0    ||    csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
123	[BUG]  [BUGGY]  if(toRead  <  0  ||  csize  >=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  csize  >=  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  csize  >=  current.bytesRead)  {	  if(toRead    <    0    ||    csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
124	[BUG]  [BUGGY]  if(toRead  <  0  ||  current.bytesRead  >  csize)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  current.bytesRead  >  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  current.bytesRead  >  csize)  {	  if(toRead    <    0    ||    csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
125	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  csize  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||  csize  >  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  csize  >  current.bytesRead)  {	  if(toRead    <    0    ||    csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
126	[BUG]  [BUGGY]  if(toRead  <  0  ||  csize  ==  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  csize  ==  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  csize  ==  current.bytesRead)  {	  if(toRead    <    0    ||    csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
127	[BUG]  [BUGGY]  if(toRead  <  0  ||  csize!=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  csize!=  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  csize!=  current.bytesRead)  {	  if(toRead    <    0    ||    csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
128	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)>  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
129	[BUG]  [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(current.bytesRead  -  csize)  <  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
130	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  offset)  <  toRead)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
131	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  csize)  <  toRead)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
132	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  <  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
133	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
134	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
135	[BUG]  [BUGGY]  if(csize  <  0  ||(toRead  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(csize  <  0  ||(toRead  -  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(csize  <  0  ||(toRead  -  current.bytesRead)  <  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
136	[BUG]  [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
137	[BUG]  [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
138	[BUG]  [BUGGY]  byte  csize  =(byte)current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  byte  csize  =(byte)current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	byte  csize  =(byte)current.bytesRead;	  int    csize    =(int)current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
139	[BUG]  [BUGGY]  long  csize  =(long)current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  long  csize  =(long)current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	long  csize  =(long)current.bytesRead;	  int    csize    =(int)current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
140	[BUG]  [BUGGY]  char  csize  =(char)current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  char  csize  =(char)current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	char  csize  =(char)current.bytesRead;	  int    csize    =(int)current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
141	[BUG]  [BUGGY]  float  csize  =(float)current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  float  csize  =(float)current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	float  csize  =(float)current.bytesRead;	  int    csize    =(int)current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
142	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  size)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
143	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  <  size)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  length)  <  size)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
144	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)!=  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)!=  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)!=  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    size)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
145	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
146	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
147	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  toRead);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
148	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  toRead);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
149	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  size);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  size);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  size);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
150	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  toRead);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
151	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  off,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  off,  length);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
152	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  toRead)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
153	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  length)  <  toRead)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
154	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  <  =  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
155	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)!=  toRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)!=  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)!=  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
156	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  toRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  >=  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
157	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  <  =  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
158	[BUG]  [BUGGY]  if(toRead  >=  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  current.bytesRead)  {	  if(toRead    >=    csize)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
159	[BUG]  [BUGGY]  if(toRead  <  =  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  current.bytesRead)  {	  if(toRead    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
160	[BUG]  [BUGGY]  if(toRead  <  current.bytesRead  ||  toRead  <  csize)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  current.bytesRead  ||  toRead  <  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  current.bytesRead  ||  toRead  <  csize)  {	  if(toRead    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
161	[BUG]  [BUGGY]  if(toRead  <  current.bytesRead  ||  toRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  current.bytesRead  ||  toRead  >  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  current.bytesRead  ||  toRead  >  0)  {	  if(toRead    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
162	[BUG]  [BUGGY]  if(toRead  <  current.bytesRead  ||  csize  <  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  current.bytesRead  ||  csize  <  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  current.bytesRead  ||  csize  <  current.bytesRead)  {	  if(toRead    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
163	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesReadFromStream  +  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesReadFromStream  +  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesReadFromStream  +  length);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
164	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesReadFromStream,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesReadFromStream,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesReadFromStream,  length);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
165	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesReadFromStream,  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesReadFromStream,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesReadFromStream,  toRead);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
166	[BUG]  [BUGGY]  byte  csize  =(byte)(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  byte  csize  =(byte)(current.bytesReadFromStream);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	byte  csize  =(byte)(current.bytesReadFromStream);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
167	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesReadFromStream  +  1);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesReadFromStream  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesReadFromStream  +  1);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
168	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesReadFromStream,  offset);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesReadFromStream,  offset);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesReadFromStream,  offset);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
169	[BUG]  [BUGGY]  long  csize  =(long)(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  long  csize  =(long)(current.bytesReadFromStream);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	long  csize  =(long)(current.bytesReadFromStream);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
170	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  size)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
171	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  csize)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  csize)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
172	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  size)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)>  size)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
173	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  size)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  size)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
174	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  max)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  max)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)>  max)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    size)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
175	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  length)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
176	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  length)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
177	[BUG]  [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  length)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
178	[BUG]  [BUGGY]  if(csize  <  0  ||(toRead  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(csize  <  0  ||(toRead  -  current.bytesRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(csize  <  0  ||(toRead  -  current.bytesRead)  <  length)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
179	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)>  length)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
180	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
181	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
182	[BUG]  [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
183	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
184	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)!=    size)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
185	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  toRead);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
186	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  fromRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  fromRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  fromRead);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
187	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  size);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  size);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
188	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  bytesRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  bytesRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  bytesRead);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
189	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(length  -  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
190	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  <  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  length)  <  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
191	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.length  -  1;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesReadFromStream.length  -  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesReadFromStream.length  -  1;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
192	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.length  +  1;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesReadFromStream.length  +  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesReadFromStream.length  +  1;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
193	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.length  -  2;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesReadFromStream.length  -  2;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesReadFromStream.length  -  2;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
194	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.length  -  toRead;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesReadFromStream.length  -  toRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesReadFromStream.length  -  toRead;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
195	[BUG]  [BUGGY]  byte  csize  =  current.bytesReadFromStream.length;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  byte  csize  =  current.bytesReadFromStream.length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	byte  csize  =  current.bytesReadFromStream.length;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
196	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.length  -  4;  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesReadFromStream.length  -  4;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesReadFromStream.length  -  4;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
197	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
198	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)>  0)  {	  if(toRead    <    0    ||(toRead    *    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
199	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  *  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  *  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  *  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(toRead    *    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
200	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  *  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  *  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  *  current.bytesRead)!=  0)  {	  if(toRead    <    0    ||(toRead    *    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
201	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)!=  0)  {	  if(toRead    <    0    ||(toRead    *    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
202	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)  ==  0)  {	  if(toRead    <    0    ||(toRead    *    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
203	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  *  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  *  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  *  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(toRead    *    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
204	[BUG]  [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)Math.ceil(current.bytesRead,  length);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
205	[BUG]  [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead,  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead,  offset);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)Math.ceil(current.bytesRead,  offset);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
206	[BUG]  [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)Math.ceil(current.bytesRead,  toRead);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
207	[BUG]  [BUGGY]  byte  csize  =(byte)Math.ceil(current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  byte  csize  =(byte)Math.ceil(current.bytesRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	byte  csize  =(byte)Math.ceil(current.bytesRead);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
208	[BUG]  [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead,  size);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead,  size);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)Math.ceil(current.bytesRead,  size);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
209	[BUG]  [BUGGY]  int  csize  =(int)current.bytesRead.ceil(length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesRead.ceil(length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesRead.ceil(length);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
210	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  size)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  ==  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    ==    size)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
211	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)>  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
212	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  csize)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)>  csize)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
213	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  size)>  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
214	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
215	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)>  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)>  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
216	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
217	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  toRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  toRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  *  toRead)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
218	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  length);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
219	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  toRead);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
220	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  toRead);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
221	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  size);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  size);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buffer,  offset,  size);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
222	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length,  toRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length,  toRead);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
223	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buffer,  off,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buffer,  off,  length);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
224	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  ==  0)  {	  if(toRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
225	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  toRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  toRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  *  toRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
226	[BUG]  [BUGGY]  if(toRead  <  =  max)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  max)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  max)  {	  if(toRead    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
227	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
228	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  toRead);	  int    csize    =(int)current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
229	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  length);	  int    csize    =(int)current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
230	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  toRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  toRead);	  int    csize    =(int)current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
231	[BUG]  [BUGGY]  byte  csize  =(byte)current.bytesReadFromStream.get(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  byte  csize  =(byte)current.bytesReadFromStream.get(buf,  offset,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	byte  csize  =(byte)current.bytesReadFromStream.get(buf,  offset,  length);	  int    csize    =(int)current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
232	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  size);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  size);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream.get(buffer,  offset,  size);	  int    csize    =(int)current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
233	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  size)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  size)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  size)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    size)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
234	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  offset)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    size)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
235	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  size)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  size)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  *  size)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    size)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
236	[BUG]  [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  &&(csize  -  current.bytesRead)!=  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
237	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead!=  csize)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead!=  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead!=  csize)  {	  if(toRead    <    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
238	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  >  max)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  >  max)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  >  max)  {	  if(toRead    <    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
239	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)>  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
240	[BUG]  [BUGGY]  if(csize  <  0  ||(toRead  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(csize  <  0  ||(toRead  -  current.bytesRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(csize  <  0  ||(toRead  -  current.bytesRead)>  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
241	[BUG]  [BUGGY]  if(csize  ==  toRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(csize  ==  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(csize  ==  toRead)  {	  if(toRead    ==    csize)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
242	[BUG]  [BUGGY]  if(toRead  ==  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  current.bytesRead)  {	  if(toRead    ==    csize)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
243	[BUG]  [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  =  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
244	[BUG]  [BUGGY]  if(toRead  <  =  size)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  size)  {	  if(toRead    <    =    csize)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
245	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  bytesRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
246	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  length)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
247	[BUG]  [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  &&(csize  -  current.bytesRead)  <  toRead)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
248	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  =  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  =  length)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
249	[BUG]  [BUGGY]  if(toRead!=  0  ||(csize  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead!=  0  ||(csize  -  current.bytesRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  0  ||(csize  -  current.bytesRead)  <  length)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
250	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  <  1)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
251	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)>  size)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)>  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)>  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
252	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  size)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  >=  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
253	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
254	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  size)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
255	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  size)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)!=  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
256	[BUG]  [BUGGY]  if(toRead!=  0  ||(csize  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead!=  0  ||(csize  -  current.bytesRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  0  ||(csize  -  current.bytesRead)  ==  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
257	[BUG]  [BUGGY]  if(toRead!=  0  ||(csize  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead!=  0  ||(csize  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  0  ||(csize  -  current.bytesRead)!=  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
258	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  length)  <  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  length)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  length)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
259	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  +  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  +  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  +  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
260	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  +  toRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  +  toRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  +  toRead)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
261	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  length)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
262	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  length)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
263	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  1)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  >=  1)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
264	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  <  1)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
265	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  1)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  1)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
266	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  length)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  length)  >=  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
267	[BUG]  [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  &&(csize  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  &&(csize  -  current.bytesRead)  >=  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
268	[BUG]  [BUGGY]  if(toRead  >  0  ||(csize  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  0  ||(csize  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  0  ||(csize  -  current.bytesRead)  >=  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
269	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  size)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    size)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
270	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  1)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  1)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    size)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
271	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  size)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
272	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  size)!=  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    size)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
273	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  size)  ==  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    size)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
274	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  size)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    size)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
275	[BUG]  [BUGGY]  if(csize  <  0  ||  toRead  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(csize  <  0  ||  toRead  >  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(csize  <  0  ||  toRead  >  current.bytesRead)  {	  if(toRead    <    0    ||    csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
276	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream  +  1;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesReadFromStream  +  1;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream  +  1;	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
277	[BUG]  [BUGGY]  float  csize  =(float)(current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  float  csize  =(float)(current.bytesReadFromStream);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	float  csize  =(float)(current.bytesReadFromStream);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
278	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  1)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)>  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
279	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
280	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  toRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  toRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  *  toRead)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
281	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  size)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  offset)  <  size)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
282	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
283	[BUG]  [BUGGY]  if(toRead!=  0  &&(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead!=  0  &&(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  0  &&(csize  -  current.bytesRead)  <  toRead)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
284	[BUG]  [BUGGY]  if(toRead  <  =  0  ||  toRead  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||  toRead  >  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||  toRead  >  current.bytesRead)  {	  if(toRead    <    =    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
285	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.length  +  2;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesReadFromStream.length  +  2;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesReadFromStream.length  +  2;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
286	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.length;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.length;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
287	[BUG]  [BUGGY]  if(current.bytesRead  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(current.bytesRead  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(current.bytesRead  <  toRead)  {	  if(toRead    <    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
288	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  length)  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  length)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  length)  <  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
289	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  -  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  -  1);	  int    csize    =(int)current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
290	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  +  1);	  int    csize    =(int)current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
291	[BUG]  [BUGGY]  if(toRead  >  0  ||(csize  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  0  ||(csize  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  0  ||(csize  -  current.bytesRead)  <  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
292	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  >  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  >  0)  {	  if(toRead    <    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
293	[BUG]  [BUGGY]  if(current.bytesRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(current.bytesRead  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(current.bytesRead  ==  0)  {	  if(toRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
294	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)!=  0)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
295	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  >=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  offset)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
296	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  >=  size)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)  >=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)  >=  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    size)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
297	[BUG]  [BUGGY]  if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
298	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)!=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)!=  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
299	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  csize)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  csize)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  *  csize)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
300	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)!=  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
301	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  length)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
302	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  size)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  size)  <  =  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
303	[BUG]  [BUGGY]  if(current.bytesRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(current.bytesRead!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(current.bytesRead!=  0)  {	  if(toRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
304	[BUG]  [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead(buf,  offset,  length  +  1);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
305	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)!=  size)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  csize)!=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  csize)!=  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)!=    size)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
306	[BUG]  [BUGGY]  if(toRead!=  0  &&(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead!=  0  &&(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  0  &&(csize  -  current.bytesRead)  <  =  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
307	[BUG]  [BUGGY]  if(toRead  >=  0  ||(current.bytesRead  -  csize)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(current.bytesRead  -  csize)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(current.bytesRead  -  csize)  <  =  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
308	[BUG]  [BUGGY]  if(current.bytesRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(current.bytesRead  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(current.bytesRead  >=  0)  {	  if(toRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
309	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length()  +  length;  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead.length()  +  length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead.length()  +  length;	  int    csize    =    current.bytesRead.length();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
310	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  offset)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  offset)  <  =  toRead)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
311	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  csize)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  csize)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  *  csize)  <  toRead)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
312	[BUG]  [BUGGY]  float  csize  =(float)(current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  float  csize  =(float)(current.bytesRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	float  csize  =(float)(current.bytesRead);	  int    csize    =(int)(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
313	[BUG]  [BUGGY]  if(toRead  <  =  0  &&  toRead  <  csize)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  &&  toRead  <  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  &&  toRead  <  csize)  {	  if(toRead    <    =    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
314	[BUG]  [BUGGY]  if(current.bytesRead  ==  csize)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(current.bytesRead  ==  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(current.bytesRead  ==  csize)  {	  if(toRead    ==    csize)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
315	[BUG]  [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
316	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  ==  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
317	[BUG]  [BUGGY]  float  csize  =(float)current.bytesRead.length;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  float  csize  =(float)current.bytesRead.length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	float  csize  =(float)current.bytesRead.length;	  int    csize    =(int)current.bytesRead.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
318	[BUG]  [BUGGY]  if(current.bytesRead!=  csize)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(current.bytesRead!=  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(current.bytesRead!=  csize)  {	  if(toRead!=    csize)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
319	[BUG]  [BUGGY]  if(csize!=  toRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(csize!=  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(csize!=  toRead)  {	  if(toRead!=    csize)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
320	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)>  bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)>  bytesRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
321	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  +  1);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
322	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  csize)  <  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  *  csize)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  *  csize)  <  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
323	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)>  bytesRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
324	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)!=  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
325	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  ==  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
326	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
327	[BUG]  [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)Math.ceil(current.bytesRead  +  1);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
328	[BUG]  [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead  +  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)Math.ceil(current.bytesRead  +  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)Math.ceil(current.bytesRead  +  length);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
329	[BUG]  [BUGGY]  float  csize  =(float)Math.ceil(current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  float  csize  =(float)Math.ceil(current.bytesRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	float  csize  =(float)Math.ceil(current.bytesRead);	  int    csize    =(int)Math.ceil(current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
330	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)>  current.size)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)>  current.size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)>  current.size)  {	  if(toRead    <    0    ||(current.bytesRead    -    toRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
331	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
332	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream  +  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream  +  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream  +  length);	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
333	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream  +  1);	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
334	[BUG]  [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  count(current.bytesReadFromStream,  offset);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  count(current.bytesReadFromStream,  offset);	  int    csize    =    count(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
335	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  length)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
336	[BUG]  [BUGGY]  if(csize  >  toRead)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(csize  >  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(csize  >  toRead)  {	  if(toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
337	[BUG]  [BUGGY]  if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  &&(csize  -  current.bytesRead)  <  =  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
338	[BUG]  [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(toRead  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
339	[BUG]  [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(toRead  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
340	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  +  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  +  1);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
341	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  -  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  -  1);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
342	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  1)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(csize  -  current.bytesRead)  ==  1)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
343	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  +  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  +  current.bytesRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  +  current.bytesRead)>  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
344	[BUG]  [BUGGY]  if(toRead  >=  0  ||(current.bytesRead  +  toRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(current.bytesRead  +  toRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(current.bytesRead  +  toRead)  >=  0)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
345	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  toRead)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
346	[BUG]  [BUGGY]  Integer  csize  =(Integer)current.bytesRead.length;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =(Integer)current.bytesRead.length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =(Integer)current.bytesRead.length;	  int    csize    =(int)current.bytesRead.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
347	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
348	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  +  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  +  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  +  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
349	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  -  toRead)  <  1)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
350	[BUG]  [BUGGY]  Integer  csize  =(Integer)current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =(Integer)current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =(Integer)current.bytesRead;	  int    csize    =(int)current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
351	[BUG]  [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  length)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
352	[BUG]  [BUGGY]  if(toRead  ==  0  ||(length  -  current.bytesRead)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(length  -  current.bytesRead)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(length  -  current.bytesRead)  <  =  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
353	[BUG]  [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  0)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
354	[BUG]  [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  =  toRead)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
355	[BUG]  [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  =  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(current.bytesRead  -  toRead)  <  =  length)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
356	[BUG]  [BUGGY]  if(toRead  >  0  ||  toRead  >  csize)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  0  ||  toRead  >  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  0  ||  toRead  >  csize)  {	  if(toRead    <    =    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
357	[BUG]  [BUGGY]  if(toRead  <  1)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  1)  {	  if(toRead    <    max)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
358	[BUG]  [BUGGY]  if(toRead  <  0  ||(size  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(size  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(size  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    size)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
359	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead  +  1)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead  +  1)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead  +  1)  >=  0)  {	  if(toRead    <    0    ||(toRead    *    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
360	[BUG]  [BUGGY]  if(toRead  >=  0  ||(toRead  *  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(toRead  *  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(toRead  *  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(toRead    *    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
361	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0))  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  >  0))  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
362	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  >  0))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  >  0))  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  >  0))  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    0)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
363	[BUG]  [BUGGY]  if(toRead  ==  0  ||(length  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(length  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(length  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
364	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)!=  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
365	[BUG]  [BUGGY]  if(toRead  >=  0  ||(length  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(length  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(length  -  current.bytesRead)  <  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
366	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  toRead);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
367	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  1);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
368	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  off,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  off,  length);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  off,  length);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
369	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)!=    size)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
370	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)!=  size)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)!=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  toRead)!=  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)!=    size)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
371	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  size)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)!=    size)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
372	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  bytesRead)  {  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)!=  bytesRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)!=    size)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
373	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  toRead)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
374	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  ==  toRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  ==  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  ==  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
375	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  ==  current.bytesRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
376	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  length)>  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  length)>  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  length)>  current.bytesRead)  {	  if(toRead    <    0    ||(current.bytesRead    +    toRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
377	[BUG]  [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  length)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
378	[BUG]  [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(toRead  -  current.bytesRead)  <  size)  {	  if(toRead    ==    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
379	[BUG]  [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  -  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)current.bytesReadFromStream.get(buf,  offset,  length  -  toRead);	  int    csize    =(int)current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
380	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  *  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
381	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  >  0)&&(csize  -  current.bytesRead)>  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
382	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)>  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
383	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)>  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
384	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  current.size)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  current.size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)>  current.size)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
385	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)>  buffer.length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)>  buffer.length)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    size)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
386	[BUG]  [BUGGY]  if(toRead  >  0  ||  toRead  <  csize)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  0  ||  toRead  <  csize)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  0  ||  toRead  <  csize)  {	  if(toRead    <    =    0    ||    toRead    <    csize)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
387	[BUG]  [BUGGY]  int  csize  =  this.current.bytesRead.length();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  this.current.bytesRead.length();  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  this.current.bytesRead.length();	  int    csize    =    current.bytesRead.length();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
388	[BUG]  [BUGGY]  int  csize  =  offset  -  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  offset  -  current.bytesRead;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  offset  -  current.bytesRead;	  int    csize    =    size    -    current.bytesRead;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
389	[BUG]  [BUGGY]  if(toRead  >  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  0  ||(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  0  ||(csize  -  current.bytesRead)  <  toRead)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
390	[BUG]  [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  size)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(toRead  -  current.bytesRead)  <  size)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
391	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    size)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
392	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  >=  size)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  +  toRead)  >=  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  +  toRead)  >=  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    >=    size)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
393	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  >  256)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  >  256)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  >  256)  {	  if(toRead    <    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
394	[BUG]  [BUGGY]  if(toRead  <  0  ||  toRead  >  CCH_LEN)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  toRead  >  CCH_LEN)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  toRead  >  CCH_LEN)  {	  if(toRead    <    0    ||    toRead    >    csize)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
395	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)>  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)>  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)>  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
396	[BUG]  [BUGGY]  if(toRead  ==  0  ||(length  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(length  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(length  -  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
397	[BUG]  [BUGGY]  if(current.bytesRead  <  0  ||(toRead  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(current.bytesRead  <  0  ||(toRead  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(current.bytesRead  <  0  ||(toRead  -  current.bytesRead)  <  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
398	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
399	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  <  =  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
400	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  toRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  <  =  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
401	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  =  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  -  toRead)  <  =  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    <    =    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
402	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  ==  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)  ==  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
403	[BUG]  [BUGGY]  if(toRead  <  0  ||(tsize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(tsize  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(tsize  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    csize)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
404	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  length)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  length)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    ==    size)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
405	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  ==  size)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)  ==  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)  ==  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    ==    size)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
406	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  size)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  ==  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)    ==    size)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
407	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)>  size)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)>  size)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)>  size)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    size)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
408	[BUG]  [BUGGY]  if(toRead  ==  0  ||(length  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(length  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(length  -  current.bytesRead)  >=  0)  {	  if(toRead    <    0    ||(length    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
409	[BUG]  [BUGGY]  int  csize  =(int)(current.bytesReadFromStream  *  size);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =(int)(current.bytesReadFromStream  *  size);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =(int)(current.bytesReadFromStream  *  size);	  int    csize    =(int)(current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
410	[BUG]  [BUGGY]  if(toRead  >  1)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  1)  {	  if(toRead    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
411	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  -  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	Integer  csize  =  current.bytesReadFromStream.get(buf,  offset,  length  -  toRead);	  Integer    csize    =    current.bytesReadFromStream.get(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
412	[BUG]  [BUGGY]  if(current.bytesRead  <  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(current.bytesRead  <  0  ||(toRead  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(current.bytesRead  <  0  ||(toRead  -  current.bytesRead)  <  =  0)  {	  if(toRead    <    0    ||(current.bytesRead    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
413	[BUG]  [BUGGY]  if(toRead!=  0  ||(toRead  -  current.bytesRead)  <  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead!=  0  ||(toRead  -  current.bytesRead)  <  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead!=  0  ||(toRead  -  current.bytesRead)  <  0)  {	  if(toRead    <    =    0    ||(toRead    -    current.bytesRead)    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
414	[BUG]  [BUGGY]  int  csize  =  this.current.bytesReadFromStream.length;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  this.current.bytesReadFromStream.length;  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  this.current.bytesReadFromStream.length;	  int    csize    =    current.bytesReadFromStream.length;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
415	[BUG]  [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  ==  toRead)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  0  ||(csize  -  current.bytesRead)  ==  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  0  ||(csize  -  current.bytesRead)  ==  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
416	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  null)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  null)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
417	[BUG]  [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  ==  toRead)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(csize  -  current.bytesRead)  ==  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(csize  -  current.bytesRead)  ==  toRead)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
418	[BUG]  [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  Token.BYTE)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  Token.BYTE)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(csize  -  current.bytesRead)  ==  Token.BYTE)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)    ==    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
419	[BUG]  [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length  -  toRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length  -  toRead);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead(buf,  offset,  length  -  toRead);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
420	[BUG]  [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  int  csize  =  current.bytesRead(buf,  offset,  length  -  1);  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	int  csize  =  current.bytesRead(buf,  offset,  length  -  1);	  int    csize    =    current.bytesRead(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
421	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  1)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  -  current.bytesRead)  >=  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
422	[BUG]  [BUGGY]  if(toRead  <  0  ||(toRead  +  current.bytesRead)  <  1)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(toRead  +  current.bytesRead)  <  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(toRead  +  current.bytesRead)  <  1)  {	  if(toRead    <    0    ||(toRead    -    current.bytesRead)    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
423	[BUG]  [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)>  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(current.bytesRead  >  0)>  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(current.bytesRead  >  0)>  current.bytesRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
424	[BUG]  [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)>  toRead)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||(length  -  current.bytesRead)>  toRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||(length  -  current.bytesRead)>  toRead)  {	  if(toRead    <    0    ||(csize    -    current.bytesRead)>    toRead)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
425	[BUG]  [BUGGY]  if(toRead  <  0  ||  length  >  current.bytesRead)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  0  ||  length  >  current.bytesRead)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  0  ||  length  >  current.bytesRead)  {	  if(toRead    <    0    ||    csize    >    current.bytesRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
426	[BUG]  [BUGGY]  if(toRead  >  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >  0  ||(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >  0  ||(csize  -  current.bytesRead)  <  =  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
427	[BUG]  [BUGGY]  if(toRead  >=  0  ||(length  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(length  -  current.bytesRead)  <  =  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(length  -  current.bytesRead)  <  =  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
428	[BUG]  [BUGGY]  if(toRead  >=  0  ||(length  -  current.bytesRead)  >=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  >=  0  ||(length  -  current.bytesRead)  >=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  >=  0  ||(length  -  current.bytesRead)  >=  0)  {	  if(toRead    >=    0    ||(csize    -    current.bytesRead)    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
429	[BUG]  [BUGGY]  if(toRead  ==  1)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  ==  1)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  ==  1)  {	  if(toRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
430	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(toRead  -  current.bytesRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(toRead  -  current.bytesRead)!=  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
431	[BUG]  [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  +  toRead)!=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);      [BUGGY]  if(toRead  <  =  0  ||(current.bytesRead  +  toRead)!=  0)  {  [BUGGY]        toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	429	429	1	replace	if(toRead  <  =  0  ||(current.bytesRead  +  toRead)!=  0)  {	  if(toRead    <    =    0    ||(csize    -    current.bytesRead)!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
