bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  size);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  size);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  size);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  off);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  off);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  off);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  in.read(buffer,  offset,  current.bytesRead);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  in.read(buffer,  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  int  csize  =  in.read(buf.array());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  csize  =  in.read(buf.array());  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buf.array());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  in.read(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  in.read(buf,  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buf,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesReadFromStream);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  Integer  csize  =  in.read(buf.array());  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  Integer  csize  =  in.read(buf.array());  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buf.array());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  length  -  1);	  int    toRead    =    Math.min(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length);	  int    toRead    =    Math.min(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  length  +  1);	  int    toRead    =    Math.min(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset,  length);	  int    toRead    =    Math.min(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  length);	  int    toRead    =    Math.min(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset);	  int    toRead    =    Math.min(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.length(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  length);	  int    toRead    =    Math.min(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  length);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  length);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset,  length);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  current.bytesRead);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  length  -  1);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  length  +  1);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  length  -  1);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.read(),  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  length  -  1);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
42	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.read(),  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  +  length);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.read(),  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  length  +  1);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
45	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset,  length);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer.length);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  length  -  1);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  length  -  1);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  -  1);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  int  toRead  =  Math.min(buf.remaining(),  length  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(buf.remaining(),  length  -  1,  current.bytesRead);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(buf.remaining(),  length  -  1,  current.bytesRead);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  l);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  offset);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  csize);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  csize);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  csize);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
56	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.offset);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
57	[BUG]  [BUGGY]  int  toRead  =  Math.min(buf.length(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(buf.length(),  current.bytesRead);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(buf.length(),  current.bytesRead);	  int    toRead    =    Math.min(buf.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  int  toRead  =  Math.min(buf.length(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(buf.length(),  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(buf.length(),  length  -  1);	  int    toRead    =    Math.min(buf.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  int  toRead  =  Math.min(length,  buffer.length());  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(length,  buffer.length());  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(length,  buffer.length());	  int    toRead    =    Math.min(buf.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
60	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  length  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
64	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
65	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
66	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  +  length);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
69	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  l);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
70	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  csize);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  csize);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  csize);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  length  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset,  length);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
73	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.remaining(),  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(current.remaining(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.remaining(),  length);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  length);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  0);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  size);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.remaining(),  size);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  size);	  int    toRead    =    Math.min(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
77	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  size);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  size);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  size);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
78	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
82	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  csize  =  current.bytesReadFromStream.read();  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
83	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  current.length);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  size);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  size);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  size);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
86	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
88	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.read(),  current.bytesRead);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  current.bytesRead);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
89	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.in.length(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  length);	  int    toRead    =    Math.min(buf.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  l);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.read(),  l);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  l);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
93	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.array(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  length);	  int    toRead    =    Math.min(current.read(),    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
94	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  off);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
95	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.length);	  int    toRead    =    Math.min(current.bytesRead,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
96	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length);	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
97	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.remaining());  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.remaining());  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.remaining());	  int    toRead    =    Math.max(buf.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
98	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  off);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
99	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
101	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
102	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
103	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  0);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  0);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  0);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
104	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  off);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  off);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  off);	  int    toRead    =    Math.min(current.bytesRead.length,    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
105	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  1);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
106	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  -  1);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
107	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  length  -  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length  -  1,  length  -  1);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
108	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  1);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
109	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  off);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }    [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  off);  [BUGGY]    if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  off);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
