bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.length);	  int    toRead    =    Math.min(current.bytesRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
2	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  -  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  -  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  -  length);	  int    toRead    =    Math.min(current.bytesRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
3	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  length);	  int    toRead    =    Math.min(current.bytesRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
4	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buffer,  offset,  current.bytesRead);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
6	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesRead.read(buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesRead.read(buffer,  offset,  length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
7	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buffer,  offset,  length  +  1);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
8	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
9	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  current.length);  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buffer,  offset,  current.length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  Integer  csize  =  inputStream.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  inputStream.read(buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  inputStream.read(buffer,  offset,  length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  in.readFully(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.readFully(buf,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.readFully(buf,  offset,  length);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  in.readFully(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.readFully(buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.readFully(buffer,  offset,  length);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  in.read(buf,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buf,  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buf,  offset,  length,  current.bytesRead);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  length  -  1);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  in.readFile(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.readFile(buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.readFile(buffer,  offset,  length);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  in.read(buffer,  offset,  length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  length  -  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  length  -  current.bytesRead);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length());  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.length());	  int    toRead    =    Math.min(buf.length(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
18	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer);	  int    toRead    =    Math.min(buf.length(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
19	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buf.length());  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buf.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buf.length());	  int    toRead    =    Math.min(buf.length(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
20	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buf.length());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buf.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buf.length());	  int    toRead    =    Math.min(buf.length(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
21	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length());  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length());	  int    toRead    =    Math.min(buf.length(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
22	[BUG]  [BUGGY]  Integer  csize  =  in.read(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buf,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buf,  offset,  length);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
23	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.length);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
24	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.bytesRead);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
25	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
26	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  buffer.length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
27	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
28	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead.length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
29	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  buffer.length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
30	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  current.bytesRead.length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
31	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.length  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
32	[BUG]  [BUGGY]  int  toRead  =  Math.min(buf.length(),  length  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(buf.length(),  length  -  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(buf.length(),  length  -  1,  current.bytesRead);	  int    toRead    =    Math.min(buf.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
33	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length()  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length()  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.length()  -  1);	  int    toRead    =    Math.min(buf.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
34	[BUG]  [BUGGY]  int  toRead  =  Math.min(buf.length(),  current.bytesRead  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(buf.length(),  current.bytesRead  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(buf.length(),  current.bytesRead  -  1);	  int    toRead    =    Math.min(buf.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
35	[BUG]  [BUGGY]  int  toRead  =  Math.min(buf.length(),  current.bytesRead.length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(buf.length(),  current.bytesRead.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(buf.length(),  current.bytesRead.length  -  1);	  int    toRead    =    Math.min(buf.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
36	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.length);	  int    toRead    =    Math.min(current.bytesRead,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
37	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.length  +  length);	  int    toRead    =    Math.min(current.bytesRead,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
38	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  +  length  -  1);	  int    toRead    =    Math.min(current.bytesRead,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
39	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.size);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.size);	  int    toRead    =    Math.min(current.bytesRead,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
40	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  csize);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  csize);	  int    toRead    =    Math.min(current.bytesRead,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
41	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.offset  +  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.offset  +  length);	  int    toRead    =    Math.min(current.bytesRead,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
42	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  +  length,  current.offset);	  int    toRead    =    Math.min(current.bytesRead,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
43	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
44	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  1,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  1,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  1,  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
45	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.offset  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.offset  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
46	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  length  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
47	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  offset  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
48	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  1);	  int    toRead    =    Math.min(current.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
49	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  +  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  +  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  length  +  1,  current.bytesRead);	  int    toRead    =    Math.min(current.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
50	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  current.bytesRead  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  current.bytesRead  +  1);	  int    toRead    =    Math.min(current.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
51	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  length  +  1);	  int    toRead    =    Math.min(current.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
52	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining()  +  1,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining()  +  1,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining()  +  1,  length  +  1);	  int    toRead    =    Math.min(current.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
53	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  size  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  size  +  1);	  int    toRead    =    Math.min(current.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
54	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  length  -  1);	  int    toRead    =    Math.min(current.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
55	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  offset  +  length);	  int    toRead    =    Math.min(current.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
56	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  offset);	  int    toRead    =    Math.min(current.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
57	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  length  +  1);	  int    toRead    =    Math.min(current.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
58	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  current.bytesRead);	  int    toRead    =    Math.min(current.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
59	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  size);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  size);	  int    toRead    =    Math.min(current.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
60	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  l);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  l);	  int    toRead    =    Math.min(current.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
61	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  1,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  1,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  1,  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
62	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  current.bytesRead  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  current.bytesRead  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
63	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  length  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
64	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer,  offset  +  length);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
65	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesRead);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
66	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  +  length,  current.length);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
67	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer  +  length);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
68	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  +  length,  buffer.length);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
69	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesReadLength);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesReadLength);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesReadLength);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
70	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesReadLen);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesReadLen);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  +  length,  current.bytesReadLen);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
71	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    size);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
72	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  size  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    size);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
73	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  max);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  max);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  max);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    size);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
74	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.size);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.size);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    size);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
75	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.length);	  int    toRead    =    Math.min(current.bytesRead.length,    off);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
76	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead(),  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead(),  length);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
77	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.remaining(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.remaining(),  offset  +  length);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
78	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.remaining(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.remaining(),  offset,  length);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
79	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.remaining(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.remaining(),  length  -  1);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
80	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.remaining(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.remaining(),  length  +  1);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
81	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.remaining(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.remaining(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.remaining(),  current.bytesRead);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
82	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  1);	  int    toRead    =    Math.min(current.bytesRead.length,    0);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
83	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  -  2);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  length  -  2);	  int    toRead    =    Math.min(current.bytesRead.length,    0);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
84	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  2);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  2);	  int    toRead    =    Math.min(current.bytesRead.length,    0);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
85	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset,  buffer.length);	  int    toRead    =    Math.min(current.bytesRead.length(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
86	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
87	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  offset);	  int    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
88	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  length);	  int    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
89	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buffer);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buffer);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buffer);	  int    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
90	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  off);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  off);	  int    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
91	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  width);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  width);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  width);	  int    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
92	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buffer,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buffer,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buffer,  length);	  int    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
93	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  offset,  length);	  int    toRead    =    Math.min(current.array(),    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
94	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  offset  +  length);	  int    toRead    =    Math.min(current.array(),    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
95	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  length  -  1);	  int    toRead    =    Math.min(current.array(),    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
96	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  length  +  1);	  int    toRead    =    Math.min(current.array(),    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
97	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  offset);	  int    toRead    =    Math.min(current.array(),    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
98	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.array(),  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.array(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.array(),  length);	  int    toRead    =    Math.min(current.array(),    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
99	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  +  1,  current.bytesRead.length());  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  +  1,  current.bytesRead.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  length  +  1,  current.bytesRead.length());	  int    toRead    =    Math.min(current.bytesRead.length(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
100	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.offset  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  current.offset  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
101	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  current.length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
102	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  l  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  l  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  l  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
103	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
104	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
105	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
106	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length,  current.length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
107	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
108	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length,  current.size);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length,  current.size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset,  length,  current.size);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
109	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  current.bytesRead  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
110	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  +  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  +  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  length  +  1,  current.bytesRead);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
111	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  length  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
112	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
113	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  size  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  size  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
114	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.offset  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.length,    current.offset);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
115	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.offset  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.offset  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    current.offset);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
116	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.offset  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.offset  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    current.offset);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
117	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.offset);	  int    toRead    =    Math.min(current.bytesRead.length,    current.offset);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
118	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  l  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
119	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
120	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  offset  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
121	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
122	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  size  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  size  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
123	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  current.bytesRead.remaining());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  current.bytesRead.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  current.bytesRead.remaining());	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
124	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  buffer.remaining());  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  buffer.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  buffer.remaining());	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
125	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length()  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length()  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.length()  -  1);	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
126	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.length  -  1);	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
127	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length  -  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length  -  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.length  -  length);	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
128	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length  -  offset);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length  -  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.length  -  offset);	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
129	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length()  -  2);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length()  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.length()  -  2);	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
130	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset  +  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
131	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  l);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  l);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
132	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  offset,  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
133	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
134	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer.length);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
135	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.offset);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.offset);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
136	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);	  int    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
137	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.length);	  int    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
138	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  +  1);	  int    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
139	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length,  current.bytesRead);	  int    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
140	[BUG]  [BUGGY]  byte  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  byte  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	byte  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length);	  int    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
141	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesReadFromStream,  length);	  in.read(buffer,    offset,    current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  in.readFully(buffer,  offset,  current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.readFully(buffer,  offset,  current.bytesReadFromStream);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.readFully(buffer,  offset,  current.bytesReadFromStream);	  in.read(buffer,    offset,    current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
143	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream  +  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesReadFromStream  +  length);	  in.read(buffer,    offset,    current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
144	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream  -  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream  -  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesReadFromStream  -  length);	  in.read(buffer,    offset,    current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
145	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset,  length);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
146	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset  +  length);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
147	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length  +  1);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
148	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  length  -  1);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
149	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  offset);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
150	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.length(),  offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.length(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.length(),  offset);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
151	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  size);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
152	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  size  +  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  size  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    size);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
153	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  size  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  size  -  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    size);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
154	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  max);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  max);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  max);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    size);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
155	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
156	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  l  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
157	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.length  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
158	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  csize  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  csize  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  csize  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
159	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  off  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
160	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  offset,  length);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
161	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  offset  +  length);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
162	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  offset);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
163	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  length  +  1);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
164	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  length  -  1);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
165	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  current.offset);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  current.offset);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
166	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  size);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  size);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
167	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  length  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    offset);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
168	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.length);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    offset);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
169	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  -  1);	  int    toRead    =    Math.min(current.bytesRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
170	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  l  -  1);	  int    toRead    =    Math.min(current.bytesRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
171	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.length  -  1);	  int    toRead    =    Math.min(current.bytesRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
172	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  off  +  length  -  1);	  int    toRead    =    Math.min(current.bytesRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
173	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  size  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  size  -  1);	  int    toRead    =    Math.min(current.bytesRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
174	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.read);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.read);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.read);	  int    toRead    =    Math.min(current.read(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
175	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.read());  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.read());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.read());	  int    toRead    =    Math.min(current.read(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
176	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.size);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.size);	  int    toRead    =    Math.min(current.read(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
177	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
178	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  -  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
179	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  -  1,  current.bytesRead.length());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  -  1,  current.bytesRead.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  length  -  1,  current.bytesRead.length());	  int    toRead    =    Math.min(current.bytesRead.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
180	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  -  2);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  length  -  2);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
181	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  size  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  size  -  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
182	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  l);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  l);	  int    toRead    =    Math.min(current.read(),    l);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
183	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  l  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  l  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  l  +  1);	  int    toRead    =    Math.min(current.read(),    l);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
184	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  size);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  size);	  int    toRead    =    Math.min(current.read(),    l);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
185	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  l);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  l);	  int    toRead    =    Math.min(current.read(),    l);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
186	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  size  +  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  size  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    size);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
187	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  +  1);	  int    toRead    =    Math.min(current.read(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
188	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  length  +  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  length  +  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  length  +  1,  current.bytesRead);	  int    toRead    =    Math.min(current.read(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
189	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  current.bytesRead  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  current.bytesRead  +  1);	  int    toRead    =    Math.min(current.read(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
190	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer.length  +  1);	  int    toRead    =    Math.min(current.read(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
191	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  current.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  current.length  +  1);	  int    toRead    =    Math.min(current.read(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
192	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  offset,  length);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
193	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  length  -  1);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
194	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  length  +  1);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
195	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  current.bytesRead);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
196	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  offset  +  length);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
197	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  size);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
198	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  buffer.length);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
199	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  offset,  length);	  int    toRead    =    Math.max(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
200	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  offset  +  length);	  int    toRead    =    Math.max(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
201	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  length  +  1);	  int    toRead    =    Math.max(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
202	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  length  -  1);	  int    toRead    =    Math.max(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
203	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  offset);	  int    toRead    =    Math.max(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
204	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  size);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  size);	  int    toRead    =    Math.max(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
205	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length,  length  -  1);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
206	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  current.bytesRead.length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  current.bytesRead.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length  -  1,  current.bytesRead.length  -  1);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
207	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  size  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length  -  1,  size  -  1);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
208	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length,  current.bytesRead.length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length,  current.bytesRead.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length,  current.bytesRead.length  -  1);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
209	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length,  l  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length,  l  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length,  l  -  1);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
210	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  length  -  2);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length  -  1,  length  -  2);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
211	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  offset);	  int    toRead    =    Math.min(current.read(),    offset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
212	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  length  -  1);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
213	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  offset  +  length);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
214	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  offset,  length);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
215	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  length  +  1);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
216	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  current.bytesRead);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
217	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  offset);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
218	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  current.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  current.length);	  int    toRead    =    Math.min(current.bytesRead,    current.length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
219	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  l  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
220	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  offset  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
221	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
222	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  csize  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  csize  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  csize  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
223	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
224	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  +  1,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  +  1,  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  length  +  1,  current.bytesRead.length);	  int    toRead    =    Math.min(current.bytesRead.length,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
225	[BUG]  [BUGGY]  in.read(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  length,  current.bytesRead);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
226	[BUG]  [BUGGY]  in.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  length,  current.length);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
227	[BUG]  [BUGGY]  in.read(buffer,  offset,  l);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  l);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
228	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  max);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  max);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  max);	  int    toRead    =    Math.min(current.bytesRead.length,    csize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
229	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.size);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.size);	  int    toRead    =    Math.min(current.bytesRead.length,    csize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
230	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  1,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  1,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  1,  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
231	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  offset  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
232	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  offset  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
233	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
234	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer,  length);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
235	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset,  length,  current.bytesRead);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
236	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  length,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  length,  buffer.length);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
237	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset,  length  -  1);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
238	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset,  length  +  1);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
239	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  offset,  length);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
240	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  length  -  1);	  int    toRead    =    Math.min(current.bytesRead(),    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
241	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  offset  +  length);	  int    toRead    =    Math.min(current.bytesRead(),    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
242	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  size);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  size);	  int    toRead    =    Math.min(current.bytesRead(),    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
243	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  buffer.length);	  int    toRead    =    Math.min(current.bytesRead(),    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
244	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining());  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining());	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
245	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
246	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
247	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  current.buffer.remaining());  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  current.buffer.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  current.buffer.remaining());	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
248	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.limit()  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.limit()  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.limit()  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
249	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  -  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  length  -  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  length  -  current.bytesRead.length);	  int    toRead    =    Math.min(current.bytesRead.length,    offset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
250	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.length);	  int    toRead    =    Math.min(current.bytesRead.length,    offset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
251	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining()  +  length,  current.bytesRead);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
252	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  buffer,  offset  +  length);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
253	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesRead);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
254	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.length);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
255	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length,  buffer.length);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
256	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadLen);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadLen);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadLen);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
257	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer  +  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  buffer  +  length);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
258	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadLength);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadLength);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadLength);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
259	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    size);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
260	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  max);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  max);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  max);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    size);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
261	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  size  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    size);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
262	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  max);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  max);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  max);	  int    toRead    =    Math.min(current.remaining(),    size);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
263	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  size  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  size  -  1);	  int    toRead    =    Math.min(current.remaining(),    size);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
264	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesRead,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.bytesRead,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesRead,  length);	  in.read(buffer,    offset,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
265	[BUG]  [BUGGY]  in.readFully(buffer,  offset,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.readFully(buffer,  offset,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.readFully(buffer,  offset,  current.bytesRead);	  in.read(buffer,    offset,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
266	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesRead  +  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.bytesRead  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesRead  +  length);	  in.read(buffer,    offset,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
267	[BUG]  [BUGGY]  in.read(buffer,  off,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  off,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  off,  current.bytesRead);	  in.read(buffer,    offset,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
268	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  buffer);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  buffer);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  buffer);	  int    toRead    =    Math.max(buf.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
269	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
270	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  buf.remaining());  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  buf.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  buf.remaining());	  int    toRead    =    Math.max(buf.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
271	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.remaining());  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.remaining());	  int    toRead    =    Math.max(buf.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
272	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  1);	  int    toRead    =    Math.max(buf.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
273	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  current.bytesRead  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  current.bytesRead  +  1);	  int    toRead    =    Math.max(buf.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
274	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  buffer.remaining()  +  1);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  buffer.remaining()  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  buffer.remaining()  +  1);	  int    toRead    =    Math.max(buf.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
275	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  +  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  +  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  length  +  1,  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
276	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.bytesRead  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.bytesRead  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  current.bytesRead  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
277	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.length  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
278	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  +  1,  current.bytesReadFromStream.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  +  1,  current.bytesReadFromStream.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  +  1,  current.bytesReadFromStream.length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
279	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
280	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
281	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset,  length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
282	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
283	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length,  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  length,  current.offset);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
284	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf.array());  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf.array());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf.array());	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
285	[BUG]  [BUGGY]  Integer  csize  =  in.read(buf.array(),  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buf.array(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buf.array(),  length);	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
286	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.read(buf.array());  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesRead.read(buf.array());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesRead.read(buf.array());	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
287	[BUG]  [BUGGY]  Integer  csize  =  in.read(buf.array(),  offset);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buf.array(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buf.array(),  offset);	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
288	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buf.array());  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.in.read(buf.array());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.in.read(buf.array());	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
289	[BUG]  [BUGGY]  Integer  csize  =  in.read(buf.array(),  size);  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buf.array(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buf.array(),  size);	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
290	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead(buf.array());  [CE]  illegal  start  of  type  [FE]                                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesRead(buf.array());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesRead(buf.array());	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
291	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  offset  +  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
292	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesRead);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
293	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer  +  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
294	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
295	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesRead.length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
296	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesReadLen);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesReadLen);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length,  current.bytesReadLen);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
297	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
298	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  -  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
299	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRead.length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
300	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  2);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  2);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
301	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  1,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  1,  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  1,  current.bytesRead.length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
302	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  current.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  current.length  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
303	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
304	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset,  length,  current.bytesRead);	  int    toRead    =    Math.min(current.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
305	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  length,  buffer.length);	  int    toRead    =    Math.min(current.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
306	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset,  length  +  1);	  int    toRead    =    Math.min(current.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
307	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset,  length  -  1);	  int    toRead    =    Math.min(current.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
308	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  size);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  size);	  int    toRead    =    Math.min(current.bytesRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
309	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  csize  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  csize  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  csize  -  1);	  int    toRead    =    Math.min(current.bytesRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
310	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  max);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  max);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  max);	  int    toRead    =    Math.min(current.bytesRead,    csize);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
311	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  off);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  off);	  int    toRead    =    Math.min(current.inputStream.remaining(),    off);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
312	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  size);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  size);	  int    toRead    =    Math.min(current.inputStream.remaining(),    off);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
313	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.read(buf.array());  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesRead.read(buf.array());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesRead.read(buf.array());	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
314	[BUG]  [BUGGY]  int  csize  =  in.read(buf.array(),  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  in.read(buf.array(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buf.array(),  offset);	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
315	[BUG]  [BUGGY]  int  csize  =  current.in.read(buf.array());  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.in.read(buf.array());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.in.read(buf.array());	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
316	[BUG]  [BUGGY]  int  csize  =  in.read(buf.array(),  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  in.read(buf.array(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buf.array(),  length);	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
317	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf.array());  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf.array());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf.array());	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
318	[BUG]  [BUGGY]  byte  csize  =  in.read(buf.array());  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  byte  csize  =  in.read(buf.array());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	byte  csize  =  in.read(buf.array());	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
319	[BUG]  [BUGGY]  int  csize  =  in.read(buf.array(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  in.read(buf.array(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buf.array(),  offset  +  length);	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
320	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  length  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  length  -  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  length  -  1,  current.bytesRead);	  int    toRead    =    Math.min(current.read(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
321	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  -  1);	  int    toRead    =    Math.min(current.read(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
322	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset  +  length  -  1);	  int    toRead    =    Math.min(current.read(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
323	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer.length  -  1);	  int    toRead    =    Math.min(current.read(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
324	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  length  -  2);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  length  -  2);	  int    toRead    =    Math.min(current.read(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
325	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
326	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
327	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.bytesRead.length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
328	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer  +  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
329	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.size);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.size);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
330	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length,  current.offset);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
331	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRead);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
332	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  -  1,  buf.remaining());  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  -  1,  buf.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  length  -  1,  buf.remaining());	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
333	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  -  1,  buffer.remaining());  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  -  1,  buffer.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  length  -  1,  buffer.remaining());	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
334	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer.bytesRead);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
335	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.bytesRemaining);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.bytesRemaining);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.bytesRemaining);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
336	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.bytesRead);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.bytesRead);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
337	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.length);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
338	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  1,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  1,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  1,  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
339	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer.length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
340	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  off  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  off  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  off  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
341	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
342	[BUG]  [BUGGY]  int  toRead  =  Math.min(length,  current.bytesRead.length());  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(length,  current.bytesRead.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(length,  current.bytesRead.length());	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
343	[BUG]  [BUGGY]  int  toRead  =  Math.min(in.read(buffer,  offset,  length));  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(in.read(buffer,  offset,  length));  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(in.read(buffer,  offset,  length));	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
344	[BUG]  [BUGGY]  int  toRead  =  Math.min(0,  buffer.length());  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(0,  buffer.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(0,  buffer.length());	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
345	[BUG]  [BUGGY]  int  toRead  =  Math.min(toRead,  buffer.length());  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(toRead,  buffer.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(toRead,  buffer.length());	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
346	[BUG]  [BUGGY]  int  toRead  =  Math.min(l,  buffer.length());  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(l,  buffer.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(l,  buffer.length());	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
347	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buffer,  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buffer,  offset);	  int    csize    =    current.bytesReadFromStream.read();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
348	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
349	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
350	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  -  2);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  length  -  2);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
351	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  l);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  l);	  int    toRead    =    Math.min(current.bytesRead.length(),    current.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
352	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  current.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  current.length);	  int    toRead    =    Math.min(current.bytesRead.length(),    current.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
353	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining());	  int    toRead    =    Math.min(current.bytesRead.length,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
354	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
355	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  *  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  *  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  *  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
356	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
357	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.remaining());  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.bytesRead.remaining());	  int    toRead    =    Math.min(current.bytesRead.length,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
358	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset,  length  -  1);	  int    toRead    =    Math.min(current.bytesRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
359	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.length,  length);	  int    toRead    =    Math.min(current.bytesRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
360	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  l,  length);	  int    toRead    =    Math.min(current.bytesRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
361	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset,  length  +  1);	  int    toRead    =    Math.min(current.bytesRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
362	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  off,  length);	  int    toRead    =    Math.min(current.bytesRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
363	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  length,  current.length);	  int    toRead    =    Math.min(current.bytesRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
364	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  length  -  1);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
365	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  offset  +  length);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
366	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  length  +  1);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
367	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  offset,  length);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
368	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  current.bytesRead);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
369	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  offset);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
370	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer,  offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
371	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.length  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.length  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.length  +  length);	  int    toRead    =    Math.min(current.bytesRead.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
372	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  l  +  length);	  int    toRead    =    Math.min(current.bytesRead.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
373	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  csize  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  csize  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  csize  +  length);	  int    toRead    =    Math.min(current.bytesRead.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
374	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length,  csize);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  offset  +  length,  csize);	  int    toRead    =    Math.min(current.bytesRead.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
375	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  current.inputStream);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  current.inputStream);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  current.inputStream);	  int    toRead    =    Math.min(current.inputStream.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
376	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  csize);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  csize);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  csize);	  int    toRead    =    Math.min(current.inputStream.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
377	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  1);	  int    toRead    =    Math.min(current.bytesRead,    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
378	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0,  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  0,  current.bytesRead.length);	  int    toRead    =    Math.min(current.bytesRead,    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
379	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0L);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0L);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  0L);	  int    toRead    =    Math.min(current.bytesRead,    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
380	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  -  2);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  length  -  2);	  int    toRead    =    Math.min(current.bytesRead,    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
381	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  size  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  size  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    size);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
382	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  max);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  max);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  max);	  int    toRead    =    Math.min(current.bytesRead.length(),    size);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
383	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.length);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
384	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.bytesRead);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
385	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  +  1);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
386	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  size);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
387	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length,  current.offset);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
388	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  offset  +  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
389	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
390	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer  +  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
391	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.size);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.size);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
392	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length,  current.bytesRead.length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
393	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer,  offset  +  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
394	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.getLength(),  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.getLength(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.getLength(),  offset);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
395	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.size(),  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.size(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.size(),  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
396	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  -  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  length  -  1,  current.bytesRead);	  int    toRead    =    Math.min(current.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
397	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length  -  1);	  int    toRead    =    Math.min(current.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
398	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  -  2);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  length  -  2);	  int    toRead    =    Math.min(current.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
399	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  -  1);	  int    toRead    =    Math.min(current.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
400	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
401	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
402	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
403	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length,  current.length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
404	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset,  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
405	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  -  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  length  -  1,  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
406	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length  -  1);	  int    toRead    =    Math.max(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
407	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  length  -  1);	  int    toRead    =    Math.max(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
408	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  -  2);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  length  -  2);	  int    toRead    =    Math.max(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
409	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
410	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.size);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.size);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
411	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer  +  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
412	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.offset);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
413	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  current.length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
414	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  off  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  off  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  off  +  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
415	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  buf.length());  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  buf.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  offset  +  length,  buf.length());	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
416	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
417	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length,  current.bytesRead);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
418	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
419	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset,  length  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
420	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
421	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  off);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length(),  off);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    off);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
422	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset);	  Integer    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
423	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  length);	  Integer    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
424	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer);	  Integer    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
425	[BUG]  [BUGGY]  Integer  csize  =  in.read(buf);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buf);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buf);	  Integer    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
426	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  off);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  off);	  Integer    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
427	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  length);	  Integer    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
428	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  offset,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  offset,  buffer.length);	  int    toRead    =    Math.min(current.read(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
429	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  current.bytesRead.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  current.bytesRead.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  current.bytesRead.length);	  int    toRead    =    Math.min(current.read(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
430	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length  -  2);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer.length  -  2);	  int    toRead    =    Math.min(current.read(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
431	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.length()  -  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.length()  -  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.length()  -  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
432	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  -  2);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  -  2);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
433	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  offset  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  offset  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
434	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  +  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
435	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
436	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  *  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  *  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  *  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
437	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset,  length,  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
438	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset,  length  +  1);	  int    toRead    =    Math.max(buf.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
439	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  buffer,  offset,  length);	  int    toRead    =    Math.max(buf.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
440	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset,  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
441	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  length,  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
442	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  1,  current.bytesRead);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
443	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
444	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  2);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  length  -  2);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
445	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
446	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  size  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  size  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
447	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
448	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadLen);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadLen);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadLen);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
449	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadLength);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadLength);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadLength);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
450	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  buf.length());  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  buf.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  buf.length());	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
451	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadCount);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadCount);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadCount);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
452	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadFromStream);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.bytesReadFromStream);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
453	[BUG]  [BUGGY]  int  toRead  =  Math.min(buf.remaining(),  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(buf.remaining(),  offset  +  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(buf.remaining(),  offset  +  length,  current.bytesRead);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
454	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.bytesRead;  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesRead;	  in.read(buffer,    offset,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
455	[BUG]  [BUGGY]  float  toRead  =  Math.min(current.bytesRead,  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  float  toRead  =  Math.min(current.bytesRead,  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	float  toRead  =  Math.min(current.bytesRead,  offset);	  int    toRead    =    Math.min(current.bytesRead,    offset);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
456	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  current.bytesRead  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  current.bytesRead  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  current.bytesRead  -  1);	  int    toRead    =    Math.min(current.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
457	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  buffer,  length);	  int    toRead    =    Math.min(current.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
458	[BUG]  [BUGGY]  in.read(buf,  offset,  current.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buf,  offset,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buf,  offset,  current.length);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
459	[BUG]  [BUGGY]  in.read(buf,  offset,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buf,  offset,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buf,  offset,  current.bytesRead);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
460	[BUG]  [BUGGY]  in.read(buf,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buf,  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buf,  offset,  length  -  1);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
461	[BUG]  [BUGGY]  in.read(buf,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buf,  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buf,  offset,  length  +  1);	  in.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
462	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  current.length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
463	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.length);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
464	[BUG]  [BUGGY]  in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  length  +  1);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
465	[BUG]  [BUGGY]  float  toRead  =  Math.min(current.bytesRead.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  float  toRead  =  Math.min(current.bytesRead.remaining(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	float  toRead  =  Math.min(current.bytesRead.remaining(),  offset);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
466	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  current.length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
467	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buf.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buf.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buf.length);	  int    toRead    =    Math.min(buf.length(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
468	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  current.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  current.length  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
469	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  width);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  width);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  width);	  int    toRead    =    Math.min(current.bytesRead.length(),    off);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
470	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  current.remaining);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  current.remaining);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  current.remaining);	  int    toRead    =    Math.max(buf.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
471	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  buf);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  buf);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  buf);	  int    toRead    =    Math.max(buf.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
472	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  current.bytesRead  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  current.bytesRead  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  current.bytesRead  -  1);	  int    toRead    =    Math.max(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
473	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  current.bytesReadFromStream  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  current.bytesReadFromStream  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  current.bytesReadFromStream  -  1);	  int    toRead    =    Math.max(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
474	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  current.length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  current.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  current.length  -  1);	  int    toRead    =    Math.min(current.read(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
475	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  current.bytesRead  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  current.bytesRead  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  current.bytesRead  -  1);	  int    toRead    =    Math.min(current.read(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
476	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  size  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  size  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  size  -  1);	  int    toRead    =    Math.min(current.read(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
477	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  -  1,  buf.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  -  1,  buf.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  length  -  1,  buf.bytesRead);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
478	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.remaining());  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buf.remaining());	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
479	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRemaining);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRemaining);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  current.bytesRemaining);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
480	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
481	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  size  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  size  +  1);	  int    toRead    =    Math.max(buf.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
482	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  current.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length()  +  1,  current.length);	  int    toRead    =    Math.min(current.bytesRead.length(),    current.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
483	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.length  +  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
484	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
485	[BUG]  [BUGGY]  float  toRead  =  Math.min(current.bytesRead.length(),  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  float  toRead  =  Math.min(current.bytesRead.length(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	float  toRead  =  Math.min(current.bytesRead.length(),  offset);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
486	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  +  2);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  length  +  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  length  +  2);	  int    toRead    =    Math.min(current.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
487	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  0,  length);	  int    toRead    =    Math.min(current.bytesRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
488	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buffer,  offset,  length  -  1);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
489	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  current.bytesReadFromStream);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buffer,  offset,  current.bytesReadFromStream);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
490	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  l.length);	  int    toRead    =    Math.min(current.bytesRead,    current.length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
491	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  size);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  size);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
492	[BUG]  [BUGGY]  int  csize  =  in.read(buf);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  in.read(buf);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buf);	  int    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
493	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  off  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  off  +  length);	  int    toRead    =    Math.min(current.bytesRead,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
494	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length,  buffer.length());  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length,  buffer.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length,  buffer.length());	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
495	[BUG]  [BUGGY]  int  toRead  =  Math.max(length,  current.bytesRead.length());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(length,  current.bytesRead.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(length,  current.bytesRead.length());	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
496	[BUG]  [BUGGY]  int  toRead  =  Math.min(length,  buffer.length()  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(length,  buffer.length()  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(length,  buffer.length()  -  1);	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
497	[BUG]  [BUGGY]  int  toRead  =  Math.min(length,  current.bytesReadFromStream.length());  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(length,  current.bytesReadFromStream.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(length,  current.bytesReadFromStream.length());	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
498	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  +  2);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  length  +  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  length  +  2);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
499	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer,  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
500	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  buffer,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  buffer,  offset,  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
501	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.size(),  off);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.size(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.size(),  off);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    off);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
502	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  current.length);	  int    toRead    =    Math.min(current.bytesRead(),    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
503	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  current.length);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
504	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.length(),  size);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.length(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.length(),  size);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
505	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.read(),  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.read(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.read(),  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
506	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
507	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  length,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  length,  current.bytesRead);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
508	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.read(),  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.read(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.read(),  length);	  int    toRead    =    Math.min(current.read(),    offset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
509	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.read(),  offset);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.read(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.read(),  offset);	  int    toRead    =    Math.min(current.read(),    offset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
510	[BUG]  [BUGGY]  int  toRead  =  Math.max(inputStream.remaining(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(inputStream.remaining(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(inputStream.remaining(),  offset  +  length);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
511	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset  +  length,  current.length);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
512	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length  -  1,  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length  -  1,  length  +  1);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
513	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length  +  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length  +  1,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length  +  1,  length  -  1);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
514	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length  -  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length  -  1,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length  -  1,  length  -  1);	  int    toRead    =    Math.min(current.length    -    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
515	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.read(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.read(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.read(),  current.bytesRead);	  int    toRead    =    Math.min(current.read(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
516	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.readLength);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.readLength);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.readLength);	  int    toRead    =    Math.min(current.read(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
517	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  length  -  1);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
518	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  size);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  size);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
519	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  end);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  end);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buffer,  offset,  end);	  Integer    csize    =    current.bytesReadFromStream.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
520	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.remaining(),  size);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.remaining(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.remaining(),  size);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
521	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.read(),  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.read(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.read(),  length);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
522	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  size  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  size  +  1);	  int    toRead    =    Math.min(current.read(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
523	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer.length  +  length);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
524	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length,  buffer.length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
525	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0,  current.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  0,  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  0,  current.length);	  int    toRead    =    Math.min(current.bytesRead,    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
526	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.length());	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
527	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.length);	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
528	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.read(),  l);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.read(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.read(),  l);	  int    toRead    =    Math.min(current.read(),    l);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
529	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  offset);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
530	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.buffer.remaining()  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  current.buffer.remaining()  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  current.buffer.remaining()  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
531	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  *  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  *  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.remaining()  *  1);	  int    toRead    =    Math.min(current.bytesRead.length,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
532	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadFromStream);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length,  current.bytesReadFromStream);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
533	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  0,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  0,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  0,  length);	  int    csize    =    current.bytesReadFromStream.read();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
534	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
535	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  offset,  length  -  1);	  int    toRead    =    Math.max(buf.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
536	[BUG]  [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(buf.remaining(),  length,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(buf.remaining(),  length,  buffer.length);	  int    toRead    =    Math.max(buf.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
537	[BUG]  [BUGGY]  int  toRead  =  Math.max(inputStream.remaining(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(inputStream.remaining(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(inputStream.remaining(),  offset,  length);	  int    toRead    =    Math.max(buf.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
538	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesReadFromStream  -  1);	  in.read(buffer,    offset,    current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
539	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.length(),  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.length(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.length(),  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    offset);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
540	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  size);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  size);	  int    toRead    =    Math.min(current.array(),    length);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
541	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer,  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
542	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset  +  length);	  Integer    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
543	[BUG]  [BUGGY]  int  toRead  =  Math.min(length,  buf.length()  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(length,  buf.length()  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(length,  buf.length()  -  1);	  int    toRead    =    Math.min(buf.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
544	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  -  1);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
545	[BUG]  [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  size);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  current.bytesReadFromStream.read(buf,  offset,  size);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
546	[BUG]  [BUGGY]  Integer  csize  =  inputStream.read(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  inputStream.read(buf,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  inputStream.read(buf,  offset,  length);	  Integer    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
547	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  *  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  *  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  *  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
548	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  2);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  2);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  +  2);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
549	[BUG]  [BUGGY]  int  csize  =  in.read(buf.array(),  size);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  in.read(buf.array(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buf.array(),  size);	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
550	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  current.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  current.length);	  int    toRead    =    Math.max(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
551	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.length  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
552	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  size  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  size  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  size  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
553	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  offset,  length  -  1);	  int    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
554	[BUG]  [BUGGY]  int  csize  =  in.read(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  in.read(buf,  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buf,  offset,  length);	  int    csize    =    current.bytesReadFromStream.read(buf,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
555	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  size);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  size);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
556	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  csize  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  csize  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  csize  -  1);	  int    toRead    =    Math.min(current.bytesRead.length,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
557	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  offset,  length);	  int    toRead    =    Math.min(current.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
558	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream(),  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream(),  offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream(),  offset,  length);	  int    toRead    =    Math.min(current.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
559	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  length  -  1);	  int    toRead    =    Math.min(current.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
560	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.remaining(),  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.remaining(),  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.remaining(),  offset);	  int    toRead    =    Math.max(current.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
561	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
562	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  off  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  off  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  off  +  length);	  int    toRead    =    Math.min(current.bytesRead.length,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
563	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  offset  +  length);	  int    toRead    =    Math.max(buf.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
564	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  l);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  l);	  int    toRead    =    Math.min(current.read(),    l);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
565	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  +  length  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
566	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
567	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  0);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  0);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  0);	  int    toRead    =    Math.min(current.bytesRead,    0);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
568	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  off);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  off);	  int    toRead    =    Math.max(current.bytesRead.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
569	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  size);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  size);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length()  +  1,  size);	  int    toRead    =    Math.min(current.bytesRead.length(),    size);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
570	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l)-  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  l)-  1;  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  l)-  1;	  int    toRead    =    Math.min(current.bytesRead,    l);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
571	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.length(),  csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.length(),  csize);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.length(),  csize);	  int    toRead    =    Math.min(current.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
572	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  l);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  l);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
573	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  current.offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.length(),  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.length(),  current.offset);	  int    toRead    =    Math.min(current.inputStream.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
574	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length  +  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  offset  +  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  offset  +  length  +  1);	  int    toRead    =    Math.min(current.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
575	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
576	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  1,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  1,  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
577	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
578	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream,  buffer.remaining()  -  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream,  buffer.remaining()  -  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream,  buffer.remaining()  -  length  -  1);	  int    toRead    =    Math.max(buf.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
579	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length,  current.offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length,  current.offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length,  current.offset);	  int    toRead    =    Math.min(current.bytesRead.length,    current.offset);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
580	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  l);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  l);	  int    toRead    =    Math.min(current.inputStream.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
581	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset,  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
582	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  off,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer,  off,  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
583	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  length,  off);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  length,  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining()  +  length,  off);	  int    toRead    =    Math.min(current.inputStream.remaining(),    off);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
584	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  current.bytesRead);	  int    toRead    =    Math.min(buf.length(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
585	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
586	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer.offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  buffer.offset  +  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
587	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer.offset  +  length);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
588	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  off  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  off  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  off  +  length);	  int    toRead    =    Math.min(current.read(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
589	[BUG]  [BUGGY]  Integer  csize  =  in.read(buf.array(),  0);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buf.array(),  0);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buf.array(),  0);	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
590	[BUG]  [BUGGY]  Integer  csize  =  in.read(buf.array(),  0,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buf.array(),  0,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buf.array(),  0,  current.bytesRead);	  Integer    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
591	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  -  1,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  -  1,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  offset  -  1,  current.bytesRead);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
592	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer.bytesRemaining);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer.bytesRemaining);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  length  -  1,  buffer.bytesRemaining);	  int    toRead    =    Math.min(buf.remaining(),    length    -    1,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
593	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer.offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  buffer.offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
594	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
595	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  this.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  this.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  this.length);	  int    toRead    =    Math.min(current.bytesRead.length(),    current.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
596	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  in.read(buffer,  offset,  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buffer,  offset,  current.bytesRead);	  in.read(buffer,    offset,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
597	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.offset(),  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.offset(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.offset(),  length);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
598	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  end);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  end);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	Integer  csize  =  in.read(buffer,  offset,  end);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
599	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length()  +  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
600	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  off);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  off);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
601	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream.remaining(),  bytesRead);	  int    toRead    =    Math.max(current.bytesReadFromStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
602	[BUG]  [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  current.bytesReadFromStream.read(buf,  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  current.bytesReadFromStream.read(buf,  offset  +  length);	  int    csize    =    current.bytesReadFromStream.read(buf);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
603	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  off);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  off);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
604	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.length(),  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.length(),  buffer.length);	  int    toRead    =    Math.max(current.bytesRead.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
605	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream,  buffer.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesReadFromStream,  buffer.remaining(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesReadFromStream,  buffer.remaining(),  length  +  1);	  int    toRead    =    Math.max(buf.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
606	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  buffer.remaining()  +  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  buffer.remaining()  +  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  buffer.remaining()  +  length  +  1);	  int    toRead    =    Math.max(buf.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
607	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  buffer.remaining(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead,  buffer.remaining(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead,  buffer.remaining(),  length  +  1);	  int    toRead    =    Math.max(buf.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
608	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  off);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length()  +  1,  off);	  int    toRead    =    Math.min(current.bytesRead.length(),    off);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
609	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length()  +  1,  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
610	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length()  +  1,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.length()  +  1,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.length()  +  1,  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.length(),    offset);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
611	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.length  -  1);	  int    toRead    =    Math.min(current.bytesRead,    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
612	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  length,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  length,  offset);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining()  +  length,  offset);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
613	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  1,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  1,  length  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
614	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  length  -  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  length  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
615	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining()  +  1,  length  -  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
616	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer.offset,  length);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
617	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  buffer.length,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  buffer.length,  length);	  int    toRead    =    Math.min(current.read(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
618	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  off);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.inputStream.remaining(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.inputStream.remaining(),  off);	  int    toRead    =    Math.max(current.inputStream.remaining(),    length);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
619	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset  +  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset  +  length);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
620	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  off);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead(),  off);	  int    toRead    =    Math.min(current.bytesRead(),    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
621	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining()  +  1,  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
622	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining(),  off  +  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
623	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining()  +  length  -  1);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
624	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.read(),  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.read(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.read(),  length);	  int    toRead    =    Math.min(current.read(),    offset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
625	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.read(),  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.read(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.read(),  length);	  int    toRead    =    Math.min(current.read(),    offset);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
626	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  off);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  1,  off);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    off);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
627	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  buffer.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length()  +  1,  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length()  +  1,  buffer.length);	  int    toRead    =    Math.min(current.bytesRead.length(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
628	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  l);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  l);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
629	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  csize);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  csize);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
630	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.length(),  off);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.length(),  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.length(),  off);	  int    toRead    =    Math.min(current.in.length(),    length);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
631	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.length)-  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  current.length)-  1;  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  current.length)-  1;	  int    toRead    =    Math.min(current.bytesRead,    current.length);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
632	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  current.buffer.remaining()  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  current.buffer.remaining()  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  current.buffer.remaining()  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    1);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
633	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  length,  off);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.remaining()  +  length,  off);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.remaining()  +  length,  off);	  int    toRead    =    Math.min(current.bytesRead.remaining(),    off);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
634	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.read(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.read(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.read(),  current.bytesRead);	  int    toRead    =    Math.min(current.read(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
635	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  current.bytesRead);	  int    toRead    =    Math.min(current.read(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
636	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.read(),  csize);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.read(),  csize);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.read(),  csize);	  int    toRead    =    Math.min(current.read(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
637	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer.offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.remaining(),  buffer.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.remaining(),  buffer.offset  +  length);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
638	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream(),  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream(),  offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream(),  offset  +  length);	  int    toRead    =    Math.min(current.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
639	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.offset  +  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.offset  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
640	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.remaining()  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.length,  buffer.remaining()  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.length,  buffer.remaining()  -  1);	  int    toRead    =    Math.max(current.length,    buffer.remaining());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
641	[BUG]  [BUGGY]  int  csize  =  in.read(buf.array(),  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  csize  =  in.read(buf.array(),  current.bytesRead);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  csize  =  in.read(buf.array(),  current.bytesRead);	  int    csize    =    in.read(buf.array());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
642	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  offset  +  length  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
643	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining(),  off  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
644	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.offset(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.offset(),  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.offset(),  length  +  1);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
645	[BUG]  [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream,  l);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  in.read(buffer,  offset,  current.bytesReadFromStream,  l);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	in.read(buffer,  offset,  current.bytesReadFromStream,  l);	  in.read(buffer,    offset,    current.bytesReadFromStream);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
646	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  offset  +  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  offset  +  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  offset  +  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
647	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  *  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  *  length  -  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream,  buffer.remaining()  -  length  *  length  -  1);	  int    toRead    =    Math.min(current.bytesReadFromStream,    buffer.remaining()    -    length    -    1);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
648	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length  +  1);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  offset  +  length  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
649	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  1);	  int    toRead    =    Math.min(current.inputStream.remaining(),    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
650	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.read(buffer,  offset,  length));  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.read(buffer,  offset,  length));  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.read(buffer,  offset,  length));	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
651	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.length());  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  buffer.length());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  buffer.length());	  int    toRead    =    Math.min(length,    buffer.length());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
652	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  buffer.offset,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  buffer.offset,  length);	  int    toRead    =    Math.min(current.bytesRead,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
653	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  off,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer,  off,  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
654	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.offset(),  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.offset(),  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.offset(),  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
655	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesReadFromStream.remaining()  +  length);	  int    toRead    =    Math.min(current.bytesReadFromStream.remaining(),    offset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
656	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.array(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.array(),  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.array(),  buffer.length);	  int    toRead    =    Math.min(current.read(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
657	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.read(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.read(),  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.read(),  buffer.length);	  int    toRead    =    Math.min(current.read(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
658	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.in.read(),  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.in.read(),  buffer.length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.in.read(),  buffer.length);	  int    toRead    =    Math.min(current.read(),    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
659	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead,  offset  +  length  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead,  offset  +  length  +  1);	  int    toRead    =    Math.min(current.bytesRead,    length    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
660	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l  +  1,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length,  l  +  1,  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length,  l  +  1,  length);	  int    toRead    =    Math.min(current.bytesRead.length,    l);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
661	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset  +  1);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset  +  1);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.bytesRead.length(),  buffer.offset  +  1);	  int    toRead    =    Math.min(current.bytesRead.length(),    offset    +    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
662	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.offset  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  buffer.offset  +  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
663	[BUG]  [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  length);  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.min(current.inputStream.remaining(),  off  +  length);	  int    toRead    =    Math.min(current.inputStream.remaining(),    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
664	[BUG]  [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  buffer.remaining());  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }      [BUGGY]  int  toRead  =  Math.max(current.bytesRead.remaining(),  buffer.remaining());  [BUGGY]      if  ((csize  -  current.bytesRead)  <  toRead)  {  toRead  =  (int)  (csize  -  current.bytesRead);  }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	428	428	1	replace	int  toRead  =  Math.max(current.bytesRead.remaining(),  buffer.remaining());	  int    toRead    =    Math.max(buf.remaining(),    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
