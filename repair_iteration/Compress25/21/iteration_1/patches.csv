bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  this.in.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  this.in.read(buffer,  offset,  length);	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  return(in  <  <  3)?  this.in  :  in;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(in  <  <  3)?  this.in  :  in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(in  <  <  3)?  this.in  :  in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  return(current.in  ==  null)?  this  :  current.in;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.in  ==  null)?  this  :  current.in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.in  ==  null)?  this  :  current.in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  return(current.in  ==  null)?  this.in  :  in;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.in  ==  null)?  this.in  :  in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.in  ==  null)?  this.in  :  in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  return(int)read;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(int)read;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(int)read;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  return(current.crc!=  null)?  this.entryEncoding  :  entryEncoding;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  this.entryEncoding  :  entryEncoding;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  this.entryEncoding  :  entryEncoding;	  return    this.entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
7	[BUG]  [BUGGY]  return  current.entryEncoding;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.entryEncoding;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.entryEncoding;	  return    this.entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]  return(current.crc!=  null)?  this.entryEncoding  :  zipEncoding;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  this.entryEncoding  :  zipEncoding;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  this.entryEncoding  :  zipEncoding;	  return    this.entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  return(current.crc  ==  null)?  this.entryEncoding  :  entryEncoding;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc  ==  null)?  this.entryEncoding  :  entryEncoding;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc  ==  null)?  this.entryEncoding  :  entryEncoding;	  return    this.entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  return(current.crc!=  null?  this.entryEncoding  :  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null?  this.entryEncoding  :  entryEncoding);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null?  this.entryEncoding  :  entryEncoding);	  return    this.entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
11	[BUG]  [BUGGY]  return(current.crc!=  null)?  this  :  current.entryEncoding;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  this  :  current.entryEncoding;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  this  :  current.entryEncoding;	  return    this.entryEncoding;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  return  current.crc.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.read(buffer,  offset,  length);	  return    read.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
13	[BUG]  [BUGGY]  return  current.crc.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.in.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.in.read(buffer,  offset,  length);	  return    read.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
14	[BUG]  [BUGGY]  return  current.crc.length;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.length;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.length;	  return    read.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
15	[BUG]  [BUGGY]  return  current.crc.in.read(buffer,  offset,  read.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.in.read(buffer,  offset,  read.length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.in.read(buffer,  offset,  read.length);	  return    read.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
16	[BUG]  [BUGGY]  return  current.crc.read(buffer,  offset,  read.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.read(buffer,  offset,  read.length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.read(buffer,  offset,  read.length);	  return    read.length;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
17	[BUG]  [BUGGY]  return  current.crc.decode(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.decode(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.decode(buffer,  offset,  length);	  return    read.length;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
18	[BUG]  [BUGGY]  return(current.crc!=  null)?  null  :  current.crc;  [CE]  invalid  method  declaration;  return  type  required  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  null  :  current.crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  null  :  current.crc;	  return    this.crc;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
19	[BUG]  [BUGGY]  return(current.crc!=  null)?  this  :  current.crc;  [CE]  invalid  method  declaration;  return  type  required  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  this  :  current.crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  this  :  current.crc;	  return    this.crc;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
20	[BUG]  [BUGGY]  return(current.crc!=  null)?  this  :  crc;  [CE]  invalid  method  declaration;  return  type  required  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  this  :  crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  this  :  crc;	  return    this.crc;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
21	[BUG]  [BUGGY]  return(current.crc  ==  null)?  null  :  current.crc;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc  ==  null)?  null  :  current.crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc  ==  null)?  null  :  current.crc;	  return    this.crc;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
22	[BUG]  [BUGGY]  return  crc;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  crc;	  return    this.crc;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
23	[BUG]  [BUGGY]  return(current.crc  ==  null)?  this  :  crc;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc  ==  null)?  this  :  crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc  ==  null)?  this  :  crc;	  return    this.crc;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
24	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.crc.update(buffer,  offset,  read);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.crc.update(buffer,  offset,  read);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.crc.update(buffer,  offset,  read);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
25	[BUG]  [BUGGY]  while(current.crc!=  null)  {  buffer[offset++]  =  current.in.read(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  while(current.crc!=  null)  {  buffer[offset++]  =  current.in.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	while(current.crc!=  null)  {  buffer[offset++]  =  current.in.read(buffer,  offset,  length);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
26	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  current.crc.update(buffer,  offset,  read);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  current.crc.update(buffer,  offset,  read);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  current.crc.update(buffer,  offset,  read);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
27	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  current.crc.update(buffer,  offset,  read);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  current.crc.update(buffer,  offset,  read);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  current.crc.update(buffer,  offset,  read);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
28	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.crc.update(buffer,  offset,  fileNameLen);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.crc.update(buffer,  offset,  fileNameLen);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  current.crc.update(buffer,  offset,  fileNameLen);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
29	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  current.crc.update(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	current.crc.update(buffer,  offset,  length);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
30	[BUG]  [BUGGY]  current.crc.update(buffer,  offset,  read);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  current.crc.update(buffer,  offset,  read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	current.crc.update(buffer,  offset,  read);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
31	[BUG]  [BUGGY]  return  current.crc!=  null  &&(current.crc!=  null  ||  current.isEnabled(read));  [CE]  invalid  method  declaration;  return  type  required  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc!=  null  &&(current.crc!=  null  ||  current.isEnabled(read));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc!=  null  &&(current.crc!=  null  ||  current.isEnabled(read));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
32	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(read));  [CE]  invalid  method  declaration;  return  type  required  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(read));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(read));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
33	[BUG]  [BUGGY]  return  read  ||(current.crc!=  null  ||  current.crc.isEnabled(current.entry));  [CE]  invalid  method  declaration;  return  type  required  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.crc!=  null  ||  current.crc.isEnabled(current.entry));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.crc!=  null  ||  current.crc.isEnabled(current.entry));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
34	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(array));  [CE]  invalid  method  declaration;  return  type  required  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(array));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(array));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
35	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.in.isEnabled(current.entry));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.in.isEnabled(current.entry));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.in.isEnabled(current.entry));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
36	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(entry));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(entry));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(entry));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
37	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset,  length)>  0);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset,  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset,  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset  +  length)>  0);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset  +  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset  +  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset  +  length)>  0);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset  +  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset  +  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset  +  length)>  0);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset  +  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset  +  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset  +  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset  +  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
44	[BUG]  [BUGGY]  return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
45	[BUG]  [BUGGY]  return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset,  length));  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset,  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.in!=  null  ||  current.crc.read(buffer,  offset,  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset  +  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset  +  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset  +  length));  [CE]  <identifier>  expected  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset  +  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset  +  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length));    	non-compiled	[CE]  <identifier>  expected	4	None	replace
49	[BUG]  [BUGGY]  return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset,  length));  [CE]  <identifier>  expected  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset,  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc!=  null  &&(current.in!=  null  ||  current.in.read(buffer,  offset,  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset,    length));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
50	[BUG]  [BUGGY]  return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset,  length));  [CE]  <identifier>  expected  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset,  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.crc!=  null  &&  current.in.read(buffer,  offset,  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset,    length));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
51	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset,  length  +  1));  [CE]  <identifier>  expected  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset,  length  +  1));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset,  length  +  1));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset,    length));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
52	[BUG]  [BUGGY]  return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset,  length));  [CE]  <identifier>  expected  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset,  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.in!=  null  &&  current.crc.read(buffer,  offset,  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset,    length));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
53	[BUG]  [BUGGY]  return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset,  length));  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset,  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.crc!=  null  ||  current.in.read(buffer,  offset,  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset,    length));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  return  current.crc.read(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.read(buffer,  offset,  read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.read(buffer,  offset,  read);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  return  read  &&  current.crc.update(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc.update(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc.update(buffer,  offset,  length);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  return  current.in.read(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.read(buffer,  offset,  read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.read(buffer,  offset,  read);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  return  in.read()  &&  current.crc.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  in.read()  &&  current.crc.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  in.read()  &&  current.crc.read(buffer,  offset,  length);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  return  read  ||  current.crc.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||  current.crc.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||  current.crc.read(buffer,  offset,  length);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  return  read  &&  current.crc.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc.read(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc.read(buffer,  offset,  length,  buffer.length);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  return  current.crc  &&  read!=  null;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc  &&  read!=  null;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc  &&  read!=  null;	  return    read    &&    current.crc!=    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
61	[BUG]  [BUGGY]  return  read  &&  current.crc  ==  null;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc  ==  null;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc  ==  null;	  return    read    &&    current.crc!=    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  return  read  ||  current.crc!=  null;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||  current.crc!=  null;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||  current.crc!=  null;	  return    read    &&    current.crc!=    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  return  crc  &&  current.crc!=  null;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  crc  &&  current.crc!=  null;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  crc  &&  current.crc!=  null;	  return    read    &&    current.crc!=    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  return  read  &&  crc!=  null;  [CE]  <identifier>  expected  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  crc!=  null;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  crc!=  null;	  return    read    &&    current.crc!=    null;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
65	[BUG]  [BUGGY]  return  currc  &&  current.crc!=  null;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  currc  &&  current.crc!=  null;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  currc  &&  current.crc!=  null;	  return    read    &&    current.crc!=    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  return  current.crc.getBytes();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.getBytes();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.getBytes();	  return    read.getBytes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  return  current.in.getBytes();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.getBytes();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.getBytes();	  return    read.getBytes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
68	[BUG]  [BUGGY]  read  =  current.crc.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  read  =  current.crc.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	read  =  current.crc.read(buffer,  offset,  length);	  return    read.getBytes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
69	[BUG]  [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  read  =  current.in.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	read  =  current.in.read(buffer,  offset,  length);	  return    read.getBytes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  read  =  current.crc.getBytes();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  read  =  current.crc.getBytes();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	read  =  current.crc.getBytes();	  return    read.getBytes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  return  current.crc.getBytes(read);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.getBytes(read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.getBytes(read);	  return    read.getBytes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  return  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.read(buffer,  offset,  length);	  return    current.in;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
73	[BUG]  [BUGGY]  return  current.in.read(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.read(buffer,  offset  +  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.read(buffer,  offset  +  length);	  return    current.in;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
74	[BUG]  [BUGGY]  return  current.in.read(buffer,  offset,  length  -  read);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.read(buffer,  offset,  length  -  read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.read(buffer,  offset,  length  -  read);	  return    current.in;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
75	[BUG]  [BUGGY]  return  current.in.read(buffer,  off,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.read(buffer,  off,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.read(buffer,  off,  length);	  return    current.in;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
78	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
79	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMetho  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMetho  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMetho	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMet	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
82	[BUG]  [BUGGY]  return  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  in.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  in.read(buffer,  offset,  length);	  return    current;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
83	[BUG]  [BUGGY]  return  current.cloneTree();  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.cloneTree();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.cloneTree();	  return    current;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
84	[BUG]  [BUGGY]  return  in.read(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  in.read(buffer,  offset  +  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  in.read(buffer,  offset  +  length);	  return    current;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
85	[BUG]  [BUGGY]  return  current.clone();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.clone();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.clone();	  return    current;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  return  current.crc.toByteArray();  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.toByteArray();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.toByteArray();	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  return  current.in.toByteArray();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.toByteArray();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.toByteArray();	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  while(current.crc!=  null)  {  return  read.toByteArray();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  while(current.crc!=  null)  {  return  read.toByteArray();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	while(current.crc!=  null)  {  return  read.toByteArray();	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
89	[BUG]  [BUGGY]  read  =  current.crc.toByteArray();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  read  =  current.crc.toByteArray();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	read  =  current.crc.toByteArray();	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  if(read!=  null)  {  return  buffer.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(read!=  null)  {  return  buffer.toByteArray();  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(read!=  null)  {  return  buffer.toByteArray();  }	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  return  read  -  0xff;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  -  0xff;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  -  0xff;	  return    read    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
92	[BUG]  [BUGGY]  return  read  %  0xff;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  %  0xff;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  %  0xff;	  return    read    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
93	[BUG]  [BUGGY]  return  read  +  0xff;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  +  0xff;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  +  0xff;	  return    read    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
94	[BUG]  [BUGGY]  return  read  &  0xff,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &  0xff,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &  0xff,  length);	  return    read    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
95	[BUG]  [BUGGY]  return  read  &  0x7F;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &  0x7F;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &  0x7F;	  return    read    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
96	[BUG]  [BUGGY]  return  read  |  0xff;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  |  0xff;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  |  0xff;	  return    read    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
97	[BUG]  [BUGGY]  return  current.crc.update(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.update(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.update(buffer,  offset,  length);	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
98	[BUG]  [BUGGY]  return  current.crc.update(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.update(buffer,  offset,  read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.update(buffer,  offset,  read);	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
99	[BUG]  [BUGGY]  return  current.crc.updateValue(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.updateValue(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.updateValue(buffer,  offset,  length);	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
100	[BUG]  [BUGGY]  return  current.crc.read;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.read;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.read;	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
101	[BUG]  [BUGGY]  return  read  ||(current.crc!=  null  &&  current.crc.isEnabled(current.entry));  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  ||(current.crc!=  null  &&  current.crc.isEnabled(current.entry));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  ||(current.crc!=  null  &&  current.crc.isEnabled(current.entry));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
102	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.isEnabled(current.entry));  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.isEnabled(current.entry));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.isEnabled(current.entry));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
103	[BUG]  [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.crc.isEnabled(current.entry));  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.crc.isEnabled(current.entry));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc  ==  null  ||  current.crc.isEnabled(current.entry));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
104	[BUG]  [BUGGY]  return  current.crc.open(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.open(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.open(buffer,  offset,  length);	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
105	[BUG]  [BUGGY]  return  current.crc.reset(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.reset(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.reset(buffer,  offset,  length);	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
106	[BUG]  [BUGGY]  return  read  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.in!=  null  ||  current.in.read(buffer,  offset  +  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
107	[BUG]  [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset,  length)>  0);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset,  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset,  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
108	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
109	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
110	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod())	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
111	[BUG]  [BUGGY]  while(current.crc!=  null)  {  return  read.getBytes();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  while(current.crc!=  null)  {  return  read.getBytes();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	while(current.crc!=  null)  {  return  read.getBytes();	  return    read.getBytes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
112	[BUG]  [BUGGY]  return  current.crc.getbytes();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.getbytes();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.getbytes();	  return    read.getBytes();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
113	[BUG]  [BUGGY]  if(read!=  null)  {  return  read.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(read!=  null)  {  return  read.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  length);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(read!=  null)  {  return  read.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  length);  }	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
114	[BUG]  [BUGGY]  if(read!=  null)  {  return  buffer.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(read!=  null)  {  return  buffer.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  length);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(read!=  null)  {  return  buffer.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  length);  }	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
115	[BUG]  [BUGGY]  if(read!=  null)  {  return  read.toByteArray();  }  else  {  current.crc.update(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(read!=  null)  {  return  read.toByteArray();  }  else  {  current.crc.update(buffer,  offset,  length);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(read!=  null)  {  return  read.toByteArray();  }  else  {  current.crc.update(buffer,  offset,  length);  }	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
116	[BUG]  [BUGGY]  if(read!=  null)  {  return  buffer.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  read);  }  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(read!=  null)  {  return  buffer.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  read);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(read!=  null)  {  return  buffer.toByteArray();  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  current.crc.update(buffer,  offset,  read);  }	  return    read.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  if(read!=  null)  {  return  read.toByteArray();  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(read!=  null)  {  return  read.toByteArray();  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(read!=  null)  {  return  read.toByteArray();  }	  return    read.toByteArray();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
118	[BUG]  [BUGGY]  return  current.entry;  [CE]  <identifier>  expected  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.entry;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.entry;	  return    this.entryEncoding;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
119	[BUG]  [BUGGY]  return(current.entryEncoding!=  null)?  this  :  current.entryEncoding;  [CE]  <identifier>  expected  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.entryEncoding!=  null)?  this  :  current.entryEncoding;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.entryEncoding!=  null)?  this  :  current.entryEncoding;	  return    this.entryEncoding;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
120	[BUG]  [BUGGY]  return  read  &  0xff,  current.crc.offset;  [CE]  <identifier>  expected  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &  0xff,  current.crc.offset;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &  0xff,  current.crc.offset;	  return    read    &    0xff;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
121	[BUG]  [BUGGY]  return  read  &  0xff  +  1;  [CE]  <identifier>  expected  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &  0xff  +  1;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &  0xff  +  1;	  return    read    &    0xff;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
122	[BUG]  [BUGGY]  return  read  &  0xff,  current.in.read();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &  0xff,  current.in.read();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &  0xff,  current.in.read();	  return    read    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
123	[BUG]  [BUGGY]  return  read  &  0xffF;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &  0xffF;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &  0xffF;	  return    read    &    0xff;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
124	[BUG]  [BUGGY]  return  current.cloneAndCrc;  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.cloneAndCrc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.cloneAndCrc;	  return    current;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
125	[BUG]  [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset,  length));  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset,  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset,  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset,    length));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
126	[BUG]  [BUGGY]  return  current.in.read();  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.read();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.read();	  return    current.in;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
127	[BUG]  [BUGGY]  while(current.crc!=  null)  {  if(read  >  0)  {  current.crc.update(buffer,  offset,  read);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  while(current.crc!=  null)  {  if(read  >  0)  {  current.crc.update(buffer,  offset,  read);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	while(current.crc!=  null)  {  if(read  >  0)  {  current.crc.update(buffer,  offset,  read);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
128	[BUG]  [BUGGY]  while(current.crc!=  null)  {  current.crc.update(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  while(current.crc!=  null)  {  current.crc.update(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	while(current.crc!=  null)  {  current.crc.update(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
129	[BUG]  [BUGGY]  while(current.crc!=  null)  {  if(read  >  0)  {  current.crc.update(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  while(current.crc!=  null)  {  if(read  >  0)  {  current.crc.update(buffer,  offset,  length);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	while(current.crc!=  null)  {  if(read  >  0)  {  current.crc.update(buffer,  offset,  length);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
130	[BUG]  [BUGGY]  while(current.crc!=  null)  {  current.crc.update(buffer,  offset,  read);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  while(current.crc!=  null)  {  current.crc.update(buffer,  offset,  read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	while(current.crc!=  null)  {  current.crc.update(buffer,  offset,  read);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
131	[BUG]  [BUGGY]  return(read  ==  0)?  this.in  :  read;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(read  ==  0)?  this.in  :  read;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(read  ==  0)?  this.in  :  read;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
132	[BUG]  [BUGGY]  return(read  ==  0)?  this.in  :  in;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(read  ==  0)?  this.in  :  in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(read  ==  0)?  this.in  :  in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
133	[BUG]  [BUGGY]  return(read!=  0)?  this.in  :  read;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(read!=  0)?  this.in  :  read;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(read!=  0)?  this.in  :  read;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
134	[BUG]  [BUGGY]  return(read  >=  0)?  this.in  :  read;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(read  >=  0)?  this.in  :  read;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(read  >=  0)?  this.in  :  read;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
135	[BUG]  [BUGGY]  return(read!=  0)?  this.in  :  in;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(read!=  0)?  this.in  :  in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(read!=  0)?  this.in  :  in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  return(current.crc!=  null)?  0  :  current.crc;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  0  :  current.crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  0  :  current.crc;	  return    this.crc;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
137	[BUG]  [BUGGY]  return(current.crc  ==  null)?  this  :  current.crc;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc  ==  null)?  this  :  current.crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc  ==  null)?  this  :  current.crc;	  return    this.crc;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
138	[BUG]  [BUGGY]  return(read  ==  0)?  this.crc  :  crc;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(read  ==  0)?  this.crc  :  crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(read  ==  0)?  this.crc  :  crc;	  return    this.crc;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
139	[BUG]  [BUGGY]  return  read.length  -  1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read.length  -  1;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read.length  -  1;	  return    read.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
140	[BUG]  [BUGGY]  return  current.crc.arrayOffset(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.arrayOffset(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.arrayOffset(buffer,  offset,  length);	  return    read.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
141	[BUG]  [BUGGY]  return  read  &&  current.crc  >=  null;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc  >=  null;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc  >=  null;	  return    read    &&    current.crc!=    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
142	[BUG]  [BUGGY]  return  read  &&  current.crc  [Delete]  null;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc  [Delete]  null;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc  [Delete]  null;	  return    read    &&    current.crc!=    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
143	[BUG]  [BUGGY]  return  read  &&  current.crc.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc.read(buffer,  offset,  length  +  1);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc.read(buffer,  offset,  length  +  1);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
144	[BUG]  [BUGGY]  return  read  &&  current.crc.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc.read(buffer,  offset,  length  -  1);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc.read(buffer,  offset,  length  -  1);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
145	[BUG]  [BUGGY]  return  read  &&  current.crc.in.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc.in.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc.in.read(buffer,  offset,  length);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
146	[BUG]  [BUGGY]  return  read  &&  current.crc.decode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&  current.crc.decode(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&  current.crc.decode(buffer,  offset,  length);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
147	[BUG]  [BUGGY]  return  current.crc!=  null  &&(current.crc!=  null  ||  current.crc.isEnabled(current.entry));  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc!=  null  &&(current.crc!=  null  ||  current.crc.isEnabled(current.entry));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc!=  null  &&(current.crc!=  null  ||  current.crc.isEnabled(current.entry));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
148	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(entryEncoding));  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(entryEncoding));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.crc.isEnabled(entryEncoding));	  return    read    &&(current.crc!=    null    ||    current.crc.isEnabled(current.entry));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
149	[BUG]  [BUGGY]  return  current.in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.read(buffer,  offset,  length  -  1);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.read(buffer,  offset,  length  -  1);	  return    current.in;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
150	[BUG]  [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset  +  length));  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset  +  length));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset  +  length));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
151	[BUG]  [BUGGY]  return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length,  current.entryEncoding));  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length,  current.entryEncoding));  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc!=  null  ||  current.in.read(buffer,  offset  +  length,  current.entryEncoding));	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
152	[BUG]  [BUGGY]  return  read.read()  &&  current.crc.read(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read.read()  &&  current.crc.read(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read.read()  &&  current.crc.read(buffer,  offset,  length);	  return    read    &&    current.crc.read(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
153	[BUG]  [BUGGY]  return  current.crc.createEntry(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.createEntry(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.createEntry(buffer,  offset,  length);	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
154	[BUG]  [BUGGY]  return  current.crc.getEntry(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.getEntry(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.getEntry(buffer,  offset,  length);	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
155	[BUG]  [BUGGY]  return  current.crc.decodeZipEncoding(read);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.decodeZipEncoding(read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.decodeZipEncoding(read);	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
156	[BUG]  [BUGGY]  return  current.crc.reset();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.reset();  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.reset();	  return    current.crc;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
157	[BUG]  [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset  +  length)>  0);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset  +  length)>  0);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  read  &&(current.crc  ==  null  ||  current.in.read(buffer,  offset  +  length)>  0);	  return    read    &&(current.crc!=    null    ||    current.in.read(buffer,    offset    +    length)>    0);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
158	[BUG]  [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod());  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
159	[BUG]  [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()));  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
160	[BUG]  [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
161	[BUG]  [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
162	[BUG]  [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
163	[BUG]  [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()));  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()));  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()));  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
164	[BUG]  [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()).  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()).  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  if(read  >  0)  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry.getMethod()).	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
165	[BUG]  [BUGGY]  return(in!=  null)?  this.in  :  in;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(in!=  null)?  this.in  :  in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(in!=  null)?  this.in  :  in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
166	[BUG]  [BUGGY]  return(in  <  =  0)?  this.in  :  in;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(in  <  =  0)?  this.in  :  in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(in  <  =  0)?  this.in  :  in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
167	[BUG]  [BUGGY]  return(in  <  0)?  this.in  :  in;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(in  <  0)?  this.in  :  in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(in  <  0)?  this.in  :  in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
168	[BUG]  [BUGGY]  return(in  ==  null)?  this.in  :  in;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(in  ==  null)?  this.in  :  in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(in  ==  null)?  this.in  :  in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
169	[BUG]  [BUGGY]  return(current.in!=  null)?  this  :  current.in;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.in!=  null)?  this  :  current.in;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.in!=  null)?  this  :  current.in;	  return    this.in;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
170	[BUG]  [BUGGY]  return(current.crc!=  null)?  this.crc  :  crc;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  this.crc  :  crc;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  this.crc  :  crc;	  return    this.crc;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
171	[BUG]  [BUGGY]  return(current.crc!=  null)?  this  :  new  ZipArchiveEntry(current.entry,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  this  :  new  ZipArchiveEntry(current.entry,  buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  this  :  new  ZipArchiveEntry(current.entry,  buffer,  offset,  length);	  return    this.crc;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
172	[BUG]  [BUGGY]  return(current.crc!=  null)?  this  :  new  ZipArchiveEntry(this,  read,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return(current.crc!=  null)?  this  :  new  ZipArchiveEntry(this,  read,  buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return(current.crc!=  null)?  this  :  new  ZipArchiveEntry(this,  read,  buffer,  offset,  length);	  return    this.crc;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
173	[BUG]  [BUGGY]  return  current.in.getBytes(read);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.in.getBytes(read);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.in.getBytes(read);	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
174	[BUG]  [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	if(current.crc!=  null)  {  return  read.getBytes(current.crc);  }	  return    read.getBytes(current.crc);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
175	[BUG]  [BUGGY]  return  current.crc.offset;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.offset;  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.offset;	  return    read.length;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
176	[BUG]  [BUGGY]  return  current.crc.decodeValue(buffer,  offset,  length);  [timeout]  [FE]                  arrays  first  differed    [CONTEXT]    read  =  current.in.read(buffer,  offset,  length);  }  else  {  throw  new  UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),  current.entry);  }  if  (read  >=  0)  {  current.crc.update(buffer,  offset,  read);  }    [BUGGY]  return  current.crc.decodeValue(buffer,  offset,  length);  [BUGGY]    }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	396	396	1	replace	return  current.crc.decodeValue(buffer,  offset,  length);	  return    read.length;    	non-compiled	[timeout]	18	None	replace
