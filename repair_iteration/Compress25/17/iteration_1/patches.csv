bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor(current.entry,  offset))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor(current.entry,  offset))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor(current.entry,  offset))  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor(current.entry)&&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor(current.entry)&&  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor(current.entry)&&  hasUTF8Flag)  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor(current.entry)||  offset  >  buffer.length  ||  length  ==  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor(current.entry)||  offset  >  buffer.length  ||  length  ==  current.entry.length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor(current.entry)||  offset  >  buffer.length  ||  length  ==  current.entry.length)  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  if(current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  if(!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  if(!current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  if(current.entry.hasMethod()  ||!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry.hasMethod()  ||!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry.hasMethod()  ||!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(this.allowStoredEntriesWithDataDescriptor  &&!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  offset))  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  offset))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  offset))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)&&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)&&  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)&&  hasUTF8Flag)  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  length))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  length))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  length))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  offset  +  length))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  offset  +  length))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  offset  +  length))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer.length))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer.length))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer.length))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  hasUTF8Flag)  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset  +  length))  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset  +  length))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset  +  length))  {	  if    (!allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  hasUTF8Flag)  {	  if    (!allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  buffer.length  >  offset)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  buffer.length  >  offset)  {	  if    (!allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||    current.entry.getMethod()    ==    ZipMethod.DATA_DESCRIPTOR)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()!=  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()!=  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()!=  ZipMethod.DATA_DESCRIPTOR)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||    current.entry.getMethod()    ==    ZipMethod.DATA_DESCRIPTOR)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR  ||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR  ||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR  ||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||    current.entry.getMethod()    ==    ZipMethod.DATA_DESCRIPTOR)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  current.entry.getMethod()!=  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  current.entry.getMethod()!=  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)&&  current.entry.getMethod()!=  ZipMethod.DATA_DESCRIPTOR)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||    current.entry.getMethod()    ==    ZipMethod.DATA_DESCRIPTOR)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||    current.entry.getMethod()    ==    ZipMethod.DATA_DESCRIPTOR)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&!current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&!current.entry.isDirectory())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&!current.entry.isDirectory())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.isDirectory())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.isDirectory())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  if(current.entry!=  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
28	[BUG]  [BUGGY]  if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  if(isDirectory()  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(isDirectory()  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(isDirectory()  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  current.getInputStream();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  current.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  current.entry.getInputStream();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  current.entry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  Inflater  inf  =  current.createInflater(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  current.createInflater(buffer,  offset,  length);  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  current.createInflater(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  current.entry  =  entryEncoding.getValue();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  current.entry  =  entryEncoding.getValue();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	current.entry  =  entryEncoding.getValue();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  int  length  =  current.entry.length();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  int  length  =  current.entry.length();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	int  length  =  current.entry.length();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  Inflater  inf  =  current.inputStream.read();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  current.inputStream.read();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  current.inputStream.read();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  Inflater  inf  =  current.entry.getOutputFile();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  current.entry.getOutputFile();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  current.entry.getOutputFile();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&!current.entry.hasMethod())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  current.entry.hasMethod())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  if(current.entry!=  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  if(hasUTF8Flag  &&!supportsDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(hasUTF8Flag  &&!supportsDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(hasUTF8Flag  &&!supportsDataDescriptorFor(current.entry))  {	  if(hasUTF8Flag    ||!supportsDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {	  if(hasUTF8Flag    ||!supportsDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  if(current.entry!=  null  ||  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  ||  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  ||  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {	  if(hasUTF8Flag    ||!supportsDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
45	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {	  if(hasUTF8Flag    ||!supportsDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null  ||  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null  ||  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {	  if(hasUTF8Flag    ||!supportsDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  if(!hasUTF8Flag  &&!supportsDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!hasUTF8Flag  &&!supportsDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!hasUTF8Flag  &&!supportsDataDescriptorFor(current.entry))  {	  if(hasUTF8Flag    ||!supportsDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
48	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  <  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  <  current.entry.length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  <  current.entry.length)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  current.entry!=  null)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  current.entry!=  null)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&  current.entry!=  null)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
55	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  if(allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.DATA_DESCRIPTOR)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer.length))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer.length))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer.length))  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
60	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  length))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  length))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  length))  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
61	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)&&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)&&  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)&&  hasUTF8Flag)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset,  length))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset,  length))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset,  length))  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  if(!hasUTF8Flag  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!hasUTF8Flag  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!hasUTF8Flag  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  if(hasUTF8Flag  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(hasUTF8Flag  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(hasUTF8Flag  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
65	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor(current.entry))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptor(current.entry))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor(current.entry)&&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor(current.entry)&&  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptor(current.entry)&&  hasUTF8Flag)  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
68	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length);  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  entryEncoding.deflateInflate(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
69	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  entryEncoding.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  Inflater  inf  =  getOutputFile(current.entry);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  getOutputFile(current.entry);  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  getOutputFile(current.entry);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  getInputStream();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  Inflater  inf  =  entryEncoding.getInputStream(buffer,  offset,  length);  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	Inflater  inf  =  entryEncoding.getInputStream(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {	  if(hasUTF8Flag    ||!supportsDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
74	[BUG]  [BUGGY]  if  (!allowStoredEntriesWithDataDescriptor(current.entry)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if  (!allowStoredEntriesWithDataDescriptor(current.entry)||  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if  (!allowStoredEntriesWithDataDescriptor(current.entry)||  hasUTF8Flag)  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  if  (!allowStoredEntriesWithDataDescriptor(current.entry)&&  isEnabled(Feature.DATA_DESCRIPTOR))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if  (!allowStoredEntriesWithDataDescriptor(current.entry)&&  isEnabled(Feature.DATA_DESCRIPTOR))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if  (!allowStoredEntriesWithDataDescriptor(current.entry)&&  isEnabled(Feature.DATA_DESCRIPTOR))  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  if  (!allowStoredEntriesWithDataDescriptorFor(current.entry)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if  (!allowStoredEntriesWithDataDescriptorFor(current.entry)||  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if  (!allowStoredEntriesWithDataDescriptorFor(current.entry)||  hasUTF8Flag)  {	  if    (!allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
77	[BUG]  [BUGGY]  if(current.entry!=  null  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  ||!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  if(current.entry  ==  null  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null  ||!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
79	[BUG]  [BUGGY]  if(current.entry  ==  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
80	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  if(!current.entry.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!current.entry.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!current.entry.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
82	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.UNSHRINKING)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||    current.entry.getMethod()    ==    ZipMethod.DATA_DESCRIPTOR)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
83	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.USE_DATA_DESCRIPTOR)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.USE_DATA_DESCRIPTOR)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  current.entry.getMethod()  ==  ZipMethod.USE_DATA_DESCRIPTOR)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||    current.entry.getMethod()    ==    ZipMethod.DATA_DESCRIPTOR)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
84	[BUG]  [BUGGY]  if(!current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!current.entry.allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
85	[BUG]  [BUGGY]  if(hasDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(hasDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(hasDataDescriptor  ||!current.entry.hasMethod())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
86	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  isEnabled(current.entry))  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  isEnabled(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&  isEnabled(current.entry))  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
87	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  >  current.entry.length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  >  current.entry.length)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  current.entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  current.entry  ==  null)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&  current.entry  ==  null)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  if(current.entry  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
90	[BUG]  [BUGGY]  if(current.entry!=  null)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
91	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  if(hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(hasDataDescriptor)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(hasDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
93	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  buffer))  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
94	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||  hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||  hasUTF8Flag)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||!hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||!hasUTF8Flag)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||!hasUTF8Flag)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
96	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset,  length);  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
97	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length);  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	current.entry  =  entryEncoding.decodeBase64Entry(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
98	[BUG]  [BUGGY]  int  length  =  current.entry.getLength();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  int  length  =  current.entry.getLength();  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	int  length  =  current.entry.getLength();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
99	[BUG]  [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	current.entry  =  entryEncoding.decode(buffer,  offset  +  length,  current.length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
100	[BUG]  [BUGGY]  if(current.entry!=  null  &&  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&  this.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
101	[BUG]  [BUGGY]  if(current.entry!=  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  this.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  >  current.entry.length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  offset  >  buffer.length  ||  length  >  current.entry.length)  {	  if(this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
103	[BUG]  [BUGGY]  if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptorFor(current.entry))  {	  if    (!allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
104	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  offset  <  buffer.length  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  offset  <  buffer.length  ||  length  >  current.entry.length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry)||  offset  <  buffer.length  ||  length  >  current.entry.length)  {	  if    (!allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
105	[BUG]  [BUGGY]  if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
106	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.isDirectory())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
107	[BUG]  [BUGGY]  if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor(current.entry))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor(current.entry))  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
108	[BUG]  [BUGGY]  if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor(current.entry))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null  ||!allowStoredEntriesWithDataDescriptor(current.entry))  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  if(hasDataDescriptor  ||!allowStoredEntriesWithDataDescriptor(current.entry))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(hasDataDescriptor  ||!allowStoredEntriesWithDataDescriptor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(hasDataDescriptor  ||!allowStoredEntriesWithDataDescriptor(current.entry))  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor(current.entry)||  offset  <  buffer.length  ||  length  >  current.entry.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor(current.entry)||  offset  <  buffer.length  ||  length  >  current.entry.length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor(current.entry)||  offset  <  buffer.length  ||  length  >  current.entry.length)  {	  if    (!allowStoredEntriesWithDataDescriptor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
111	[BUG]  [BUGGY]  if(current.entry!=  null  &&  current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&  current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&  current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
112	[BUG]  [BUGGY]  if(current.entry!=  null  &&  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&  this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(this.allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
113	[BUG]  [BUGGY]  if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&!allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptor  ||!current.entry.hasMethod())  {	  if(!allowStoredEntriesWithDataDescriptor    ||!current.entry.hasMethod())    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
115	[BUG]  [BUGGY]  if(current.entry!=  null  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
116	[BUG]  [BUGGY]  if(current.entry  ==  null  ||!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry  ==  null  ||!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry  ==  null  ||!this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  offset  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  offset  >=  buffer.length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry)||  offset  >=  buffer.length)  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
118	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(this.allowStoredEntriesWithDataDescriptorFor(current.entry))  {	  if(!this.allowStoredEntriesWithDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
119	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)&&  length  >  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)&&  length  >  0)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)&&  length  >  0)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
120	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||  buffer.length  >  length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptorFor(current.entry,  offset)||  buffer.length  >  length)  {	  if(!allowStoredEntriesWithDataDescriptorFor(current.entry,    offset))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
121	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  offset  <  length)  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  offset  <  length)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
122	[BUG]  [BUGGY]  if(current.entry!=  null  &&  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);    [BUGGY]  if(current.entry!=  null  &&  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {  [BUGGY]    throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.STORED)  {  read  =  readStored(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipArchiveOutputStream.DEFLATED)  {  read  =  readDeflated(buffer,  offset,  length);  }  else  if  (current.entry.getMethod()  ==  ZipMethod.UNSHRINKING.getCode()  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	374	374	1	replace	if(current.entry!=  null  &&  hasUTF8Flag  ||!supportsDataDescriptorFor(current.entry))  {	  if(hasUTF8Flag    ||!supportsDataDescriptorFor(current.entry))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
