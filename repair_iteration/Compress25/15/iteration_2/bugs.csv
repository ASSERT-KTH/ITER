bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(offset  >=  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  if(offset  >=  length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  offset  <  0  ||  length  -  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  offset  <  0  ||  length  -  offset  >  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  offset  <  0  ||  length  -  offset  >  buffer.length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  >  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  >  buffer.length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  if(offset  >=  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(offset  >=  length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  +  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  +  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  +  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >=  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  if(offset  <  length  &&  length  <  0  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  &&  length  <  0  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  &&  length  <  0  ||  buffer.length  -  offset  >=  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
15	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  =  0  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  =  0  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  =  0  ||  buffer.length  -  offset  >=  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
16	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  +  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >>  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >>  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >>  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
18	[BUG]  [BUGGY]  if(offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(offset  >  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(length  >  buffer.length  &&  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  buffer.length  &&  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  buffer.length  &&  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  if(offset  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  if(length  <  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >=  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  if(offset  <  length  &&  length  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  &&  length  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  &&  length  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  =  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  =  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  =  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  <  =  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  -  offset  <  =  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  Inflater  inf  =  getInputStream();  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	Inflater  inf  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  current.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  current.reset();  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  current.reset();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  Inflater  inf  =  openInputStream(buffer,  offset,  length);  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	Inflater  inf  =  openInputStream(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.reset();  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.reset();  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.reset();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length);  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  int  currentLen  =  current.read(buffer,  offset,  length);  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	int  currentLen  =  current.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.getEntry(i);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.getEntry(i);  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.getEntry(i);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  if(length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
36	[BUG]  [BUGGY]  if(offset  <  0  ||  length  >  buffer.length  -  offset)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  0  ||  length  >  buffer.length  -  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  0  ||  length  >  buffer.length  -  offset)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  <  0  ||  offset  +  length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  <  0  ||  offset  +  length  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  <  0  ||  offset  +  length  >  length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  =  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  =  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  =  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  =  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  =  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  =  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >=  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  >=  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  >=  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  >=  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  len)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  len)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  len)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  end)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  end)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  end)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  if(offset  <  =  length  &&  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  =  length  &&  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  =  length  &&  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  if(offset  <  =  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  =  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  =  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
49	[BUG]  [BUGGY]  if(offset  <  =  length  ||  buffer.length  <  1  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  =  length  ||  buffer.length  <  1  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  =  length  ||  buffer.length  <  1  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
50	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  =  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  =  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  len)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  len)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  len)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  inputStream.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  inputStream.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  inputStream.length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  =  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  =  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  =  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  size)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  size)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  size)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  end)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  end)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  end)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  =  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  =  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  =  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  len)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  len)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  len)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  inputStream.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  inputStream.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  inputStream.length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  size)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  size)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  size)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  end)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  end)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  end)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
62	[BUG]  [BUGGY]  if(offset  <  length  ||  offset  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  offset  <  0  ||  buffer.length  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  offset  <  0  ||  buffer.length  >  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  +  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  =  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  =  0  ||  buffer.length  >  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  =  0  ||  buffer.length  >  offset)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >=  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >=  0  ||  buffer.length  >  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >=  0  ||  buffer.length  >  offset)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  &&  buffer.length  <  0  ||  offset  >  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
68	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  =  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  =  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  =  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  1  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  1  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  1  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
70	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  >  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  >  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  >  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
71	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  2  ||  offset  <  2  ||  buffer.length  -  offset  <  2)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  2  ||  offset  <  2  ||  buffer.length  -  offset  <  2)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  2  ||  offset  <  2  ||  buffer.length  -  offset  <  2)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  +  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
73	[BUG]  [BUGGY]  if(offset  >=  buffer.length  &&  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  &&  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  &&  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  fileNameLen)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  fileNameLen)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  fileNameLen)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
75	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  +  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
78	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  ==  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  ==  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  ==  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
79	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  0  ||  buffer.length  -  offset  +  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
80	[BUG]  [BUGGY]  if(offset  <  =  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  =  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  =  length  ||  buffer.length  <  0  ||  offset  >=  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
81	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  <  0  ||  offset  +  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  <  0  ||  offset  +  length  >  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  <  0  ||  offset  +  length  >  buffer.length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
82	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  <  0  ||  buffer.length  -  offset  >  length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
83	[BUG]  [BUGGY]  if(offset  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  0  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  0  ||  length  >  buffer.length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
84	[BUG]  [BUGGY]  if  (offset  <  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if  (offset  <  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if  (offset  <  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  >  length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
85	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  offset)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  if(offset  >=  buffer.length  &&  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  &&  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  &&  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
88	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  +  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  >=  0  ||  buffer.length  -  offset  <  =  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  >=  0  ||  buffer.length  -  offset  <  =  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  >=  0  ||  buffer.length  -  offset  <  =  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
91	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  ==  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  ==  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  ==  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
92	[BUG]  [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  offset  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
93	[BUG]  [BUGGY]  if(offset  >=  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  length  ||  length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    length    ||    length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
94	[BUG]  [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  -  offset  >=  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
95	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
96	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
97	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  >=  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
98	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  -  offset  >=  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
99	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  fileNameLen)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  fileNameLen)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  fileNameLen)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
100	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  +  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
101	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  -  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  -  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  -  offset)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >=  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >=  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >=  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  0)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  >  0)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
104	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
105	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
106	[BUG]  [BUGGY]  if(offset  >=  buffer.length  &&  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  &&  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  &&  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
107	[BUG]  [BUGGY]  if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >=  buffer.length  ||  offset  <  0  ||  buffer.length  >  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
108	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  offset  +  length  -  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  offset  +  length  -  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  offset  +  length  -  offset)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
109	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
110	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.read(buffer,  offset,  length);  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.read(buffer,  offset,  length);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
111	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  if(buffer[i]!=  null)  {  return  i;  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  if(buffer[i]!=  null)  {  return  i;  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  if(buffer[i]!=  null)  {  return  i;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
112	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  if(buffer[i]!=  null)  {  return  i;  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  if(buffer[i]!=  null)  {  return  i;  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  if(buffer[i]!=  null)  {  return  i;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
113	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.read(buffer,  offset,  length);  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0,  length  =  buffer.length;  i  <  length;  ++i)  {  current.read(buffer,  offset,  length);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
114	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  if(buffer[i]!=  0)  {  return  i;  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  if(buffer[i]!=  0)  {  return  i;  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  if(buffer[i]!=  0)  {  return  i;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
115	[BUG]  [BUGGY]  if(offset  <  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
116	[BUG]  [BUGGY]  if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
117	[BUG]  [BUGGY]  if(offset  >=  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  0  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
118	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
119	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
120	[BUG]  [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
121	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
122	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  >  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  >  offset)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  >  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
124	[BUG]  [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  &&  buffer.length  <  0  ||  length  >  buffer.length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
125	[BUG]  [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  >  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  &&  buffer.length  <  0  ||  buffer.length  >  offset)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
126	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  buffer.length  -  offset)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  buffer.length  -  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  buffer.length  -  offset)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
127	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
128	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  off  +  length  -  buffer.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  off  +  length  -  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  off  +  length  -  buffer.length)  {	  if(offset    <    =    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
129	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
130	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
131	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
132	[BUG]  [BUGGY]  if(buffer  <  offset  ||  length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(buffer  <  offset  ||  length  <  0  ||  buffer.length  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(buffer  <  offset  ||  length  <  0  ||  buffer.length  >  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    >    offset)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
133	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
134	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >=  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >=  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >=  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
135	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  -  offset  >  length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
136	[BUG]  [BUGGY]  if(offset  <  0  ||  length  >  buffer.length  ||  offset  +  length  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  0  ||  length  >  buffer.length  ||  offset  +  length  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  0  ||  length  >  buffer.length  ||  offset  +  length  >  length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
137	[BUG]  [BUGGY]  if(offset  <  0  ||  length  >  buffer.length  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  0  ||  length  >  buffer.length  ||  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  0  ||  length  >  buffer.length  ||  offset  >  length)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
138	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  -  offset  >  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  0  ||  buffer.length  -  offset  >  offset)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  0  ||  buffer.length  -  offset  >  offset)  {	  if    (offset    <    0    ||    length    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
139	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  offset  >  buffer.length  ||  length  -  offset  <  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
140	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  >  0  ||  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  >  0  ||  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  >  0  ||  offset  +  length)  {	  if(offset    <    length    ||    buffer.length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
141	[BUG]  [BUGGY]  if(offset  >=  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  >  offset  ||  length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    buffer.length    >    offset    ||    length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
143	[BUG]  [BUGGY]  if(offset  <  length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  offset  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
144	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  buffer.length  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
145	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  >  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
146	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  buffer.length  ||  length  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
147	[BUG]  [BUGGY]  if(offset  <  length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
148	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  >=  buffer.length  ||  length  <  0  ||  buffer.length  >  0  ||  offset  +  length)  {	  if(offset    >=    buffer.length    ||    length    <    0    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
149	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  current.reset();  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  current.reset();  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  offset;  i  <  length;  ++i)  {  current.reset();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
150	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.setRead(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.setRead(buffer,  offset,  length);  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.setRead(buffer,  offset,  length);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
151	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
152	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.read(buffer,  offset,  length  +  1);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.read(buffer,  offset,  length  +  1);  }  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  current.read(buffer,  offset,  length  +  1);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
153	[BUG]  [BUGGY]  if(length  <  =  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  <  =  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  <  =  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
154	[BUG]  [BUGGY]  if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  +  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  +  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(length  >  buffer.length  ||  offset  <  0  ||  buffer.length  -  offset  +  length)  {	  if(length    >    buffer.length    ||    offset    <    0    ||    buffer.length    -    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
155	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  >  buffer.length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >  buffer.length  ||  offset  +  length  >  buffer.length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
156	[BUG]  [BUGGY]  if(offset  <  length  ||  length  >=  0  ||  buffer.length  -  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (closed)  {  throw  new  IOException(   "The  stream  is  closed   ");  }  if  (current  ==  null)  {  return  -1;  }      [BUGGY]  if(offset  <  length  ||  length  >=  0  ||  buffer.length  -  offset  >=  length)  {  [BUGGY]    throw  new  ArrayIndexOutOfBoundsException();  }  ZipUtil.checkRequestedFeatures(current.entry);  if  (!supportsDataDescriptorFor(current.entry))  {  throw  new  UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,  current.entry);  }  int  read;  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	369	369	1	replace	if(offset  <  length  ||  length  >=  0  ||  buffer.length  -  offset  >=  length)  {	  if(offset    <    length    ||    length    <    0    ||    buffer.length    -    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
