bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(csize  >  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >  0)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >  0)?  -1  :  -1;	  return(csize!=    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  return(csize  >>  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >>  0)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >>  0)?  -1  :  -1;	  return(csize!=    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  return(csize  <  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  0)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  0)?  -1  :  -1;	  return(csize!=    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  return(csize  [Delete]  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  [Delete]  0)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  [Delete]  0)?  -1  :  -1;	  return(csize!=    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  return(csize  <  =  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  =  0)?  -1  :  1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  =  0)?  -1  :  1;	  return(csize    <    =    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  return(csize  <  =  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  =  0)?  1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  =  0)?  1  :  -1;	  return(csize    <    =    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  return(csize  <  =  1)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  =  1)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  =  1)?  -1  :  -1;	  return(csize    <    =    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	throw  new  IllegalStateException( " ");	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	throw  new  IllegalArgumentException( " ");	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
10	[BUG]  [BUGGY]  if(csize  >  0)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  >  0)  {  return  0;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  >  0)  {  return  0;  }	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  return  0L;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return  0L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return  0L;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  return  csize;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return  csize;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return  csize;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  return(csize  ==  null)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  null)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  null)?  -1  :  -1;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  return(current.bytesRead  ==  null)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  ==  null)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  ==  null)?  -1  :  -1;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
15	[BUG]  [BUGGY]  return(csize  ==  lastStoredEntry)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  lastStoredEntry)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  lastStoredEntry)?  -1  :  -1;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
16	[BUG]  [BUGGY]  return(csize  ==  current.bytesRead)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  current.bytesRead)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  current.bytesRead)?  -1  :  -1;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  return(csize  ==  -1)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  -1)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  -1)?  -1  :  -1;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
18	[BUG]  [BUGGY]  return(csize  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  return(in  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(in  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(in  ==  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  csize);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  csize);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  csize);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  current.bytesRead.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  current.bytesRead.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(lastStoredEntry  ==  null)?  -1  :  current.bytesRead.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  return(int  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(int  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(int  ==  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  return(current.bytesRead  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  ==  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  return(in!=  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(in!=  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(in!=  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  return(csize  ==  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  0)?  -1  :  1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  0)?  -1  :  1;	  return(csize    ==    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  return(csize  ==  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  0)?  1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  0)?  1  :  -1;	  return(csize    ==    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  return(csize  <  0)?  -1  :  csize;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  0)?  -1  :  csize;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  0)?  -1  :  csize;	  return(csize    >    0)?    -1    :    csize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  return(csize  >  0)?  -1  :  csize  +  1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >  0)?  -1  :  csize  +  1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >  0)?  -1  :  csize  +  1;	  return(csize    >    0)?    -1    :    csize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  return(csize  >  0)?  -1  :  current.bytesRead;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >  0)?  -1  :  current.bytesRead;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >  0)?  -1  :  current.bytesRead;	  return(csize    >    0)?    -1    :    csize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  return(csize  >  0)?  1  :  csize;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >  0)?  1  :  csize;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >  0)?  1  :  csize;	  return(csize    >    0)?    -1    :    csize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  return(csize  ==  0)?  -1  :  csize;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  0)?  -1  :  csize;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  0)?  -1  :  csize;	  return(csize    >    0)?    -1    :    csize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  return(csize  <  =  0)?  -1  :  csize;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  =  0)?  -1  :  csize;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  =  0)?  -1  :  csize;	  return(csize    >    0)?    -1    :    csize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  if(csize  <  =  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  <  =  0)  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  <  =  0)  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  if(csize  <  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  <  0)  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  <  0)  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  ||(csize  >  0  &&  current.bytesRead  ==  csize))  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  ||(csize  >  0  &&  current.bytesRead  ==  csize))  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	||(csize  >  0  &&  current.bytesRead  ==  csize))  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  if(csize  ==  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  ==  0)  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  ==  0)  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  ||(csize  >  0  &&  current.bytesRead  ==  bytesRead))  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  ||(csize  >  0  &&  current.bytesRead  ==  bytesRead))  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	||(csize  >  0  &&  current.bytesRead  ==  bytesRead))  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  ||(csize  >  0  &&  current.bytesRead!=  csize))  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  ||(csize  >  0  &&  current.bytesRead!=  csize))  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	||(csize  >  0  &&  current.bytesRead!=  csize))  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  return(csize  >=  current.bytesRead)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >=  current.bytesRead)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >=  current.bytesRead)?  -1  :  -1;	  return(current.bytesRead    ==    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  return(csize!=  current.bytesRead)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize!=  current.bytesRead)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize!=  current.bytesRead)?  -1  :  -1;	  return(current.bytesRead    ==    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  return(this.bytesRead  ==  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(this.bytesRead  ==  csize)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(this.bytesRead  ==  csize)?  -1  :  -1;	  return(current.bytesRead    ==    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  return(csize  ==  current.bytesRead)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  current.bytesRead)?  1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  current.bytesRead)?  1  :  -1;	  return(current.bytesRead    ==    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  return(current.bytesRead  ==  csize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  ==  csize)?  -1  :  1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  ==  csize)?  -1  :  1;	  return(current.bytesRead    ==    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  return(csize  <  current.bytesRead)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  current.bytesRead)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  current.bytesRead)?  -1  :  -1;	  return(current.bytesRead    <    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  return(current.bytesRead  >=  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  >=  csize)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  >=  csize)?  -1  :  -1;	  return(current.bytesRead    <    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  return(this.bytesRead  <  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(this.bytesRead  <  csize)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(this.bytesRead  <  csize)?  -1  :  -1;	  return(current.bytesRead    <    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  return(current.bytesRead  <  =  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  <  =  csize)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  <  =  csize)?  -1  :  -1;	  return(current.bytesRead    <    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  return(csize  <  current.bytesRead)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  current.bytesRead)?  1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  current.bytesRead)?  1  :  -1;	  return(current.bytesRead    <    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  in.read(buffer,  offset,  csize);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  in.read(buffer,  offset,  csize);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	in.read(buffer,  offset,  csize);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  in.read(buffer,  offset,  length);  current.bytesRead  =  csize;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  in.read(buffer,  offset,  length);  current.bytesRead  =  csize;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	in.read(buffer,  offset,  length);  current.bytesRead  =  csize;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  in.read(buffer,  offset,  csize);  current.bytesRead  =  csize;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  in.read(buffer,  offset,  csize);  current.bytesRead  =  csize;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	in.read(buffer,  offset,  csize);  current.bytesRead  =  csize;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  lastStoredEntry  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  lastStoredEntry  =  current.entry.getValue();  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	lastStoredEntry  =  current.entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  lastStoredEntry  =  current.entry.getLastChild();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  lastStoredEntry  =  current.entry.getLastChild();  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	lastStoredEntry  =  current.entry.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  lastStoredEntry  =  current.entry.getLastChunk();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  lastStoredEntry  =  current.entry.getLastChunk();  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	lastStoredEntry  =  current.entry.getLastChunk();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  return(csize  >=  0)?  -1L  :  -1L;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >=  0)?  -1L  :  -1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >=  0)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
57	[BUG]  [BUGGY]  return(csize  <  0)?  -1L  :  -1L;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  0)?  -1L  :  -1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  0)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  return(csize  ==  0)?  -1L  :  -1L;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  0)?  -1L  :  -1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  0)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  return(csize  <  =  0)?  -1L  :  -1L;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  <  =  0)?  -1L  :  -1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  =  0)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  return(csize  ==  -1L)?  -1L  :  -1L;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  -1L)?  -1L  :  -1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  -1L)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  return  1;  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return  1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return  1;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
62	[BUG]  [BUGGY]  return(csize  ==  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  0)?  -1  :  0;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  0)?  -1  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  return(csize  >=  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >=  0)?  -1  :  0;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >=  0)?  -1  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
64	[BUG]  [BUGGY]  return(int!=  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(int!=  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(int!=  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
65	[BUG]  [BUGGY]  return(current  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current  ==  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
66	[BUG]  [BUGGY]  return(current.bytesRead  +  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  +  csize)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  +  csize)?  -1  :  -1;	  return(current.bytesRead    <    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  return(current.bytesRead  >  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  >  csize)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  >  csize)?  -1  :  -1;	  return(current.bytesRead    <    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  return(current.bytesRead  {  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  {  csize)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  {  csize)?  -1  :  -1;	  return(current.bytesRead    ==    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  return(current.bytesRead  ==  csize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  ==  csize)?  -1  :  0;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  ==  csize)?  -1  :  0;	  return(current.bytesRead    ==    csize)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  if(csize  >=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  >=  0)  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  >=  0)  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  if(csize!=  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize!=  0)  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize!=  0)  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  read(csize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  read(csize)  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	read(csize)  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
73	[BUG]  [BUGGY]  return  -1L  }  catch(IOException  ioe)  {  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return  -1L  }  catch(IOException  ioe)  {  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return  -1L  }  catch(IOException  ioe)  {	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
74	[BUG]  [BUGGY]  return  -1L  <  <  readReadFromStream(current.bytesRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return  -1L  <  <  readReadFromStream(current.bytesRead);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return  -1L  <  <  readReadFromStream(current.bytesRead);	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  return(csize  ==  0)?  -1L  :  1L;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  ==  0)?  -1L  :  1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  0)?  -1L  :  1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  return(csize  >=  0)?  -1L  :  1L;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >=  0)?  -1L  :  1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >=  0)?  -1L  :  1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  lastStoredEntry  =(ByteArrayInputStream)current.bytesRead.clone();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  lastStoredEntry  =(ByteArrayInputStream)current.bytesRead.clone();  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	lastStoredEntry  =(ByteArrayInputStream)current.bytesRead.clone();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  lastStoredEntry  =(ByteArrayInputStream)current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  lastStoredEntry  =(ByteArrayInputStream)current.entry.getValue();  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	lastStoredEntry  =(ByteArrayInputStream)current.entry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  csize  =  in.read(current.bytesRead);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  csize  =  in.read(current.bytesRead);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	csize  =  in.read(current.bytesRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  lastStoredEntry  =(ByteArrayInputStream)current.entry.clone();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  lastStoredEntry  =(ByteArrayInputStream)current.entry.clone();  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	lastStoredEntry  =(ByteArrayInputStream)current.entry.clone();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  csize  =  current.bytesRead.read(buffer,  offset,  csize);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  csize  =  current.bytesRead.read(buffer,  offset,  csize);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	csize  =  current.bytesRead.read(buffer,  offset,  csize);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
82	[BUG]  [BUGGY]  lastStoredEntry  =(ByteArrayInputStream)current.clone();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  lastStoredEntry  =(ByteArrayInputStream)current.clone();  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	lastStoredEntry  =(ByteArrayInputStream)current.clone();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
83	[BUG]  [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  0;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(lastStoredEntry  ==  null)?  -1  :  0;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
84	[BUG]  [BUGGY]  return(current  ==  null)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current  ==  null)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current  ==  null)?  -1  :  -1;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
85	[BUG]  [BUGGY]  return(firstEntry  ==  null)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(firstEntry  ==  null)?  -1  :  -1;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(firstEntry  ==  null)?  -1  :  -1;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
86	[BUG]  [BUGGY]  return(csize  >  0)?  -1  :  lastStoredEntry.bytesRead;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >  0)?  -1  :  lastStoredEntry.bytesRead;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >  0)?  -1  :  lastStoredEntry.bytesRead;	  return(csize    >    0)?    -1    :    csize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
87	[BUG]  [BUGGY]  return(csize  >=  0)?  -1  :  csize;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(csize  >=  0)?  -1  :  csize;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >=  0)?  -1  :  csize;	  return(csize    >    0)?    -1    :    csize;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
88	[BUG]  [BUGGY]  return(lastStoredEntry  ==  null)?  0  :  0;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(lastStoredEntry  ==  null)?  0  :  0;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(lastStoredEntry  ==  null)?  0  :  0;	  return(lastStoredEntry    ==    null)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
89	[BUG]  [BUGGY]  if(csize  >  0  ||  csize  <  =  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  >  0  ||  csize  <  =  0)  {  return  -1;  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  >  0  ||  csize  <  =  0)  {  return  -1;  }	  if(csize    >    0)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
90	[BUG]  [BUGGY]  return(current.bytesRead  <  csize)?  -1L  :  -1L;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  <  csize)?  -1L  :  -1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  <  csize)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  return(current.bytesRead  ==  csize)?  -1L  :  -1L;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  ==  csize)?  -1L  :  -1L;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  ==  csize)?  -1L  :  -1L;	  return    -1L;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  return(int)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(int)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(int)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
93	[BUG]  [BUGGY]  return(int)if(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(int)if(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(int)if(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
94	[BUG]  [BUGGY]  return(int)(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(int)(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(int)(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);	  return(lastStoredEntry    ==    null)?    -1    :    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  return(current.bytesRead  <  csize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  <  csize)?  -1  :  0;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  <  csize)?  -1  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
96	[BUG]  [BUGGY]  return(current.bytesRead  <  csize)?  0  :  0;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  <  csize)?  0  :  0;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  <  csize)?  0  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
97	[BUG]  [BUGGY]  return(current.bytesRead  ==  csize)?  0  :  0;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  return(current.bytesRead  ==  csize)?  0  :  0;  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  ==  csize)?  0  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
98	[BUG]  [BUGGY]  int  l  =  in.read(current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  int  l  =  in.read(current.bytesRead);  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	int  l  =  in.read(current.bytesRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
101	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  inputStream.read(buffer,  offset,  csize);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
102	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  entryEncoding.read(buffer,  offset,  csize);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {    [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  entryEncoding.read(buffer,  offset,  csize);  }  [BUGGY]    }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buffer[i]  =  entryEncoding.read(buffer,  offset,  csize);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
