bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  0;  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return  0;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return  0;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  return(csize  >  0)?  -1  :  csize;  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(csize  >  0)?  -1  :  csize;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >  0)?  -1  :  csize;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  if(csize  >  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  if(csize  >  0)  {  return  -1;  }  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	if(csize  >  0)  {  return  -1;  }	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  return(csize  ==  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(csize  ==  0)?  -1  :  -1;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  ==  0)?  -1  :  -1;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  return(csize  >=  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(csize  >=  0)?  -1  :  -1;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  >=  0)?  -1  :  -1;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  return(csize  <  =  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(csize  <  =  0)?  -1  :  -1;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize  <  =  0)?  -1  :  -1;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]    [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	  	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  return(csize!=  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(csize!=  0)?  -1  :  -1;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(csize!=  0)?  -1  :  -1;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  return  -1L;  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return  -1L;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return  -1L;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  return(current.bytesRead  <  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]    arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(current.bytesRead  <  csize)?  -1  :  -1;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  <  csize)?  -1  :  -1;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  return(current.bytesRead  ==  csize)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]      arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(current.bytesRead  ==  csize)?  -1  :  -1;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(current.bytesRead  ==  csize)?  -1  :  -1;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]        arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(lastStoredEntry  ==  null)?  -1  :  in.read(buffer,  offset,  length);	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed  [CONTEXT]  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }  long  csize  =  current.entry.getSize();  if  (current.bytesRead  >=  csize)  {  [BUGGY]  return(lastStoredEntry  ==  null)?  -1  :  -1;  [BUGGY]  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  buf.limit(l);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	413	413	1	replace	return(lastStoredEntry  ==  null)?  -1  :  -1;	return  -1;  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
