bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length  >  buffer.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
2	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
3	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
4	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  <  0  ||  buffer.length  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
5	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
6	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  <  0  ||  offset  >  buffer.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
7	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  0)  {	  if(buffer    ==    null    ||    closed.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
8	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  closed.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  closed.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  0  ||  closed.length  ==  0)  {	  if(buffer    ==    null    ||    closed.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
9	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  0  ||  length  ==  0)  {	  if(buffer    ==    null    ||    closed.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
10	[BUG]  [BUGGY]  if(!current.allowStoredEntries())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.allowStoredEntries())  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.allowStoredEntries())  {	  if(!current)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
11	[BUG]  [BUGGY]  if(!current.isOpen())  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.isOpen())  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.isOpen())  {	  if(!current)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
12	[BUG]  [BUGGY]  if(!current.isEnabled())  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.isEnabled())  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.isEnabled())  {	  if(!current)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
13	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  ||  buffer.length  ==  0)  {	  if(this.closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
14	[BUG]  [BUGGY]  if(buffer.length  ||  this.closed  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ||  this.closed  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ||  this.closed  ==  0)  {	  if(this.closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
15	[BUG]  [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  this.closed  ||  buffer.length  ==  0)  {	  if(this.closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
16	[BUG]  [BUGGY]  if(buffer.length  ||  this.closed!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ||  this.closed!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ||  this.closed!=  0)  {	  if(this.closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
17	[BUG]  [BUGGY]  if(!hasUTF8Flag  &&  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!hasUTF8Flag  &&  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!hasUTF8Flag  &&  buffer.length  >  0)  {	  if(!hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
18	[BUG]  [BUGGY]  if(!hasUTF8Flag  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!hasUTF8Flag  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!hasUTF8Flag  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
19	[BUG]  [BUGGY]  if(hasUTF8Flag  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasUTF8Flag  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasUTF8Flag  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
20	[BUG]  [BUGGY]  if(hasUTF8Flag  &&  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasUTF8Flag  &&  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasUTF8Flag  &&  buffer.length  >  0)  {	  if(!hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
21	[BUG]  [BUGGY]  if(!hasUTF8Flag  &&  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!hasUTF8Flag  &&  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!hasUTF8Flag  &&  buffer.length  >  length)  {	  if(!hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
22	[BUG]  [BUGGY]  Inflater  inf  =  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  current.read(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
23	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
24	[BUG]  [BUGGY]  Inflater  inf  =  current.readInt();  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.readInt();  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  current.readInt();	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
25	[BUG]  [BUGGY]  Inflater  inf  =  current.read();  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.read();  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  current.read();	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
26	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  fileNameLen);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
27	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length,  CFH_LEN);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
28	[BUG]  [BUGGY]  if(length  >  0  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0  ||  buffer.length  <  length)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
29	[BUG]  [BUGGY]  if(length  >  0  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0  ||  buffer.length  <  =  length)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
30	[BUG]  [BUGGY]  if(length  >  0  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0  ||  buffer.length  ==  length)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
31	[BUG]  [BUGGY]  if(length  >  0  ||  buffer.length  >=  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0  ||  buffer.length  >=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0  ||  buffer.length  >=  length)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
32	[BUG]  [BUGGY]  if(offset  ==  buffer.length  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  buffer.length  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  buffer.length  ||  buffer.length!=  length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  >=  buffer.length  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  >=  buffer.length  ||  length!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  >=  buffer.length  ||  length!=  buffer.length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  if(offset  >=  buffer.length  &&  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  >=  buffer.length  &&  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  >=  buffer.length  &&  buffer.length!=  length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  >=  buffer.length  ||  length!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  >=  buffer.length  ||  length!=  buffer.length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  offset!=  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  >=  buffer.length  ||  offset!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  >=  buffer.length  ||  offset!=  length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  if(offset  >=  buffer.length  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  >=  buffer.length  ||  buffer.length!=  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  >=  buffer.length  ||  buffer.length!=  offset)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
38	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length,  buffer.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length,  buffer.length);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
39	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length,  CFH_LEN);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
40	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length,  fileNameLen);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length,  fileNameLen);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
41	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length,  0);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length,  0);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
42	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length,  size);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length,  size);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
43	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length,  bytesRead);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length,  bytesRead);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length,  bytesRead);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
44	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length  -  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length  -  1);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
45	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >>  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >>  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >>  length)  {	  if(buffer    ==    null    ||    offset!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  buffer.length)  {	  if(buffer    ==    null    ||    offset!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  length)  {	  if(this.closed    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
48	[BUG]  [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  this.closed  ||  buffer.length  <  length)  {	  if(this.closed    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
49	[BUG]  [BUGGY]  if(this.closed  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.closed  ||  buffer.length  <  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.closed  ||  buffer.length  <  offset)  {	  if(this.closed    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
50	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  ==  0)  {	  if(closed    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
51	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  0  ||  offset  ==  0)  {	  if(closed    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
52	[BUG]  [BUGGY]  if(length  ==  0  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  offset  ==  0)  {	  if(closed    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
53	[BUG]  [BUGGY]  if(buffered  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffered  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffered  ||  offset  ==  0)  {	  if(closed    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
54	[BUG]  [BUGGY]  if(offset  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ||  offset  ==  0)  {	  if(closed    ||    offset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
55	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
56	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_RESULT))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_RESULT))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_RESULT))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
57	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_ON_CLOSE))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_ON_CLOSE))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_ON_CLOSE))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
58	[BUG]  [BUGGY]  if(isOpen()  ||  isVerticalFile())  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isVerticalFile())  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isVerticalFile())  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
59	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_TO_RESULT))  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_TO_RESULT))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_TO_RESULT))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
60	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
61	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_OFFSET))  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_OFFSET))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.QUOTE_FILES_OFFSET))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
62	[BUG]  [BUGGY]  if(offset  <  =  length  ||  buffer.length  <  =  offset)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  length  ||  buffer.length  <  =  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  length  ||  buffer.length  <  =  offset)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
63	[BUG]  [BUGGY]  if(offset  <  =  buffer.length  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  buffer.length  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  buffer.length  ||  buffer.length  <  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
64	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  buffer.length  ||  buffer.length  <  =  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
65	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  buffer.length  ||  buffer.length  <  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
66	[BUG]  [BUGGY]  if(length  <  =  buffer.length  ||  buffer.length  <  =  offset)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  buffer.length  ||  buffer.length  <  =  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  buffer.length  ||  buffer.length  <  =  offset)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
67	[BUG]  [BUGGY]  if(buffer.length  <  =  offset  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  =  offset  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  =  offset  ||  buffer.length  <  =  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
68	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  0)  {	  if(this.closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
69	[BUG]  [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  this.closed  ||  buffer.length  <  0)  {	  if(this.closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
70	[BUG]  [BUGGY]  if(this.closed  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.closed  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.closed  ||  buffer.length  <  =  0)  {	  if(this.closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
71	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  this.closed)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  this.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  this.closed)  {	  if(this.closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
72	[BUG]  [BUGGY]  if(!this.closed  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.closed  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.closed  ||  buffer.length  <  0)  {	  if(this.closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
73	[BUG]  [BUGGY]  if(length  ==  buffer.length  ||  offset  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  buffer.length  ||  offset  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  buffer.length  ||  offset  ==  buffer.length)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
74	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  buffer.length  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  buffer.length  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  buffer.length  ||  length  ==  buffer.length)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
75	[BUG]  [BUGGY]  if(offset  ==  buffer.length  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  buffer.length  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  buffer.length  ||  length  ==  buffer.length)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
76	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  buffer.length  ||  buffer.length  ==  length)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
77	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  ==  buffer.length  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  ==  buffer.length  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  ==  buffer.length  ||  length  ==  buffer.length)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
78	[BUG]  [BUGGY]  if(offset  ==  buffer.length  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  buffer.length  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  buffer.length  ||  buffer.length  ==  offset)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
79	[BUG]  [BUGGY]  if(offset  <  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  buffer.length  ==  0)  {	  if(offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
80	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  ==  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  ==  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  ==  0  ||  buffer.length  ==  0)  {	  if(offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
81	[BUG]  [BUGGY]  if(offset  >=  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  >=  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  >=  0  ||  buffer.length  ==  0)  {	  if(offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
82	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
83	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
84	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  closed.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  =  0  ||  closed.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  =  0  ||  closed.length  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
85	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0  ||  buffer.length  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
86	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  =  0  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  =  0  ||  buffer.length  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
87	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
88	[BUG]  [BUGGY]  if(offset  <  =  0  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  0  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  0  ||  buffer.length  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
89	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  >=  0)  {	  if(buffer    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
90	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >>  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >>  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  >>  0)  {	  if(buffer    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
91	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  ||  buffer.length  ==  length)  {	  if(this.closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  this.closed  ||  buffer.length  ==  length)  {	  if(this.closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
93	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  this.closed)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  this.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  ==  this.closed)  {	  if(this.closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
94	[BUG]  [BUGGY]  if(buffer.length  ==  this.closed  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  this.closed  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  this.closed  ||  buffer.length  ==  length)  {	  if(this.closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
95	[BUG]  [BUGGY]  if(length  ==  this.closed  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  this.closed  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  this.closed  ||  buffer.length  ==  length)  {	  if(this.closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
96	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  0)  {	  if(buffer    ==    null    ||    length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
97	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset!=  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset!=  0)  {	  if(buffer    ==    null    ||    length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
98	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  >=  0)  {	  if(buffer    ==    null    ||    length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
99	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >>  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >>  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >>  0)  {	  if(buffer    ==    null    ||    length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
100	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  ==  0)  {	  if(current    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
101	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  ||  buffer.length!=  length)  {	  if(this.closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
102	[BUG]  [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  this.closed  ||  buffer.length!=  length)  {	  if(this.closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
103	[BUG]  [BUGGY]  if(buffer.length!=  this.closed  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length!=  this.closed  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length!=  this.closed  ||  buffer.length!=  length)  {	  if(this.closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
104	[BUG]  [BUGGY]  if(this.closed  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.closed  ||  buffer.length!=  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.closed  ||  buffer.length!=  offset)  {	  if(this.closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
105	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  >=  length)  {	  if(buffer    ==    null    ||    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
106	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  offset)  {	  if(current    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
107	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  current.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  <  =  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  <  =  current.length)  {	  if(current    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
108	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  <  =  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  <  =  buffer.length)  {	  if(current    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
109	[BUG]  [BUGGY]  if(!closed  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length!=  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length!=  offset)  {	  if(!closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
110	[BUG]  [BUGGY]  if(!closed  &&  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  &&  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  &&  buffer.length!=  length)  {	  if(!closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
111	[BUG]  [BUGGY]  if(!closed  ||  offset!=  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  offset!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  offset!=  length)  {	  if(!closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
112	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  ==  offset)  {	  if(!closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
113	[BUG]  [BUGGY]  if(!closed  ||  buffer.length!=  off)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length!=  off)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length!=  off)  {	  if(!closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
114	[BUG]  [BUGGY]  if(!closed  ||  offset  >=  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  offset  >=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  offset  >=  length)  {	  if(!closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
115	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0)  {	  if(closed    ||    offset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
116	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  <  0)  {	  if(closed    ||    offset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
117	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  <  0)  {	  if(closed    ||    offset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
118	[BUG]  [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
119	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
120	[BUG]  [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
121	[BUG]  [BUGGY]  if(current  ||  allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
122	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  offset)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
123	[BUG]  [BUGGY]  if(current  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  buffer.length  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
124	[BUG]  [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  this.allowStoredEntriesWithDataDescriptor  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
125	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  <  0  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  <  0  ||  buffer.length  <  0)  {	  if(offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
126	[BUG]  [BUGGY]  if(offset  <  0  ||  length  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  length  <  0)  {	  if(offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
127	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  offset  <  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  offset  <  0  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  offset  <  0  ||  buffer.length  >  0)  {	  if(offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
128	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {	  if(offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
129	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  offset  <  0  ||  buffer.length  <  0)  {	  if(length    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
130	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  buffer.length  >  0)  {	  if(length    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
131	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0  ||  buffer.length  <  0)  {	  if(length    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
132	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  offset  <  0  ||  buffer.length  >  0)  {	  if(length    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
133	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
134	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
135	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
136	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
137	[BUG]  [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
138	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
139	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
140	[BUG]  [BUGGY]  if(length  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  buffer.length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
141	[BUG]  [BUGGY]  if(offset  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  buffer.length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
142	[BUG]  [BUGGY]  if(buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  =  length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
143	[BUG]  [BUGGY]  if(buffer!=  null  ||  length  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  length  <  =  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  length  <  =  buffer.length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
144	[BUG]  [BUGGY]  if(length  <  buffer.length  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  buffer.length  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  buffer.length  ||  buffer.length  <  length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
145	[BUG]  [BUGGY]  if(length  <  buffer.length  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  buffer.length  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  buffer.length  ||  buffer.length  <  =  length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
146	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
147	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  fileNameLen);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
148	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  -  1);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
149	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  0);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  0);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
150	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  length);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
151	[BUG]  [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  zipEncoding.encode(buffer,  offset,  length);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
152	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  size);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  size);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
153	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length!=  offset)  {	  if(buffer    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
154	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  off)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  off)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length!=  off)  {	  if(buffer    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
155	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >=  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >=  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  >=  offset)  {	  if(buffer    ==    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
156	[BUG]  [BUGGY]  if(length  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  offset  >  buffer.length)  {	  if(offset    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
157	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  offset  >  buffer.length)  {	  if(offset    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
158	[BUG]  [BUGGY]  if(offset  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  buffer.length  >  length)  {	  if(offset    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
159	[BUG]  [BUGGY]  if(length  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  offset  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  offset  >  current.length)  {	  if(offset    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
160	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset!=  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset!=  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset!=  0  ||  buffer.length!=  0)  {	  if(current    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
161	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset!=  0  ||  length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset!=  0  ||  length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset!=  0  ||  length!=  0)  {	  if(current    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
162	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length!=  0)  {	  if(current    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
163	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
164	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
165	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  1  ||  length  >  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
166	[BUG]  [BUGGY]  if(buffer  ==  null  ||  current.length  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  current.length  <  0  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  current.length  <  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
168	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
169	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
170	[BUG]  [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
172	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  size);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  size);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  size);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
173	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  buffer.length  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
174	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  <  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  <  buffer.length  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
175	[BUG]  [BUGGY]  if(length  <  buffer.length  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  buffer.length  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  buffer.length  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
176	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  buffer.length  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
177	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  buffer.length  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
178	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  offset  ||  length  >  length)  {  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  offset  ||  length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  <  offset  ||  length  >  length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
179	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  length)  {  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
180	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  buffer.length  <  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  buffer.length  <  offset)  {	  if(offset    <    0    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
181	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  length)  {	  if(offset    <    0    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
182	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  0  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  <  0  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  <  0  ||  buffer.length  <  length)  {	  if(offset    <    0    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
183	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  offset  <  length)  {	  if(offset    <    0    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
184	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  closed.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  closed.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  closed.length)  {	  if(buffer    ==    null    ||    closed.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
185	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  buffer.length)  {	  if(buffer    ==    null    ||    closed.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
186	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  +  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  +  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  +  length  ==  buffer.length)  {	  if(buffer    ==    null    ||    closed.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
187	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  ==  offset)  {	  if(buffer    ==    null    ||    closed.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
188	[BUG]  [BUGGY]  if(length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
189	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0  ||  buffer.length  <  =  length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
190	[BUG]  [BUGGY]  if(offset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
191	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0  ||  buffer.length  ==  length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
192	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0  ||  buffer.length  <  length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
193	[BUG]  [BUGGY]  if(offset  <  =  0  ||  length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  0  ||  length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  0  ||  length  <  =  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	System.arraycopy(buffer,  offset,  buffer,  length);	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
195	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
196	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
197	[BUG]  [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
198	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
199	[BUG]  [BUGGY]  read(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  length);	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
200	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
201	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
202	[BUG]  [BUGGY]  if(current  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
203	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
204	[BUG]  [BUGGY]  if(current  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
205	[BUG]  [BUGGY]  if(hasDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
206	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  this.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
207	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
208	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {	  if(current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
209	[BUG]  [BUGGY]  if(current!=  null  ||  current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current!=  null  ||  current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current!=  null  ||  current.allowStoredEntriesWithDataDescriptor)  {	  if(current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
210	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {	  if(current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
211	[BUG]  [BUGGY]  if(current  ==  null  ||  current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  current.allowStoredEntriesWithDataDescriptor)  {	  if(current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
212	[BUG]  [BUGGY]  if(!closed  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  offset  ==  length)  {	  if(!closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
213	[BUG]  [BUGGY]  if(!closed  &&  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  &&  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  &&  buffer.length  ==  length)  {	  if(!closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
214	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length  ==  length)  {	  if(!closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
215	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  ==  off)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  ==  off)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  ==  off)  {	  if(!closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
216	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length!=  0)  {	  if(length    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
217	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0  ||  buffer.length  ==  0)  {	  if(length    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
218	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0  ||  offset  ==  0)  {	  if(length    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
219	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length  >=  0)  {	  if(length    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
220	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
221	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(buffer);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(buffer);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream(buffer);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
222	[BUG]  [BUGGY]  Inflater  inf  =  getReadInputStream();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getReadInputStream();  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getReadInputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
223	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream().read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream().read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream().read(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
224	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream(buffer,  offset);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
225	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream(buffer,  offset  +  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream(buffer,  offset  +  length);	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
226	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  >  0)  {	  if(buffer    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
227	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer    ==    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);	  if(buffer    ==    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);	  if(buffer    ==    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
230	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  off)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  off)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  ==  off)  {	  if(buffer!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
231	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  ==  offset)  {	  if(buffer!=    null    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
232	[BUG]  [BUGGY]  if(!closed  &&  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  &&  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  &&  buffer.length  <  length)  {	  if(!closed    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
233	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {	  if(!closed    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
234	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  <  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  <  offset)  {	  if(!closed    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
235	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
236	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
237	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
238	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
239	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
240	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  <  =  0)  {	  if(!closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
241	[BUG]  [BUGGY]  if(!closed  &&  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  &&  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  &&  buffer.length  <  0)  {	  if(!closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
242	[BUG]  [BUGGY]  if(!closed  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length!=  0)  {	  if(!closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
243	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  >=  0)  {	  if(!closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
244	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
245	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
246	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
247	[BUG]  [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
248	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
249	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
250	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    else    {    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
251	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    else    {    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
252	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    else    {    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
253	[BUG]  [BUGGY]  if(length  ==  buffer.length  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  buffer.length  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  buffer.length  ||  buffer.length  ==  offset)  {	  if(length    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
254	[BUG]  [BUGGY]  if(length  ==  buffer.length  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  buffer.length  ||  buffer.length!=  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  buffer.length  ||  buffer.length!=  offset)  {	  if(length    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
255	[BUG]  [BUGGY]  if(buffer.length  ==  offset  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  offset  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  offset  ||  buffer.length  ==  length)  {	  if(length    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
256	[BUG]  [BUGGY]  if(length  ==  buffer.length  ||  buffer.length  >=  offset)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  buffer.length  ||  buffer.length  >=  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  buffer.length  ||  buffer.length  >=  offset)  {	  if(length    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
257	[BUG]  [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
258	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
259	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  <  0  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  <  0  ||  buffer.length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
260	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
261	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
262	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >=  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
263	[BUG]  [BUGGY]  if(offset  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  length)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
264	[BUG]  [BUGGY]  if(length  <  =  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  offset)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
265	[BUG]  [BUGGY]  if(length  <  =  fileNameLen)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  fileNameLen)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  fileNameLen)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
266	[BUG]  [BUGGY]  if(length  <  =  this.closed)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  this.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  this.closed)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
267	[BUG]  [BUGGY]  if(length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  length)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
268	[BUG]  [BUGGY]  if(buffer.length  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ||  offset  ==  length)  {	  if(closed    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
269	[BUG]  [BUGGY]  if(length  ||  offset  ==  closed)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ||  offset  ==  closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ||  offset  ==  closed)  {	  if(closed    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
270	[BUG]  [BUGGY]  if(offset  ==  0  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0  ||  offset  ==  length)  {	  if(closed    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
271	[BUG]  [BUGGY]  if(length  ||  offset  ==  closed.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ||  offset  ==  closed.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ||  offset  ==  closed.length)  {	  if(closed    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
272	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  >=  0)  {	  if(current    ==    null    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
273	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  length  >=  0)  {	  if(current    ==    null    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
274	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  =  length)  {	  if(buffer    ==    null    ||    offset    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
275	[BUG]  [BUGGY]  if(offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
276	[BUG]  [BUGGY]  if(offset  ==  0  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0  ||  length  ==  buffer.length)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
277	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length  <  =  length)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
278	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length!=  length)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
279	[BUG]  [BUGGY]  if(current  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(hasUTF8Flag    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
280	[BUG]  [BUGGY]  if(hasUTF8Flag  &&  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasUTF8Flag  &&  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasUTF8Flag  &&  this.allowStoredEntriesWithDataDescriptor)  {	  if(hasUTF8Flag    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
281	[BUG]  [BUGGY]  if(current.hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(hasUTF8Flag    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
282	[BUG]  [BUGGY]  if(!hasUTF8Flag  &&  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!hasUTF8Flag  &&  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!hasUTF8Flag  &&  this.allowStoredEntriesWithDataDescriptor)  {	  if(hasUTF8Flag    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
283	[BUG]  [BUGGY]  if(isOpen()  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(hasUTF8Flag    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
284	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  buffer.length  >  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  buffer.length  >  offset)  {	  if(offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
285	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  <  0  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  <  0  ||  length  >  buffer.length)  {	  if(offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
286	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  length  >  buffer.length)  {	  if(offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
287	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  offset  >  length)  {	  if(offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
288	[BUG]  [BUGGY]  if(allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(allowStoredEntriesWithDataDescriptor)  {	  if(hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
289	[BUG]  [BUGGY]  if(hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasUTF8Flag)  {	  if(hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
290	[BUG]  [BUGGY]  if(hasUTF8Flag  ||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasUTF8Flag  ||  hasDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasUTF8Flag  ||  hasDataDescriptor)  {	  if(hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
291	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  <  length)  {	  if(buffer!=    null    ||    offset    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
292	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  offset)  {	  if(buffer    ==    null    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
293	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  <  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  <  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
294	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
295	[BUG]  [BUGGY]  if(offset  <  0  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  length  ==  0)  {	  if(offset    ==    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
296	[BUG]  [BUGGY]  if(offset  ==  0  ||  length  ==  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  length  ==  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0  ||  length  ==  0  ||  buffer.length!=  0)  {	  if(offset    ==    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
297	[BUG]  [BUGGY]  if(offset  ==  0  ||  length  ==  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  length  ==  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0  ||  length  ==  0  ||  buffer.length  ==  0)  {	  if(offset    ==    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
298	[BUG]  [BUGGY]  if(offset  <  0  ||  length  >  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  length  >  0)  {	  if(offset    ==    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
299	[BUG]  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
300	[BUG]  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
301	[BUG]  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
302	[BUG]  [BUGGY]  if(current!=  null  ||!current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current!=  null  ||!current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current!=  null  ||!current.allowStoredEntriesWithDataDescriptor)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
303	[BUG]  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
304	[BUG]  [BUGGY]  if(current  ||  allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
305	[BUG]  [BUGGY]  if(current  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  hasUTF8Flag)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
306	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
307	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag  &&  buffer.length  >  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
308	[BUG]  [BUGGY]  if(hasUTF8Flag  ||!this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasUTF8Flag  ||!this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasUTF8Flag  ||!this.allowStoredEntriesWithDataDescriptor)  {	  if(!this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
309	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {	  if(!this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
310	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length!=  0)  {	  if(closed    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
311	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0  ||  buffer.length!=  0)  {	  if(closed    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
312	[BUG]  [BUGGY]  if(offset  >=  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  >=  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  >=  0  ||  buffer.length!=  0)  {	  if(closed    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
313	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length!=  0  ||  buffer.length!=  0)  {	  if(closed    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
314	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  <  =  0)  {	  if(current    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
315	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  <  offset)  {	  if(closed    ||    buffer.length    <    offset)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
316	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  <  =  0)  {	  if(buffer    ==    null    ||    length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
317	[BUG]  [BUGGY]  if(!closed  ||  offset  ==  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  offset  ==  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  offset  ==  0  ||  buffer.length  ==  0)  {	  if(!closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
318	[BUG]  [BUGGY]  if(!closed  &&  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  &&  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  &&  buffer.length  ==  0)  {	  if(!closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
319	[BUG]  [BUGGY]  if(!closed  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  offset  ==  0)  {	  if(!closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
320	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  closed.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  closed.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  closed.length)  {	  if(buffer    ==    null    ||    closed.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
321	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset!=  closed.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset!=  closed.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset!=  closed.length)  {	  if(buffer    ==    null    ||    closed.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
322	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset!=  buffer.length)  {	  if(buffer    ==    null    ||    closed.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
323	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  len)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  len)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  len)  {	  if(buffer!=    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
324	[BUG]  [BUGGY]  if(current  ==  null  ||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  hasDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  hasDataDescriptor)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
325	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ==  null  ||  current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ==  null  ||  current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ==  null  ||  current.allowStoredEntriesWithDataDescriptor)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
326	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ==  null)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ==  null)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ==  null)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
327	[BUG]  [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
328	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
329	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ==  null  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
330	[BUG]  [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  buffer.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  getEntry(buffer,  offset,  length,  buffer.length);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
331	[BUG]  [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  getEntry(buffer,  offset,  length,  length);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
332	[BUG]  [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length  +  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  getEntry(buffer,  offset,  length  +  1);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
333	[BUG]  [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  fileNameLen);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  getEntry(buffer,  offset,  length,  fileNameLen);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
334	[BUG]  [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  size);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  getEntry(buffer,  offset,  length,  size);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
335	[BUG]  [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  inputStream);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length,  inputStream);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  getEntry(buffer,  offset,  length,  inputStream);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
336	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length  ==  offset)  {	  if(offset    ==    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
337	[BUG]  [BUGGY]  if(offset  ==  0  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0  ||  buffer.length  ==  offset)  {	  if(offset    ==    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
338	[BUG]  [BUGGY]  if(offset  <  0  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  buffer.length  ==  length)  {	  if(offset    ==    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
339	[BUG]  [BUGGY]  if(offset  ==  0  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0  ||  buffer.length!=  length)  {	  if(offset    ==    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
340	[BUG]  [BUGGY]  if(offset  ==  0  ||  buffer.length!=  offset)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  0  ||  buffer.length!=  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  0  ||  buffer.length!=  offset)  {	  if(offset    ==    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
341	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  offset  <  length)  {	  if(closed    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
342	[BUG]  [BUGGY]  if(buffer.length  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ||  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ||  offset  <  length)  {	  if(closed    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
343	[BUG]  [BUGGY]  if(length  ||  offset  <  closed)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ||  offset  <  closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ||  offset  <  closed)  {	  if(closed    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
344	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  buffer.length);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
345	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  size);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  size);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
346	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  +  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  +  1);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
347	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  fileNameLen);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
348	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  inputStream);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  inputStream);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  inputStream);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
349	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  1);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
350	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  offset  ||  length  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  offset  ||  length  <  =  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  offset  ||  length  <  =  buffer.length)  {	  if(buffer    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
351	[BUG]  [BUGGY]  if(!current.closed)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.closed)  {	  if(!this.closed)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
352	[BUG]  [BUGGY]  if(!this.closed  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.closed  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.closed  ||  buffer.length  ==  length)  {	  if(!this.closed)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
353	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  buffer.length  >  length)  {	  if(length    <    0    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
354	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {	  if(length    <    0    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
355	[BUG]  [BUGGY]  if(offset  <  0  ||  length  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  length  <  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  length  <  buffer.length)  {	  if(length    <    0    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
356	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  buffer.length);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
357	[BUG]  [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.in.read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  current.in.read(buffer,  offset,  length);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
358	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  0);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
359	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length  -  1);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
360	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.fileNameLen);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.fileNameLen);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.fileNameLen);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
361	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  fileNameLen);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
362	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  CFH_LEN);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
363	[BUG]  [BUGGY]  if(current!=  null  ||  current.closed)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current!=  null  ||  current.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current!=  null  ||  current.closed)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
364	[BUG]  [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
365	[BUG]  [BUGGY]  if(current.closed  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.closed  ||  offset  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.closed  ||  offset  >  length)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
366	[BUG]  [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
367	[BUG]  [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  this.allowStoredEntriesWithDataDescriptor  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  this.allowStoredEntriesWithDataDescriptor  >  buffer.length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
368	[BUG]  [BUGGY]  if(current  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  buffer.length  >  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
369	[BUG]  [BUGGY]  if(length  >  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
370	[BUG]  [BUGGY]  if(current  ||  allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ||  allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ||  allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
371	[BUG]  [BUGGY]  if(buffer.length  <  =  this.closed  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  =  this.closed  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  =  this.closed  ||  buffer.length  <  =  length)  {	  if(this.closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
372	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  this.closed)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  this.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  this.closed)  {	  if(this.closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
373	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  ||  buffer.length  <  =  length)  {	  if(this.closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
374	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  this.closed)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  this.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  <  =  this.closed)  {	  if(this.closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
375	[BUG]  [BUGGY]  read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  buffer.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  buffer.length);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
376	[BUG]  [BUGGY]  read(buffer,  offset,  length,  0);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  0);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  0);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
377	[BUG]  [BUGGY]  read(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  fileNameLen);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  fileNameLen);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
378	[BUG]  [BUGGY]  read(buffer,  offset,  length,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  CFH_LEN);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  CFH_LEN);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
379	[BUG]  [BUGGY]  read(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  size);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  size);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
380	[BUG]  [BUGGY]  read(buffer,  offset,  length,  inputStream);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  inputStream);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  inputStream);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
381	[BUG]  [BUGGY]  read(buffer,  offset,  length,  CFH_BUF);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  CFH_BUF);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  CFH_BUF);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
382	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
383	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  buffer.length  <  0  ||  offset  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
384	[BUG]  [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  offset  <  0  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  offset  <  0  ||  length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
385	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length  ==  0)  {	  if(buffer    ==    null    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
386	[BUG]  [BUGGY]  if(!closed  &&  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  &&  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  &&  buffer.length  <  =  length)  {	  if(!closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
387	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  <  =  offset  ||  length  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  <  =  offset  ||  length  <  =  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  <  =  offset  ||  length  <  =  buffer.length)  {	  if(!closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
388	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  <  =  offset  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  <  =  offset  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  <  =  offset  ||  length  >  buffer.length)  {	  if(!closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
389	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length!=  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
390	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  ==  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  ==  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  ==  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
391	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
392	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
393	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  offset  ==  length)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
394	[BUG]  [BUGGY]  if(offset  ==  offset  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  offset  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  offset  ||  length  ==  buffer.length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
395	[BUG]  [BUGGY]  if(length  ||  offset  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ||  offset  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ||  offset  ==  buffer.length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
396	[BUG]  [BUGGY]  if(offset  ==  length  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  ==  length  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  ==  length  ||  buffer.length  ==  length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
397	[BUG]  [BUGGY]  if(buffered  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffered  ||  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffered  ||  offset  <  length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
398	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  off)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  off)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  off)  {	  if(buffer    ==    null    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
399	[BUG]  [BUGGY]  if(hasDataDescriptor  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasDataDescriptor  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasDataDescriptor  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
400	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  >=  0)  {	  if(buffer!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
401	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length  >  0)  {	  if(offset    ==    0    ||    length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
402	[BUG]  [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  this.closed  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  this.closed  ||  buffer.length  <  =  length)  {	  if(this.closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
403	[BUG]  [BUGGY]  if(inputStream  ==  null)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(inputStream  ==  null)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(inputStream  ==  null)  {	  if(current!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
404	[BUG]  [BUGGY]  Inflater  inf  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getOutputStream();  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getOutputStream();	  Inflater    inf    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
405	[BUG]  [BUGGY]  if(isOpen()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
406	[BUG]  [BUGGY]  if(isOpen()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
407	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >  buffer.length)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
408	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  0  ||  buffer.length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
409	[BUG]  [BUGGY]  if(!closed  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  offset  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  offset  <  0)  {	  if(!closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
410	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  buffer.length  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  buffer.length  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  buffer.length  ||  buffer.length  ==  length)  {	  if(length    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
411	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  0  ||  buffer.length  ==  length)  {	  if(offset    ==    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
412	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >  length)  {	  if(buffer!=    null    ||    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
413	[BUG]  [BUGGY]  if(buffer  ==  null  ||  closed.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  closed.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  closed.length!=  0)  {	  if(closed    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
414	[BUG]  [BUGGY]  if(closed  ||  offset!=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(closed  ||  offset!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(closed  ||  offset!=  0)  {	  if(closed    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
415	[BUG]  [BUGGY]  if(closed  ||  offset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(closed  ||  offset  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(closed  ||  offset  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
416	[BUG]  [BUGGY]  if(hasDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasDataDescriptor  ||  hasUTF8Flag)  {	  if(hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
417	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  InputStream  inf  =  getInputStream();  current.read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	InputStream  inf  =  getInputStream();  current.read(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
418	[BUG]  [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current!=  null)  {  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length);  }	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
419	[BUG]  [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current!=  null)  {  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current!=  null)  {  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
420	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length  -  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  getInputStream();  current.read(buffer,  offset,  length  -  1);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
421	[BUG]  [BUGGY]  if(current  ==  null  ||  current.closed)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  current.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  current.closed)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
422	[BUG]  [BUGGY]  if(current.closed  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.closed  ||  offset  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.closed  ||  offset  >  buffer.length)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
423	[BUG]  [BUGGY]  if(current!=  null  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current!=  null  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current!=  null  ||  buffer.length  ==  0)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
424	[BUG]  [BUGGY]  if(buffer  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  <  =  length)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
425	[BUG]  [BUGGY]  if(offset  <  =  closed)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  closed)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
426	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  <  =  closed)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  <  =  closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  <  =  closed)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
427	[BUG]  [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
428	[BUG]  [BUGGY]  if(current  ==  null  ||  hasDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  hasDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  hasDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
429	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
430	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length  >  0)  {	  if(length    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
431	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  offset)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  <  =  offset)  {	  if(buffer!=    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
432	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  off)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  off)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  off)  {	  if(buffer    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
433	[BUG]  [BUGGY]  if(buffer  ||  offset  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ||  offset  <  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ||  offset  <  buffer.length)  {	  if(closed    ||    buffer.length    <    offset)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
434	[BUG]  [BUGGY]  if(buffer  ||  off  <  offset)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ||  off  <  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ||  off  <  offset)  {	  if(closed    ||    buffer.length    <    offset)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
435	[BUG]  [BUGGY]  if(buffer  ||  off  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ||  off  <  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ||  off  <  buffer.length)  {	  if(closed    ||    buffer.length    <    offset)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
436	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  buffer.length  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  buffer.length  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  =  buffer.length  ||  buffer.length  <  =  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
437	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  <  =  buffer.length  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  <  =  buffer.length  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  <  =  buffer.length  ||  buffer.length  <  =  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
438	[BUG]  [BUGGY]  if(buffer  <  =  offset  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  <  =  offset  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  <  =  offset  ||  buffer.length  <  =  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
439	[BUG]  [BUGGY]  if(offset  <  =  buffer.length  &&  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  =  buffer.length  &&  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  =  buffer.length  &&  buffer.length  <  =  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
440	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0  ||  buffer.length  >  length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
441	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >=  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  >=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0  ||  buffer.length  >=  length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
442	[BUG]  [BUGGY]  if(buffer  ==  offset  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  offset  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  offset  ||  offset  ==  length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
443	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  +  length  >  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
444	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  offset  >=  current.length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
445	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  buffer.length  <  =  0)  {	  if(current    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
446	[BUG]  [BUGGY]  if(buffered  ==  null  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffered  ==  null  ||  offset  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffered  ==  null  ||  offset  <  0)  {	  if(current    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
447	[BUG]  [BUGGY]  if(this.closed  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.closed  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.closed  ||  buffer.length!=  0)  {	  if(this.closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
448	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  closed.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  closed.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  closed.length  ==  0)  {	  if(buffer    ==    null    ||    closed.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
449	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  +  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  +  length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  +  length  ==  0)  {	  if(buffer    ==    null    ||    closed.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
450	[BUG]  [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length  -  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  getEntry(buffer,  offset,  length  -  1);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
451	[BUG]  [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length-offset);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  getEntry(buffer,  offset,  length-offset);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  getEntry(buffer,  offset,  length-offset);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
452	[BUG]  [BUGGY]  byte[]  current  =  entryEncoding.getEntry(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  current  =  entryEncoding.getEntry(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  current  =  entryEncoding.getEntry(buffer,  offset,  length);	  byte[]    current    =    getEntry(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
453	[BUG]  [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {	  if(!allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
454	[BUG]  [BUGGY]  if(this.closed  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.closed  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.closed  ||  buffer.length  >  length)  {	  if(this.closed    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
455	[BUG]  [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    else    {    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
456	[BUG]  [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    else    {    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
457	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  >=  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  >=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  >=  length)  {	  if(!closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
458	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  <  =  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  <  =  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  <  =  offset)  {	  if(!closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
459	[BUG]  [BUGGY]  if(buffer  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ||  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ||  offset  <  length)  {	  if(closed    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
460	[BUG]  [BUGGY]  if(buffer  ==  null  ||!closed  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!closed  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||!closed  ||  buffer.length  ==  length)  {	  if(!closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
461	[BUG]  [BUGGY]  if(buffer  ==  null  ||!closed  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!closed  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||!closed  ||  offset  ==  length)  {	  if(!closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
462	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
463	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
464	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  buffer.length  <  offset  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
465	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer    ==    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
466	[BUG]  [BUGGY]  if(length!=  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0  ||  buffer.length!=  0)  {	  if(!closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
467	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  =  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
468	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >  0  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
469	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  offset  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  offset  <  0)  {	  if(offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
470	[BUG]  [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
471	[BUG]  [BUGGY]  if(hasDataDescriptor  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasDataDescriptor  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasDataDescriptor  ||  buffer.length  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
472	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
473	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  <  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
474	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  buffer.length  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  buffer.length  ||  length!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  buffer.length  ||  length!=  buffer.length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
475	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  >=  buffer.length  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  >=  buffer.length  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  >=  buffer.length  ||  buffer.length!=  length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
476	[BUG]  [BUGGY]  if(buffer!=  null  ||  offset  >=  buffer.length  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  offset  >=  buffer.length  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  offset  >=  buffer.length  ||  buffer.length!=  length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
477	[BUG]  [BUGGY]  if(buffer!=  offset  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  offset  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  offset  ||  buffer.length!=  length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
478	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  buffer.length  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  buffer.length  ||  buffer.length  >  length)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
479	[BUG]  [BUGGY]  if(buffer  ==  offset  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  offset  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  offset  ||  buffer.length  ==  length)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
480	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
481	[BUG]  [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
482	[BUG]  [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
483	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  buffer.length  <  =  0  ||  length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
484	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  buffer.length  >  current.length)  {	  if(current    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
485	[BUG]  [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
486	[BUG]  [BUGGY]  if(!current  &&  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current  &&  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current  &&  buffer.length  >  0)  {	  if(!current)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
487	[BUG]  [BUGGY]  if(!current  ||  buffer.length  <  0  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current  ||  buffer.length  <  0  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current  ||  buffer.length  <  0  ||  buffer.length  >  0)  {	  if(!current)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
488	[BUG]  [BUGGY]  if(!current  ||  buffer.length  <  0  ||  buffer.length  +  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current  ||  buffer.length  <  0  ||  buffer.length  +  offset  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current  ||  buffer.length  <  0  ||  buffer.length  +  offset  >  length)  {	  if(!current)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
489	[BUG]  [BUGGY]  if(!current  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current  ||  buffer.length  <  =  length)  {	  if(!current)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
490	[BUG]  [BUGGY]  if(!hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!hasDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!hasDataDescriptor)  {	  if(!this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
491	[BUG]  [BUGGY]  if(hasDataDescriptor  ||!this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasDataDescriptor  ||!this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasDataDescriptor  ||!this.allowStoredEntriesWithDataDescriptor)  {	  if(!this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
492	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {	  if(!this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
493	[BUG]  [BUGGY]  if(offset  >  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  >  0)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
494	[BUG]  [BUGGY]  if(length  >  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0  ||  buffer.length  <  0)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
495	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  len)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length!=  len)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length!=  len)  {	  if(buffer!=    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
496	[BUG]  [BUGGY]  if(buffered  ==  null  ||  offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffered  ==  null  ||  offset  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffered  ==  null  ||  offset  ==  0)  {	  if(current    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
497	[BUG]  [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
498	[BUG]  [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
499	[BUG]  [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
500	[BUG]  [BUGGY]  if(buffer  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ||  offset  ==  length)  {	  if(closed    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
501	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  -  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  -  1);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
502	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  -  offset);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length  -  offset);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
503	[BUG]  [BUGGY]  if(buffered  ==  null  ||  offset!=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffered  ==  null  ||  offset!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffered  ==  null  ||  offset!=  0)  {	  if(current    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
504	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length  +  1);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
505	[BUG]  [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  hasUTF8Flag)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
506	[BUG]  [BUGGY]  if(current  ==  null  ||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  hasUTF8Flag)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
507	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
508	[BUG]  [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
509	[BUG]  [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
510	[BUG]  [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length!=  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
511	[BUG]  [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
512	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
513	[BUG]  [BUGGY]  if(current  ==  null  ||!current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||!current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||!current.allowStoredEntriesWithDataDescriptor)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
514	[BUG]  [BUGGY]  if(hasDataDescriptor  ||!current.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasDataDescriptor  ||!current.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasDataDescriptor  ||!current.allowStoredEntriesWithDataDescriptor)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
515	[BUG]  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.allowStoredEntriesWithDataDescriptor  &&  hasUTF8Flag)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
516	[BUG]  [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  return  0;  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
517	[BUG]  [BUGGY]  if(this.closed  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.closed  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.closed  ||  buffer.length  ==  offset)  {	  if(this.closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
518	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  ||  offset  ==  length)  {	  if(this.closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
519	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length!=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  0  ||  length!=  0)  {	  if(buffer    ==    null    ||    length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
520	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  ==  length)  {	  if(current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
521	[BUG]  [BUGGY]  if(current!=  null  ||  hasDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current!=  null  ||  hasDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current!=  null  ||  hasDataDescriptor)  {	  if(current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
522	[BUG]  [BUGGY]  if(!this.closed  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.closed  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.closed  ||  buffer.length  ==  0)  {	  if(!this.closed)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
523	[BUG]  [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
524	[BUG]  [BUGGY]  if(hasDataDescriptor  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasDataDescriptor  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasDataDescriptor  ||  buffer.length  >  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
525	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  offset)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  >  offset)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
526	[BUG]  [BUGGY]  if(current  ==  null  ||  buffer.length  >  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  buffer.length  >  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  buffer.length  >  this.allowStoredEntriesWithDataDescriptor)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
527	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  &&  buffer.length  >  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    buffer.length    >    length)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
528	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  =  buffer.length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
529	[BUG]  [BUGGY]  if(current  ==  null  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(hasUTF8Flag    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
530	[BUG]  [BUGGY]  if(open  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(open  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(open  ||  hasUTF8Flag  ||  this.allowStoredEntriesWithDataDescriptor)  {	  if(hasUTF8Flag    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
531	[BUG]  [BUGGY]  if(buffer  ==  null  ||!closed  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!closed  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||!closed  ||  buffer.length  ==  0)  {	  if(!closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
532	[BUG]  [BUGGY]  read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length  -  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length  -  1);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
533	[BUG]  [BUGGY]  readFully(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  readFully(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	readFully(buffer,  offset,  length);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
534	[BUG]  [BUGGY]  read(buffer,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length  -  offset);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length  -  offset);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
535	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length  -  offset);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length  -  offset);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length  -  offset);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
536	[BUG]  [BUGGY]  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.read(buffer,  offset,  length);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
537	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length  +  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length  +  1);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
538	[BUG]  [BUGGY]  in.write(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.write(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.write(buffer,  offset,  length);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
539	[BUG]  [BUGGY]  if(hasUTF8Flag  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasUTF8Flag  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasUTF8Flag  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(!hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
540	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length  +  1);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
541	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  zipEncoding);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
542	[BUG]  [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  ze);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  ze);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  entryEncoding.encode(buffer,  offset,  length,  ze);	  Inflater    inf    =    entryEncoding.encode(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
543	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  >  length)  {	  if(!closed    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
544	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  ==  closure.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  ==  closure.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  ==  closure.length)  {	  if(buffer    ==    null    ||    closed.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
545	[BUG]  [BUGGY]  if(buffer  <  0  ||  offset  <  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  <  0  ||  offset  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  <  0  ||  offset  <  0)  {	  if(length    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
546	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
547	[BUG]  [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
548	[BUG]  [BUGGY]  if(closed  ||  buffer.length  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(closed  ||  buffer.length  ==  offset)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(closed  ||  buffer.length  ==  offset)  {	  if(closed    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
549	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  <  0)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  length  <  0)  {	  if(buffer    ==    null    ||    offset    <    0    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
550	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    hasUTF8Flag)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
551	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  closed)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  offset  ||  length  >  closed)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
552	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  length  ||  length  >  buffer.length)  {	  if(closed    ||    buffer.length    <    offset    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
553	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    else    {    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
554	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  length);  }  else  {  System.arraycopy(buffer,  offset,  buffer,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    else    {    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
555	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length!=  buffer.length)  {	  if(buffer!=    null    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
556	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer    ==    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
557	[BUG]  [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer    ==    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
558	[BUG]  [BUGGY]  if(!closed  ||  buffer.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!closed  ||  buffer.length  >  0)  {	  if(!closed    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
559	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    offset,    length);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
560	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.allowStoredEntriesWithDataDescriptor  ||  offset  <  length)  {	  if(current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
561	[BUG]  [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  0  ||  buffer.length  >  length)  {	  if(current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
562	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  buffer.length  ||  length  <  =  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  buffer.length  ||  length  <  =  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  =  buffer.length  ||  length  <  =  buffer.length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
563	[BUG]  [BUGGY]  if(offset  <  length  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  length  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  length  ||  buffer.length  <  =  length)  {	  if(offset    <    =    buffer.length    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
564	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  ||  length  ==  buffer.length)  {	  if(this.closed    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
565	[BUG]  [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length!=  length)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
566	[BUG]  [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||  this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  =  length)  {	  if(current    ==    null    ||    this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
567	[BUG]  [BUGGY]  if(isOpen()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isDirectory())  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isDirectory())  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
568	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_TOP))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
569	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_TARGET))  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_TARGET))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_TARGET))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
570	[BUG]  [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(isOpen()  ||  isEnabled(Feature.AUTO_CLOSE_CLOSED))  {	  if(isOpen())    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
571	[BUG]  [BUGGY]  if(buffer!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
572	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  0  ||  length  >=  0)  {	  if(current    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
573	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  0  ||  buffer.length!=  0)  {	  if(current    ==    null    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
574	[BUG]  [BUGGY]  if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  &&(buffer.length))  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  &&(buffer.length))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  &&(buffer.length))  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
575	[BUG]  [BUGGY]  if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
576	[BUG]  [BUGGY]  if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  if(buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  if(buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  if(buffer.length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
577	[BUG]  [BUGGY]  if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
578	[BUG]  [BUGGY]  if(buffer.length  >=  offset  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  >=  offset  ||  length!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  >=  offset  ||  length!=  buffer.length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
579	[BUG]  [BUGGY]  if(buffer.length!=  offset  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length!=  offset  ||  length!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length!=  offset  ||  length!=  buffer.length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
580	[BUG]  [BUGGY]  if(buffer!=  offset  ||  length!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  offset  ||  length!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  offset  ||  length!=  buffer.length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
581	[BUG]  [BUGGY]  if(offset  <  buffer.length  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  buffer.length  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  buffer.length  ||  buffer.length!=  length)  {	  if(offset    >=    buffer.length    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
582	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  0  ||  length  >  buffer.length)  {	  if(current    ==    null    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
583	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  0  ||  buffer.length  >=  0)  {	  if(current    ==    null    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
584	[BUG]  [BUGGY]  if(buffer  ==  null  ||  closed.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  closed.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  closed.length  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
585	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  =  0)  {	  if(closed    ||    buffer.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
586	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  ==  buffer.length)  {	  if(length    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
587	[BUG]  [BUGGY]  if(length  <  buffer.length  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  buffer.length  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  buffer.length  ||  buffer.length  ==  length)  {	  if(length    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
588	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  offset  <  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  offset  <  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  offset  <  buffer.length)  {	  if(offset    <    0    ||    buffer.length    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
589	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  <  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  buffer.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  0  ||  buffer.length  <  0)  {	  if(current    ==    null    ||    buffer.length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
590	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
591	[BUG]  [BUGGY]  Inflater  current  =  getInputStream();  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  current  =  getInputStream();  current.read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  current  =  getInputStream();  current.read(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
592	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.getInputStream();  current.read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  current.getInputStream();  current.read(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
593	[BUG]  [BUGGY]  Inflater  inf  =  current.read();  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.read();  current.read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  current.read();  current.read(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
594	[BUG]  [BUGGY]  Inflater  inf  =  current.readIn();  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  current.readIn();  current.read(buffer,  offset,  length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  current.readIn();  current.read(buffer,  offset,  length);	  Inflater    inf    =    getInputStream();    current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
595	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  this.closed  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  this.closed  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  0  ||  this.closed  ||  buffer.length  ==  0)  {	  if(this.closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
596	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  this.closed)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  this.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  0  ||  this.closed)  {	  if(this.closed    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
597	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  <  0  ||  length  >  buffer.length)  {	  if(buffer!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
598	[BUG]  [BUGGY]  if(buffer  ==  offset  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  offset  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  offset  ||  length  ==  buffer.length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
599	[BUG]  [BUGGY]  if(length  ==  offset  ||  buffer.length  ==  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  offset  ||  buffer.length  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  offset  ||  buffer.length  ==  length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
600	[BUG]  [BUGGY]  if(buffer.length  ==  offset  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  offset  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  offset  ||  offset  ==  length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
601	[BUG]  [BUGGY]  if(buffer  ==  buffer  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  buffer  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  buffer  ||  offset  ==  length)  {	  if(buffered    ||    offset    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
602	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  offset  ==  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  offset  ==  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  0  ||  offset  ==  length)  {	  if(offset    ==    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
603	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  ==  off)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length  ==  off)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length  ==  off)  {	  if(offset    ==    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
604	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  2)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  2)  {	  if(buffer    ==    null    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
605	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  offset  >  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  0  ||  offset  >  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  0  ||  offset  >  buffer.length)  {	  if(offset    <    0    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
606	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  offset  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  0  ||  offset  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  0  ||  offset  ==  buffer.length)  {	  if(offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
607	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  buffer.length  ==  0)  {	  if(offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
608	[BUG]  [BUGGY]  in.defaultRead(buffer,  offset,  length  -  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  in.defaultRead(buffer,  offset,  length  -  buffer.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	in.defaultRead(buffer,  offset,  length  -  buffer.length);	  in.defaultRead(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
609	[BUG]  [BUGGY]  read(buffer,  offset,  length,  true);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  true);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  true);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
610	[BUG]  [BUGGY]  read(buffer,  offset,  length,  this.inputStream);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  read(buffer,  offset,  length,  this.inputStream);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	read(buffer,  offset,  length,  this.inputStream);	  read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
611	[BUG]  [BUGGY]  if(current  ==  null  ||!this.allowStoredEntriesWithDataDescriptor)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current  ==  null  ||!this.allowStoredEntriesWithDataDescriptor)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current  ==  null  ||!this.allowStoredEntriesWithDataDescriptor)  {	  if(!this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
612	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {	  if(!this.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
613	[BUG]  [BUGGY]  if(length  <  0  ||  offset  <  length)  {  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  offset  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  offset  <  length)  {	  if(closed    ||    offset    <    length)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
614	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed!=  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed!=  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed!=  buffer.length)  {	  if(this.closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
615	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed!=  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed!=  length)  {	  if(this.closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
616	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  >>  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  >>  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  >>  buffer.length)  {	  if(this.closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
617	[BUG]  [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
618	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  offset,  buffer,  0,  length);  System.arraycopy(buffer,  offset,  length);  return  0;  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    0,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
619	[BUG]  [BUGGY]  if(offset  <  0  ||  closed.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(offset  <  0  ||  closed.length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(offset  <  0  ||  closed.length  <  0)  {	  if(closed    ||    offset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
620	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  buffer.length  >=  length)  {	  if(buffer!=    null    ||    offset    >=    length)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
621	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffered  ==  null  ||  buffer.length  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffered  ==  null  ||  buffer.length  <  =  length)  {	  if(current    ==    null    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
622	[BUG]  [BUGGY]  if(buffer  ==  null  ||!closed  ||  buffer.length!=  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||!closed  ||  buffer.length!=  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||!closed  ||  buffer.length!=  length)  {	  if(!closed    ||    buffer.length!=    length)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
623	[BUG]  [BUGGY]  if(buffer!=  null  ||  closed.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  closed.length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null  ||  closed.length!=  0)  {	  if(closed    ||    buffer.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
624	[BUG]  [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	Inflater  inf  =  this.in.read(buffer,  offset,  length,  this.length);	  Inflater    inf    =    this.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
625	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  0  ||  buffer.length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  0  ||  buffer.length  >  current.length)  {	  if(offset    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
626	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  current.length);  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	byte[]  buffer  =(byte[])current.read(buffer,  offset,  length,  current.length);	  byte[]    buffer    =(byte[])current.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
627	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  length)  {	  if(buffer    ==    null    ||    offset    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
628	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||  length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||  length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
629	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  length  ||  buffer.length  ==  0)  {	  if(buffer    ==    null    ||    offset    ==    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
630	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  ==  0  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  ==  0  ||  buffer.length  >  length)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
631	[BUG]  [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUTF8Flag)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(this.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUTF8Flag)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(this.allowStoredEntriesWithDataDescriptor  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUTF8Flag)  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
632	[BUG]  [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!this.allowStoredEntriesWithDataDescriptor  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!this.allowStoredEntriesWithDataDescriptor  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(this.allowStoredEntriesWithDataDescriptor    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
633	[BUG]  [BUGGY]  if(buffer  ==  null  ||  this.closed  <  =  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  this.closed  <  =  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  this.closed  <  =  length)  {	  if(this.closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
634	[BUG]  [BUGGY]  if(buffer.length  <  =  this.closed)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  <  =  this.closed)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  <  =  this.closed)  {	  if(this.closed    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
635	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length!=  0)  {  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0  ||  length!=  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  offset  <  0  ||  length!=  0)  {	  if(buffer    ==    null    ||    length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
636	[BUG]  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.allowStoredEntriesWithDataDescriptor  ||  buffer.length  <  length)  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
637	[BUG]  [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor(buffer,  offset,  length))  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(!current.allowStoredEntriesWithDataDescriptor(buffer,  offset,  length))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(!current.allowStoredEntriesWithDataDescriptor(buffer,  offset,  length))  {	  if(!current.allowStoredEntriesWithDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
638	[BUG]  [BUGGY]  if(buffer.length  ==  offset  ||  length  ==  buffer.length)  {  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer.length  ==  offset  ||  length  ==  buffer.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer.length  ==  offset  ||  length  ==  buffer.length)  {	  if(offset    ==    buffer.length    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
639	[BUG]  [BUGGY]  if(hasDataDescriptor  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(hasDataDescriptor  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(hasDataDescriptor  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(hasDataDescriptor)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
640	[BUG]  [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
641	[BUG]  [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
642	[BUG]  [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
643	[BUG]  [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(current.closed  ||  offset  >  buffer.length  ||  length  <  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length  ||  length  >  current.length)  {	  if(current.closed)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
644	[BUG]  [BUGGY]  if(buffer!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer!=  null)  {  System.arraycopy(buffer,  offset,  buffer,  length);  System.arraycopy(buffer,  offset,  length);  }	  if(buffer!=    null)    {    System.arraycopy(buffer,    offset,    buffer,    length);    System.arraycopy(buffer,    offset,    buffer,    length);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
645	[BUG]  [BUGGY]  if(length  <  =  off)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  <  =  off)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  <  =  off)  {	  if(length    <    =    closed)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
646	[BUG]  [BUGGY]  if(length  >  0  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(length  >  0  ||  buffer.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(length  >  0  ||  buffer.length  >  length)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
647	[BUG]  [BUGGY]  if(buffer  ==  null  ||  length  >  0)  {  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  length  >  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  length  >  0)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
648	[BUG]  [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length  <  0)  {  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  off  <  0  ||  length  <  0)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  off  <  0  ||  length  <  0)  {	  if(buffer    ==    null    ||    length    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
649	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  current.length  >  length)  {  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      public  int  read(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0  ||  current.length  >  length)  {  [BUGGY]      throw  new  IOException(     "The  stream  is  closed     ");  }  if  (current  ==  null)  {  return  -1;  }  if  (offset  >  buffer.length  ||  length  <  0  ||  offset  <  0  ||  buffer.length  -  offset  <  length)  {  throw  new  ArrayIndexOutOfBoundsException();  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  length  off  offset  read  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	360	360	1	replace	if(buffer  ==  null  ||  buffer.length  <  0  ||  current.length  >  length)  {	  if(buffer    ==    null    ||    buffer.length    <    0    ||    length    >    current.length)    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
