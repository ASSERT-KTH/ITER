bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  [CE]  variable  toRead  is  already  defined  in  method  readStored(byte[],int,int)  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    int  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  variable  toRead  is  already  defined  in  method  readStored(byte[],int,int)	2	None	add
2	[BUG]  [BUGGY]  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	add	toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);	  	compilable	  [FE]  IndexOutOfBoundsException  	2	1	add
3	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [FE]  IndexOutOfBoundsException  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);	  	compilable	  [FE]  IndexOutOfBoundsException  	2	1	add
4	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);  [CE]  variable  toRead  is  already  defined  in  method  readStored(byte[],int,int)  [FE]        IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    Integer  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  variable  toRead  is  already  defined  in  method  readStored(byte[],int,int)	2	None	add
5	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  csize);  [CE]  cannot  find  symbol  l  [FE]          IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    l  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  cannot  find  symbol  l	2	None	add
6	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]            IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	add	toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);	  	compilable	  [FE]  arrays  first  differed  	2	1	add
7	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [FE]  arrays  first  differed  [FE]            IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);	  	compilable	  [FE]  arrays  first  differed  	2	1	add
8	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  [CE]  cannot  find  symbol  ToRead  [FE]              IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    ToRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  cannot  find  symbol  ToRead	2	None	add
9	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  cannot  find  symbol  max  [FE]                IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  cannot  find  symbol  max	2	None	add
10	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                  IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  not  a  statement	2	None	add
11	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  toRead  =(int)(current.bytesRead  *  csize);  [CE]  cannot  find  symbol  ToRead  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    toRead  =(int)(current.bytesRead  *  csize);	  timeout    	non-compiled	[CE]  cannot  find  symbol  ToRead	6	None	add
12	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)(current.bytesRead  *  csize);  [CE]  variable  toRead  is  already  defined  in  method  readStored(byte[],int,int)  [FE]                arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    int  toRead  =(int)(current.bytesRead  *  csize);	  timeout    	non-compiled	[CE]  variable  toRead  is  already  defined  in  method  readStored(byte[],int,int)	6	None	add
13	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  cannot  find  symbol  ToRead  [FE]                  arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  ToRead	6	None	add
14	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  cannot  find  symbol  ToRead  [FE]                    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  ToRead	6	None	add
15	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  cannot  find  symbol  ToRead  [FE]                      arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    ToRead  =(int)(current.bytesRead  *  csize);	  timeout    	non-compiled	[CE]  cannot  find  symbol  ToRead	6	None	add
16	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  cannot  find  symbol  ToRead  [FE]                        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  ToRead	6	None	add
17	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  l  =(int)(current.bytesRead  *  csize);  [CE]  cannot  find  symbol  l  [FE]                          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  l  =(int)(current.bytesRead  *  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    l  =(int)(current.bytesRead  *  csize);	  timeout    	non-compiled	[CE]  cannot  find  symbol  l	6	None	add
18	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  cannot  find  symbol  l  [FE]                            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  l	6	None	add
19	[BUG]  [BUGGY]      current.bytesRead  =  csize  -  current.bytesRead;  [CE]  cannot  find  symbol  l  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      current.bytesRead  =  csize  -  current.bytesRead;  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        current.bytesRead  =  csize  -  current.bytesRead;	  	non-compiled	[CE]  cannot  find  symbol  l	10	None	add
20	[BUG]  [BUGGY]      ||(csize  -  current.bytesRead)  <  toRead)  {  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      ||(csize  -  current.bytesRead)  <  toRead)  {  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        ||(csize  -  current.bytesRead)  <  toRead)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
21	[BUG]  [BUGGY]      ||(csize  -  current.bytesRead)  <  =  0);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      ||(csize  -  current.bytesRead)  <  =  0);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        ||(csize  -  current.bytesRead)  <  =  0);	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
22	[BUG]  [BUGGY]      ||(csize  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      ||(csize  -  current.bytesRead)  <  =  0)  {  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        ||(csize  -  current.bytesRead)  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
23	[BUG]  [BUGGY]      current.bytesRead  +=  csize;  [CE]  cannot  find  symbol  l  [FE]            java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      current.bytesRead  +=  csize;  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        current.bytesRead  +=  csize;	  	non-compiled	[CE]  cannot  find  symbol  l	10	None	add
24	[BUG]  [BUGGY]      if(csize  >  max)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  cannot  find  symbol  max  [FE]              java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      if(csize  >  max)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        if(csize  >  max)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	  	non-compiled	[CE]  cannot  find  symbol  max	10	None	add
25	[BUG]  [BUGGY]      if(csize  >  max)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  cannot  find  symbol  max  [FE]                java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      if(csize  >  max)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        if(csize  >  max)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	  	non-compiled	[CE]  cannot  find  symbol  max	10	None	add
26	[BUG]  [BUGGY]      ||(csize  -  current.bytesRead)  <  toRead)  {  break;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      ||(csize  -  current.bytesRead)  <  toRead)  {  break;  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        ||(csize  -  current.bytesRead)  <  toRead)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
27	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  length);  [CE]  cannot  find  symbol  l  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  length);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  length);	  toRead    =(int)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  cannot  find  symbol  l	12	None	replace
28	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  offset);  [CE]  cannot  find  symbol  l  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  offset);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  offset);	  toRead    =(int)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  cannot  find  symbol  l	12	None	replace
29	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length);  [CE]  cannot  find  symbol  l  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  buffer.length);	  toRead    =(int)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  cannot  find  symbol  l	12	None	replace
30	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  width);  [CE]  cannot  find  symbol  width  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  width);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  width);	  toRead    =(int)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  cannot  find  symbol  width	12	None	replace
31	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  cannot  find  symbol  l  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  timeout    	non-compiled	[CE]  cannot  find  symbol  l	15	None	add
32	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  variable  toRead  is  already  defined  in  method  readStored(byte[],int,int)  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  timeout    	non-compiled	[CE]  variable  toRead  is  already  defined  in  method  readStored(byte[],int,int)	15	None	add
33	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  cannot  find  symbol  ToRead  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  timeout    	non-compiled	[CE]  cannot  find  symbol  ToRead	15	None	add
34	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  cannot  find  symbol  ToRead  [FE]                arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  ToRead	15	None	add
35	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  cannot  find  symbol  l  [FE]                  arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  l	15	None	add
36	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  cannot  find  symbol  l  [FE]                    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  timeout    	non-compiled	[CE]  cannot  find  symbol  l	15	None	add
37	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  cannot  find  symbol  read  [FE]                      arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  timeout    	non-compiled	[CE]  cannot  find  symbol  read	15	None	add
38	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead  *  csize  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	15	None	add
39	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  +  1);  [CE]  cannot  find  symbol  l  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize  +  1);	  toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  cannot  find  symbol  l	3	None	replace
40	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  length);  [CE]  ')'  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  length);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  length);	  toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  ')'  expected	3	None	replace
41	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  [CE]  cannot  find  symbol  l  [FE]        IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  cannot  find  symbol  l	3	None	replace
42	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  cannot  find  symbol  l  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	14	None	replace
43	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  current.bytesRead);  [CE]  cannot  find  symbol  l  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(byte)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	14	None	replace
44	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  [CE]  cannot  find  symbol  l  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	14	None	replace
45	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  [CE]  cannot  find  symbol  l  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	16	None	replace
46	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  csize);  [CE]  cannot  find  symbol  l  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	16	None	replace
47	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  [CE]  cannot  find  symbol  size  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  size	16	None	replace
48	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  [CE]  cannot  find  symbol  l  [FE]                arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	16	None	replace
49	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);  [CE]  cannot  find  symbol  l  [FE]                  arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	16	None	replace
50	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead  +  1);  [CE]  cannot  find  symbol  l  [FE]                    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	16	None	replace
51	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  [CE]  cannot  find  symbol  l  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);	  toRead    =(int)(current.bytesRead    *    csize);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	7	None	replace
52	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  1);  [CE]  cannot  find  symbol  l  [FE]                arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(current.bytesRead    *    csize);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	7	None	replace
53	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  [CE]  cannot  find  symbol  size  [FE]                  arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);	  toRead    =(int)(current.bytesRead    *    csize);    timeout    	non-compiled	[CE]  cannot  find  symbol  size	7	None	replace
54	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  csize);  [CE]  cannot  find  symbol  l  [FE]                    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  /  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  csize);	  toRead    =(int)(current.bytesRead    *    csize);    timeout    	non-compiled	[CE]  cannot  find  symbol  l	7	None	replace
55	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  length);  [CE]  ')'  expected  [FE]                      arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  length);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  length);	  toRead    =(int)(current.bytesRead    *    csize);    timeout    	non-compiled	[CE]  ')'  expected	7	None	replace
56	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  max);  [CE]  cannot  find  symbol  max  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  max);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  max);	  toRead    =(int)(current.bytesRead    -    size);    	non-compiled	[CE]  cannot  find  symbol  max	1	None	replace
57	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  [CE]  ')'  expected  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    int  toRead  =(int)(csize  -  current.bytesRead  +  1);	  	non-compiled	[CE]  ')'  expected	8	None	add
58	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  toRead  =(int)(csize  -  current.bytesRead  +  1);  [CE]  ')'  expected  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  toRead  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    toRead  =(int)(csize  -  current.bytesRead  +  1);	  	non-compiled	[CE]  ')'  expected	8	None	add
59	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);  [CE]  ')'  expected  [FE]        java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    l  =(int)(csize  -  current.bytesRead  +  1);	  	non-compiled	[CE]  ')'  expected	8	None	add
60	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  ')'  expected  [FE]          java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }	  	non-compiled	[CE]  ')'  expected	8	None	add
61	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);  [CE]  ')'  expected  [FE]            java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);	  	non-compiled	[CE]  ')'  expected	8	None	add
62	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  ')'  expected  [FE]              java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  	non-compiled	[CE]  ')'  expected	8	None	add
63	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  ')'  expected  [FE]                java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  	non-compiled	[CE]  ')'  expected	8	None	add
64	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize  -  current.bytesRead  +  1);	  	non-compiled	[CE]  not  a  statement	8	None	add
65	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  size  +  1);  [CE]  ')'  expected  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  size  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  size  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
66	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  1);  [CE]  ')'  expected  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
67	[BUG]  [BUGGY]  toRead  =(byte)(csize  -  current.bytesRead  +  1);  [CE]  ')'  expected  [FE]        java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(byte)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
68	[BUG]  [BUGGY]  toRead  =  (byte)(current.bytesRead  -  size);  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(current.bytesRead  -  size);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =  (byte)(current.bytesRead  -  size);	  toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  ')'  expected	5	None	replace
69	[BUG]  [BUGGY]  toRead  =(byte)(toRead  -  current.bytesRead);  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(byte)(toRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(toRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  ')'  expected	5	None	replace
70	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead  =(int)(current.bytesRead  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
71	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    int  toRead  =(int)(current.bytesRead  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
72	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead  =(int)(current.bytesRead  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
73	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	13	None	add
74	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    l  =(int)(current.bytesRead  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
75	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	13	None	add
76	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  long  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]                    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  long  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    long  toRead  =(int)(current.bytesRead  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
77	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]                      arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    read  =(int)(current.bytesRead  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
78	[BUG]  [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  int  toRead  =  (byte)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  int  toRead  =  (byte)(csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =    (byte)(csize    -    current.bytesRead);    int  toRead  =  (byte)(csize  -  current.bytesRead);	  	non-compiled	[CE]  not  a  statement	4	None	add
79	[BUG]  [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  toRead  =  (byte)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]      arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  toRead  =  (byte)(csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =    (byte)(csize    -    current.bytesRead);    toRead  =  (byte)(csize  -  current.bytesRead);	  	non-compiled	[CE]  not  a  statement	4	None	add
80	[BUG]  [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  l  =(byte)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  l  =(byte)(csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =    (byte)(csize    -    current.bytesRead);    l  =(byte)(csize  -  current.bytesRead);	  	non-compiled	[CE]  not  a  statement	4	None	add
81	[BUG]  [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  (byte)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  (byte)(csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize  -  current.bytesRead);	  	non-compiled	[CE]  not  a  statement	4	None	add
82	[BUG]  [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  int  csize  =(byte)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  int  csize  =(byte)(csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =    (byte)(csize    -    current.bytesRead);    int  csize  =(byte)(csize  -  current.bytesRead);	  	non-compiled	[CE]  not  a  statement	4	None	add
83	[BUG]  [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  [CE]  not  a  statement  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =    (byte)(csize    -    current.bytesRead);    byte[]  csize  =  current.bytesRead;	  	non-compiled	[CE]  not  a  statement	4	None	add
84	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  timeout    	non-compiled	[CE]  not  a  statement	6	None	add
85	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]                arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  timeout    	non-compiled	[CE]  not  a  statement	6	None	add
86	[BUG]  [BUGGY]      System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);	  	non-compiled	[CE]  not  a  statement	10	None	add
87	[BUG]  [BUGGY]      System.arraycopy(buf,  offset,  current.bytesRead,  csize);  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      System.arraycopy(buf,  offset,  current.bytesRead,  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        System.arraycopy(buf,  offset,  current.bytesRead,  csize);	  	non-compiled	[CE]  not  a  statement	10	None	add
88	[BUG]  [BUGGY]      if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  +=  csize;  }  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  +=  csize;  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  +=  csize;  }	  	non-compiled	[CE]  not  a  statement	10	None	add
89	[BUG]  [BUGGY]      if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }	  	non-compiled	[CE]  not  a  statement	10	None	add
90	[BUG]  [BUGGY]      if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  0;  }  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  0;  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  0;  }	  	non-compiled	[CE]  not  a  statement	10	None	add
91	[BUG]  [BUGGY]      System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        System.arraycopy(buf,  offset,  current.bytesRead,  0,  length);	  	non-compiled	[CE]  not  a  statement	10	None	add
92	[BUG]  [BUGGY]      System.arraycopy(buf,  offset,  csize,  current.bytesRead,  toRead);  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      System.arraycopy(buf,  offset,  csize,  current.bytesRead,  toRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        System.arraycopy(buf,  offset,  csize,  current.bytesRead,  toRead);	  	non-compiled	[CE]  not  a  statement	10	None	add
93	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  >  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  not  a  statement  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  >  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead  >  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  not  a  statement	2	None	add
94	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  not  a  statement  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  not  a  statement	2	None	add
95	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  >  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]        IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  >  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead  >  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  	non-compiled	[CE]  not  a  statement	2	None	add
96	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  timeout    	non-compiled	[CE]  not  a  statement	15	None	add
97	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32);  [CE]  not  a  statement  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_EXP_32);	  toRead    =(int)(current.bytesRead    *    csize);    timeout    	non-compiled	[CE]  not  a  statement	7	None	replace
98	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  java.lang.AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  java.lang.AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);	  	non-compiled	[CE]  not  a  statement	8	None	add
99	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  java.lang.AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  java.lang.AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);	  	non-compiled	[CE]  not  a  statement	8	None	add
100	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  java.lang.AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  java.lang.AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);	  	non-compiled	[CE]  not  a  statement	8	None	add
101	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
102	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  1);  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  2  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
103	[BUG]  [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  byte  toRead  =  (byte)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  byte  toRead  =  (byte)(csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =    (byte)(csize    -    current.bytesRead);    byte  toRead  =  (byte)(csize  -  current.bytesRead);	  	non-compiled	[CE]  not  a  statement	4	None	add
104	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  >=  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  >=  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead  >=  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
105	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	13	None	add
106	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  cmSize);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(byte)(current.bytesRead  -  cmSize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  cmSize);	  toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	5	None	replace
107	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.max);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  this.max);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.max);	  toRead    =(int)(current.bytesRead    -    size);    	non-compiled	[CE]  not  a  statement	1	None	replace
108	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  1);  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  -  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  not  a  statement	16	None	replace
109	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }	  	non-compiled	[CE]  not  a  statement	8	None	add
110	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }	  	non-compiled	[CE]  not  a  statement	8	None	add
111	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  	non-compiled	[CE]  not  a  statement	8	None	add
112	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize  >  0)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  	non-compiled	[CE]  not  a  statement	8	None	add
113	[BUG]  [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =(byte)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =(byte)(csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =    (byte)(csize    -    current.bytesRead);    byte[]  csize  =(byte)(csize  -  current.bytesRead);	  	non-compiled	[CE]  not  a  statement	4	None	add
114	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	      	non-compiled	[CE]  not  a  statement	11	None	replace
115	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	      	non-compiled	[CE]  not  a  statement	11	None	replace
116	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	      	non-compiled	[CE]  not  a  statement	11	None	replace
117	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }	      	non-compiled	[CE]  not  a  statement	11	None	replace
118	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	      	non-compiled	[CE]  not  a  statement	11	None	replace
119	[BUG]  [BUGGY]  current.bytesRead  +=  csize  -  current.bytesRead;  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  current.bytesRead  +=  csize  -  current.bytesRead;  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  csize  -  current.bytesRead;	      	non-compiled	[CE]  not  a  statement	11	None	replace
120	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  not  a  statement  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  not  a  statement	2	None	add
121	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]      IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  not  a  statement	2	None	add
122	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]        IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    csize);    if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  	non-compiled	[CE]  not  a  statement	2	None	add
123	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
124	[BUG]  [BUGGY]  toRead  =(int)(toRead  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]      java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(toRead  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
125	[BUG]  [BUGGY]  toRead  =(int)(length  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(length  -  current.bytesRead  +  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(length  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
126	[BUG]  [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    timeout    	non-compiled	[CE]  not  a  statement	14	None	replace
127	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  timeout    	non-compiled	[CE]  not  a  statement	6	None	add
128	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);	  timeout    	non-compiled	[CE]  not  a  statement	6	None	add
129	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                  arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }	  timeout    	non-compiled	[CE]  not  a  statement	6	None	add
130	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	6	None	add
131	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	6	None	add
132	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	6	None	add
133	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    TokenBuffer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	15	None	add
134	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	15	None	add
135	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  -  1);  [CE]  not  a  statement  [FE]    IndexOutOfBoundsException    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  -  1);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize  -  1);	  toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	3	None	replace
136	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  TokenBuffer  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  TokenBuffer  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    TokenBuffer  toRead  =(int)(current.bytesRead  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
137	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  timeout    	non-compiled	[CE]  illegal  start  of  expression	13	None	add
138	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead  =(int)(current.bytesRead  -  current.bytesRead);	  timeout    	non-compiled	[CE]  not  a  statement	13	None	add
139	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  not  a  statement	16	None	replace
140	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]            arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(toRead  *  csize  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  not  a  statement	16	None	replace
141	[BUG]  [BUGGY]  toRead  =(int)(length  *  current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]              arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(length  *  current.bytesRead  -  current.bytesRead);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(length  *  current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    timeout    	non-compiled	[CE]  not  a  statement	16	None	replace
142	[BUG]  [BUGGY]      if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  not  a  statement  [FE]    java.lang.AssertionError:  array  lengths  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]      if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	        if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	  	non-compiled	[CE]  not  a  statement	10	None	add
143	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.off);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {      [BUGGY]  toRead  =(int)(current.bytesRead  -  this.off);  [BUGGY]    }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.off);	  toRead    =(int)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  not  a  statement	12	None	replace
