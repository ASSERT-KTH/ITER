bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  not  a  statement	89	None	replace
2	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();  }  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  not  a  statement	89	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  not  a  statement	89	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  not  a  statement	89	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  =  buf.remaining();  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  not  a  statement	89	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();  [CE]  not  a  statement  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  not  a  statement	89	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();  [CE]  not  a  statement  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  not  a  statement	89	None	replace
8	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length  +  1);  [CE]  not  a  statement  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  buffer.length  +  1);	  toRead    =(int)(current.bytesRead    -    csize    +    1);    	non-compiled	[CE]  not  a  statement	39	None	replace
9	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  length  +  1);  [CE]  not  a  statement  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  length  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  length  +  1);	  toRead    =(int)(current.bytesRead    -    csize    +    1);    	non-compiled	[CE]  not  a  statement	39	None	replace
10	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  max);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  max);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  max);	  toRead    =(int)(current.bytesRead    *    size);    	non-compiled	[CE]  not  a  statement	53	None	replace
11	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  buffer.length);  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  buffer.length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  buffer.length);	  toRead    =(int)(current.bytesRead    *    size);    	non-compiled	[CE]  not  a  statement	53	None	replace
12	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.max);  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.max);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.max);	  toRead    =(int)(current.bytesRead    *    size);    	non-compiled	[CE]  not  a  statement	53	None	replace
13	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  CRC32_SIZE);  [CE]  not  a  statement  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  CRC32_SIZE);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  CRC32_SIZE);	  toRead    =(int)(current.bytesRead    *    size);    	non-compiled	[CE]  not  a  statement	53	None	replace
14	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  cmSize);  [CE]  not  a  statement  [FE]        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  cmSize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  cmSize);	  toRead    =(byte)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  not  a  statement	106	None	replace
15	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  length);  [CE]  not  a  statement  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  length);	  toRead    =(byte)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  not  a  statement	106	None	replace
16	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  offset);  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  offset);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  offset);	  toRead    =(byte)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  not  a  statement	106	None	replace
17	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  +  cmSize);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  +  cmSize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  +  cmSize);	  toRead    =(byte)(current.bytesRead    -    cmSize);    	non-compiled	[CE]  not  a  statement	106	None	replace
18	[BUG]  [BUGGY]  int  csize  =(byte)(current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  csize  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  csize  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	82	None	replace
19	[BUG]  [BUGGY]  byte  csize  =(byte)(current.bytesRead);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  csize  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  csize  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	82	None	replace
20	[BUG]  [BUGGY]  byte  csize  =(byte)(current.bytesRead  -  size);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  csize  =(byte)(current.bytesRead  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  csize  =(byte)(current.bytesRead  -  size);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	82	None	replace
21	[BUG]  [BUGGY]  byte  csize  =(byte)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  csize  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  csize  =(byte)(current.bytesRead  -  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	82	None	replace
22	[BUG]  [BUGGY]  int  toRead  =(byte)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(byte)(current.bytesRead  -  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	82	None	replace
23	[BUG]  [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
24	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
25	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  not  a  statement  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
26	[BUG]  [BUGGY]  if(length  <  =  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  <  =  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  <  =  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
27	[BUG]  [BUGGY]  if(length  ==  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  not  a  statement  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  ==  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  ==  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
28	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]                              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
29	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]                                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
30	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length,  length);  [CE]  ')'  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  buffer.length,  length);	  toRead    =(int)(current.bytesRead    -    buffer.length);    	non-compiled	[CE]  ')'  expected	29	None	replace
31	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length  -  1);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  buffer.length  -  1);	  toRead    =(int)(current.bytesRead    -    buffer.length);    	non-compiled	[CE]  not  a  statement	29	None	replace
32	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length  +  length);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.length  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  buffer.length  +  length);	  toRead    =(int)(current.bytesRead    -    buffer.length);    	non-compiled	[CE]  not  a  statement	29	None	replace
33	[BUG]  [BUGGY]  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	ToRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	72	None	replace
34	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	72	None	replace
35	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	72	None	replace
36	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	72	None	replace
37	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	72	None	replace
38	[BUG]  [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  not  a  statement	128	None	replace
39	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  not  a  statement	128	None	replace
40	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  not  a  statement	115	None	replace
41	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  not  a  statement	115	None	replace
42	[BUG]  [BUGGY]  readStored(buffer,  offset,  toRead);  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  readStored(buffer,  offset,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	readStored(buffer,  offset,  toRead);	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  not  a  statement	115	None	replace
43	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  ';'  expected	115	None	replace
44	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  ';'  expected	115	None	replace
45	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  not  a  statement	115	None	replace
46	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  not  a  statement	115	None	replace
47	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  =  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  =  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
48	[BUG]  [BUGGY]  ||(current.bytesRead  <  =  0))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  <  =  0))  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  <  =  0))  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
49	[BUG]  [BUGGY]  ||(csize  -  current.bytesRead)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(csize  -  current.bytesRead)  ==  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(csize  -  current.bytesRead)  ==  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
50	[BUG]  [BUGGY]  ||(current.bytesRead  <  =  size))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  <  =  size))  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  <  =  size))  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
51	[BUG]  [BUGGY]  ||(length  -  current.bytesRead)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(length  -  current.bytesRead)  <  =  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(length  -  current.bytesRead)  <  =  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
52	[BUG]  [BUGGY]  ||(csize  -  current.bytesRead)!=  0)  {  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(csize  -  current.bytesRead)!=  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(csize  -  current.bytesRead)!=  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
53	[BUG]  [BUGGY]  ||(current.bytesRead  <  0)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  <  0)  <  =  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  <  0)  <  =  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
54	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  toRead);  [CE]  not  a  statement  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  toRead);	  toRead    =(byte)(toRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	69	None	replace
55	[BUG]  [BUGGY]  toRead  =(byte)(toRead  -  current.bytesRead,  length);  [CE]  ')'  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(toRead  -  current.bytesRead,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(toRead  -  current.bytesRead,  length);	  toRead    =(byte)(toRead    -    current.bytesRead);    	non-compiled	[CE]  ')'  expected	69	None	replace
56	[BUG]  [BUGGY]  toRead  =(byte)(toRead  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(toRead  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(toRead  -  current.bytesRead  +  1);	  toRead    =(byte)(toRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	69	None	replace
57	[BUG]  [BUGGY]  toRead  =(byte)(toRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(toRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(toRead  *  current.bytesRead);	  toRead    =(byte)(toRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	69	None	replace
58	[BUG]  [BUGGY]  toRead  =(byte)(toRead  -  current.bytesRead  +  length);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(toRead  -  current.bytesRead  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(toRead  -  current.bytesRead  +  length);	  toRead    =(byte)(toRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	69	None	replace
59	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
60	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(0);  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
61	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
62	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  ';'  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  ';'  expected	142	None	replace
63	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(0);  }  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
64	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
65	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.setLength(0);  }  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
66	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  size  +  1);  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  size  +  1);	  toRead    =(byte)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	67	None	replace
67	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize  +  1);  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize  +  1);	  toRead    =(byte)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	67	None	replace
68	[BUG]  [BUGGY]  toRead  =(byte)(length  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(length  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(length  -  current.bytesRead  +  1);	  toRead    =(byte)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	67	None	replace
69	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  size  +  1);  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  size  +  1);	  toRead    =(byte)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	67	None	replace
70	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize  +  1);  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  csize  +  1);	  toRead    =(byte)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	67	None	replace
71	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
72	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
73	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
74	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
75	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLength  -  current.bytesRead);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLength  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesLength  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    size    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	47	None	replace
76	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    size    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	47	None	replace
77	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	70	None	replace
78	[BUG]  [BUGGY]  read  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	70	None	replace
79	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	70	None	replace
80	[BUG]  [BUGGY]  Read  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Read  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Read  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	70	None	replace
81	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	64	None	replace
82	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	64	None	replace
83	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	64	None	replace
84	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	64	None	replace
85	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  (int)(current.bytesRead  *  csize  +  1);  [CE]  not  a  statement  [FE]                              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  (int)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  +  1);  (int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	64	None	replace
86	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(current.bytesRead  *  size  +  1);  [CE]  not  a  statement  [FE]                                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(current.bytesRead  *  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  +  1);  (int)(current.bytesRead  *  size  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	64	None	replace
87	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize  +  1);  (int)(current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize  +  1);  (int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize  +  1);  (int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	64	None	replace
88	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	101	None	replace
89	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  2);  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  +  2);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	101	None	replace
90	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	101	None	replace
91	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  length);  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  +  length);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	101	None	replace
92	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  offset  -  current.bytesRead);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  offset  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  offset  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    length    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	45	None	replace
93	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLen  -  current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLen  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesLen  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    length    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	45	None	replace
94	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  +  1);  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  +  1);	  toRead    =(int)(current.bytesRead    *    size    +    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
95	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  2);  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  +  2);	  toRead    =(int)(current.bytesRead    *    size    +    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
96	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  size  +  1);  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  size  +  1);	  toRead    =(int)(current.bytesRead    *    size    +    1);    	non-compiled	[CE]  not  a  statement	66	None	replace
97	[BUG]  [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	121	None	replace
98	[BUG]  [BUGGY]  TokenBuffer  toRead  =(int)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(int)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(int)(csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	121	None	replace
99	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  =  0);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  =  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  =  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
100	[BUG]  [BUGGY]  ||(current.bytesRead  -  size)  <  =  0);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  size)  <  =  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  size)  <  =  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
101	[BUG]  [BUGGY]  ||(current.bytesRead  -  csize)  <  =  0);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  csize)  <  =  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  csize)  <  =  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
102	[BUG]  [BUGGY]  ||(csize  -  current.bytesRead)  ==  0);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(csize  -  current.bytesRead)  ==  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(csize  -  current.bytesRead)  ==  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
103	[BUG]  [BUGGY]  ||(length  -  current.bytesRead)  <  =  0);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(length  -  current.bytesRead)  <  =  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(length  -  current.bytesRead)  <  =  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
104	[BUG]  [BUGGY]  ||(csize  -  current.bytesRead)!=  0);  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(csize  -  current.bytesRead)!=  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(csize  -  current.bytesRead)!=  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
105	[BUG]  [BUGGY]  ||(current.bytesRead)  <  =  0);  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead)  <  =  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead)  <  =  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
106	[BUG]  [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  illegal  start  of  expression  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
107	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
108	[BUG]  [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	137	None	replace
109	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(toRead  <  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(toRead  <  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(toRead  <  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	137	None	replace
110	[BUG]  [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	137	None	replace
111	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	137	None	replace
112	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	138	None	replace
113	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	138	None	replace
114	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	138	None	replace
115	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	138	None	replace
116	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	138	None	replace
117	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	138	None	replace
118	[BUG]  [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  csize  =(byte)(current.bytesRead  -  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	113	None	replace
119	[BUG]  [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  -  size);  [CE]  not  a  statement  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  csize  =(byte)(current.bytesRead  -  size);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	113	None	replace
120	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  size);  byte[]  csize  =(byte)(current.bytesRead);  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  size);  byte[]  csize  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  size);  byte[]  csize  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	113	None	replace
121	[BUG]  [BUGGY]  byte[]  current.bytesRead  =(byte)(csize  -  current.bytesRead);  [CE]  ';'  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  current.bytesRead  =(byte)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  current.bytesRead  =(byte)(csize  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  ';'  expected	113	None	replace
122	[BUG]  [BUGGY]  byte[]  toRead  =(byte)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  toRead  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  toRead  =(byte)(current.bytesRead  -  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	113	None	replace
123	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  offset);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  offset);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  offset);	  toRead    =(int)(current.bytesRead    *    length);    	non-compiled	[CE]  not  a  statement	51	None	replace
124	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  1);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  1);	  toRead    =(int)(current.bytesRead    *    length);    	non-compiled	[CE]  not  a  statement	51	None	replace
125	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  not  a  statement	15	None	replace
126	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  not  a  statement	15	None	replace
127	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  not  a  statement	15	None	replace
128	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  ToRead  =(int)(current.bytesRead  *  size);  [CE]  not  a  statement  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  ToRead  =(int)(current.bytesRead  *  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  ToRead  =(int)(current.bytesRead  *  size);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  not  a  statement	15	None	replace
129	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  not  a  statement	15	None	replace
130	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  max);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  max);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  max);  ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  not  a  statement	15	None	replace
131	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
132	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
133	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset  [CE]  illegal  start  of  expression  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
134	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,  offset  [CE]  illegal  start  of  expression  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,  offset	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
135	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  [CE]  illegal  start  of  expression  [FE]                                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
136	[BUG]  [BUGGY]  int  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  expression  [FE]                                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
137	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,  [CE]  illegal  start  of  expression  [FE]                                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
138	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.max  +  1);  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  this.max  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.max  +  1);	  toRead    =(int)(current.bytesRead    -    this.max);    	non-compiled	[CE]  not  a  statement	107	None	replace
139	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.max,  length);  [CE]  ')'  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  this.max,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.max,  length);	  toRead    =(int)(current.bytesRead    -    this.max);    	non-compiled	[CE]  ')'  expected	107	None	replace
140	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  this.max);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  this.max);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  this.max);	  toRead    =(int)(current.bytesRead    -    this.max);    	non-compiled	[CE]  not  a  statement	107	None	replace
141	[BUG]  [BUGGY]  toRead  =(int)(csize  -  this.max);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  this.max);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  this.max);	  toRead    =(int)(current.bytesRead    -    this.max);    	non-compiled	[CE]  not  a  statement	107	None	replace
142	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  1);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  1);	  toRead    =(int)(current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	44	None	replace
143	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  2);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  2);	  toRead    =(int)(current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	44	None	replace
144	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  1);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  1);	  toRead    =(int)(current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	44	None	replace
145	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  1);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  1);	  toRead    =(int)(current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	44	None	replace
146	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  length);  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  length);	  toRead    =(int)(current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	44	None	replace
147	[BUG]  [BUGGY]  toRead  =(int)(csize  +  1);  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  +  1);	  toRead    =(int)(current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	44	None	replace
148	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  toRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  -  toRead);	  toRead    =(int)(toRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	140	None	replace
149	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  toRead);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  toRead);	  toRead    =(int)(toRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	140	None	replace
150	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  current.bytesRead  -  csize);	  toRead    =(int)(toRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	140	None	replace
151	[BUG]  [BUGGY]  toRead  =(int)(buf.length  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(buf.length  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(buf.length  *  csize  -  current.bytesRead);	  toRead    =(int)(toRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	140	None	replace
152	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  csize  -  current.bytesRead,  length);  [CE]  ')'  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  csize  -  current.bytesRead,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  csize  -  current.bytesRead,  length);	  toRead    =(int)(toRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  ')'  expected	140	None	replace
153	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  offset,  length);  [CE]  ')'  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  offset,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  offset,  length);	  toRead    =(int)(current.bytesRead    -    offset);    	non-compiled	[CE]  ')'  expected	28	None	replace
154	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  offset  +  length);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  offset  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  offset  +  length);	  toRead    =(int)(current.bytesRead    -    offset);    	non-compiled	[CE]  not  a  statement	28	None	replace
155	[BUG]  [BUGGY]  current.bytesRead  +=  toRead;  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  toRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  toRead;	          current.bytesRead    +=    csize;    	non-compiled	[CE]  not  a  statement	23	None	replace
156	[BUG]  [BUGGY]  current.bytesRead  +=  size;  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  size;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  size;	          current.bytesRead    +=    csize;    	non-compiled	[CE]  not  a  statement	23	None	replace
157	[BUG]  [BUGGY]  current.bytesRead  +=  length;  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  length;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  length;	          current.bytesRead    +=    csize;    	non-compiled	[CE]  not  a  statement	23	None	replace
158	[BUG]  [BUGGY]  current.bytesRead  +=  max;  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  max;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  max;	          current.bytesRead    +=    csize;    	non-compiled	[CE]  not  a  statement	23	None	replace
159	[BUG]  [BUGGY]  current.bytesRead  +=  bytesRead;  [CE]  not  a  statement  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  bytesRead;	          current.bytesRead    +=    csize;    	non-compiled	[CE]  not  a  statement	23	None	replace
160	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
161	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
162	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  offset);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  offset);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  offset);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
163	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
164	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	127	None	replace
165	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  not  a  statement	104	None	replace
166	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  not  a  statement	104	None	replace
167	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  not  a  statement	104	None	replace
168	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  not  a  statement  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
169	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
170	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
171	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset  [CE]  ')'  expected  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
172	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	122	None	replace
173	[BUG]  [BUGGY]  if(csize  >  toRead)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  toRead)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  toRead)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
174	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
175	[BUG]  [BUGGY]  if(csize  >  length)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  length)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  length)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
176	[BUG]  [BUGGY]  if(length  >  csize)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  not  a  statement  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  csize)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  csize)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
177	[BUG]  [BUGGY]  if(current.bytesRead  >  size)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  not  a  statement  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  >  size)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  >  size)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  not  a  statement	24	None	replace
178	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	85	None	replace
179	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	85	None	replace
180	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	85	None	replace
181	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	85	None	replace
182	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	85	None	replace
183	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  ';'  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  ';'  expected	85	None	replace
184	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  not  a  statement  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  not  a  statement	85	None	replace
185	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  csize  =(int)(current.bytesRead  *  csize);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  csize  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  csize  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	7	None	replace
186	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  offset);  csize  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]      arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  offset);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  offset);  csize  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	7	None	replace
187	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  csize  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  current.bytesRead);  csize  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	7	None	replace
188	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  length);  csize  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  length);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  length);  csize  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	7	None	replace
189	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  csize  =(byte)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]            arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  csize  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize);  csize  =(byte)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	7	None	replace
190	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  size);  csize  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]              arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  size);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  size);  csize  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	7	None	replace
191	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	50	None	replace
192	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	50	None	replace
193	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	50	None	replace
194	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	50	None	replace
195	[BUG]  [BUGGY]  toRead  =  (byte)(current.bytesRead  -  size);  (byte)(current.bytesRead);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =  (byte)(current.bytesRead  -  size);  (byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =  (byte)(current.bytesRead  -  size);  (byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	81	None	replace
196	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  (byte)(current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  (byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize);  (byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	81	None	replace
197	[BUG]  [BUGGY]  toRead  =  (byte)(current.bytesRead  -  size);  (byte)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =  (byte)(current.bytesRead  -  size);  (byte)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =  (byte)(current.bytesRead  -  size);  (byte)(csize  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	81	None	replace
198	[BUG]  [BUGGY]  byte  toRead  =(byte)(current.bytesRead  -  size);  (byte)(toRead  -  current.bytesRead);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =(byte)(current.bytesRead  -  size);  (byte)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =(byte)(current.bytesRead  -  size);  (byte)(toRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	81	None	replace
199	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  offset  +  1);  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  offset  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  offset  +  1);	  toRead    =(int)(current.bytesRead    -    size    +    1);    	non-compiled	[CE]  not  a  statement	65	None	replace
200	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  current.bytesRead);	  toRead    =(int)(csize    *    current.bytesRead);    	non-compiled	[CE]  not  a  statement	48	None	replace
201	[BUG]  [BUGGY]  toRead  =(int)(buf.length  *  current.bytesRead);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(buf.length  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(buf.length  *  current.bytesRead);	  toRead    =(int)(csize    *    current.bytesRead);    	non-compiled	[CE]  not  a  statement	48	None	replace
202	[BUG]  [BUGGY]  toRead  =(int)(csize  /  current.bytesRead);  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  /  current.bytesRead);	  toRead    =(int)(csize    *    current.bytesRead);    	non-compiled	[CE]  not  a  statement	48	None	replace
203	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	129	None	replace
204	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	129	None	replace
205	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	129	None	replace
206	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  csize);  }  [CE]  not  a  statement  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  not  a  statement	129	None	replace
207	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  c  [CE]  ')'  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  c  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  csize);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  c	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  ')'  expected	129	None	replace
208	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  c  [CE]  ')'  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  c  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  c	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  ')'  expected	129	None	replace
209	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize  [CE]  ')'  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  ')'  expected	129	None	replace
210	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  *  1);  [CE]  not  a  statement  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  *  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead  *  1);	  toRead    =(int)(current.bytesRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	123	None	replace
211	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  2);  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead  +  2);	  toRead    =(int)(current.bytesRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	123	None	replace
212	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	123	None	replace
213	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  illegal  start  of  expression  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
214	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  illegal  start  of  expression  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
215	[BUG]  [BUGGY]  if(csize  <  =  current.bytesRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  illegal  start  of  expression  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  <  =  current.bytesRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  <  =  current.bytesRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
216	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(toRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  illegal  start  of  expression  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(toRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(toRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
217	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  current.bytesRead);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  current.bytesRead);	  toRead    =(byte)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	43	None	replace
218	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  buffer.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  buffer.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  buffer.bytesRead);	  toRead    =(byte)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	43	None	replace
219	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  this.csize);  [CE]  not  a  statement  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  this.csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  this.csize);	  toRead    =(byte)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	43	None	replace
220	[BUG]  [BUGGY]  Integer  toRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  toRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    Integer    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	4	None	replace
221	[BUG]  [BUGGY]  Integer  toRead  =(int)(csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  toRead  =(int)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  toRead  =(int)(csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    csize);    Integer    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	4	None	replace
222	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  not  a  statement	117	None	replace
223	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  not  a  statement	117	None	replace
224	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  ';'  expected	117	None	replace
225	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buffer.remaining());  }  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buffer.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buffer.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  not  a  statement	117	None	replace
226	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  not  a  statement	117	None	replace
227	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  ';'  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  ';'  expected	117	None	replace
228	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining()  [CE]  not  a  statement  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining()  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining()	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  not  a  statement	117	None	replace
229	[BUG]  [BUGGY]  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  not  a  statement  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
230	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
231	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
232	[BUG]  [BUGGY]  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  not  a  statement	34	None	replace
233	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  not  a  statement	93	None	replace
234	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize,  length);  [CE]  ')'  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize,  length);	  toRead    =(byte)(current.bytesRead    -    csize);    	non-compiled	[CE]  ')'  expected	41	None	replace
235	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  not  a  statement	134	None	replace
236	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  -  1);  [CE]  not  a  statement  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  current.bytesRead  -  1);	  toRead    =(int)(current.bytesRead    -    csize    -    1);    	non-compiled	[CE]  not  a  statement	135	None	replace
237	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  -  2);  [CE]  not  a  statement  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  -  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize  -  2);	  toRead    =(int)(current.bytesRead    -    csize    -    1);    	non-compiled	[CE]  not  a  statement	135	None	replace
238	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize  -  1);  [CE]  not  a  statement  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize  -  1);	  toRead    =(int)(current.bytesRead    -    csize    -    1);    	non-compiled	[CE]  not  a  statement	135	None	replace
239	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  -  1);  [CE]  not  a  statement  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead  -  1);	  toRead    =(int)(current.bytesRead    -    csize    -    1);    	non-compiled	[CE]  not  a  statement	135	None	replace
240	[BUG]  [BUGGY]  ToRead  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ToRead  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	ToRead  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  not  a  statement	31	None	replace
241	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	5	None	replace
242	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  size);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  size);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  size);  toRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	5	None	replace
243	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  offset);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  offset);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  offset);  toRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	5	None	replace
244	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  length);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  length);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  length);  toRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	5	None	replace
245	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  [CE]  not  a  statement  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  not  a  statement	5	None	replace
246	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLen);  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLen);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesLen);	  toRead    =(int)(current.bytesRead    *    current.bytesRead);    	non-compiled	[CE]  not  a  statement	42	None	replace
247	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLength);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLength);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesLength);	  toRead    =(int)(current.bytesRead    *    current.bytesRead);    	non-compiled	[CE]  not  a  statement	42	None	replace
248	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLast);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLast);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesLast);	  toRead    =(int)(current.bytesRead    *    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
249	[BUG]  [BUGGY]  int  toRead  =(int)(csize  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
250	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize,  length);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize,  length);	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
251	[BUG]  [BUGGY]  byte  toRead  =(byte)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =(byte)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =(byte)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
252	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size);	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
253	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
254	[BUG]  [BUGGY]  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
255	[BUG]  [BUGGY]  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
256	[BUG]  [BUGGY]  java.lang.AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  java.lang.AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	java.lang.AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
257	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
258	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
259	[BUG]  [BUGGY]  java.lang.AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  java.lang.AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	java.lang.AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
260	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
261	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
262	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
263	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
264	[BUG]  [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
265	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
266	[BUG]  [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  if(toRead  <  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  if(toRead  <  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(csize  -  current.bytesRead  +  1);  if(toRead  <  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
267	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
268	[BUG]  [BUGGY]  byte  toRead  =(byte)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =(byte)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =(byte)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
269	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
270	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
271	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
272	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
273	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
274	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buffer.length());  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buffer.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buffer.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
275	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
276	[BUG]  [BUGGY]  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
277	[BUG]  [BUGGY]  Integer  toRead  =(int)(current.bytesRead  *  csize  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  toRead  =(int)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  toRead  =(int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
278	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
279	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize  +  1);  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
280	[BUG]  [BUGGY]  Read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
281	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
282	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
283	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
284	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
285	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]    arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
286	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]      arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    int  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
287	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]        arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
288	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]          arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    l  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
289	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  int  csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]            arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  int  csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    int  csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
290	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  TokenBuffer  csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]              arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  TokenBuffer  csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    TokenBuffer  csize  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
291	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  l  =(int)current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  l  =(int)current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    l  =(int)current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
292	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
293	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
294	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
295	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  /  size);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  /  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  /  size);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
296	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLength  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesLength  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesLength  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
297	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  /  csize);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  /  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  /  csize);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
298	[BUG]  [BUGGY]  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    l    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
299	[BUG]  [BUGGY]  Token  l  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Token  l  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Token  l  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    l    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
300	[BUG]  [BUGGY]  ToRead  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ToRead  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	ToRead  =(Token)(current.bytesRead  *  csize  -  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    l    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
301	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  toRead  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  toRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  toRead  +  1);	  toRead    =(int)(toRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
302	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  current.bytesRead  +  1);	  toRead    =(int)(toRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
303	[BUG]  [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    TokenBuffer    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
304	[BUG]  [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    TokenBuffer    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
305	[BUG]  [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
306	[BUG]  [BUGGY]  read(toRead,  csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read(toRead,  csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read(toRead,  csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
307	[BUG]  [BUGGY]  readFully(current.bytesRead,  csize  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  readFully(current.bytesRead,  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	readFully(current.bytesRead,  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
308	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
309	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  csize,  current.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  csize,  current.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  csize,  current.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
310	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize,  toRead);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  csize,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
311	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  current.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  buffer,  current.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  buffer,  current.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
312	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  csize,  toRead);  [CE]  <identifier>  expected  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  csize,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  csize,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
313	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]                              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
314	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  size);  [CE]  <identifier>  expected  [FE]        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  size);	  toRead    =    (byte)(current.bytesRead    -    size);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
315	[BUG]  [BUGGY]  Read  =(byte)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Read  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Read  =(byte)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
316	[BUG]  [BUGGY]  Read  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Read  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Read  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
317	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  max  +  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  max  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  max  +  1);	  toRead    =(int)(current.bytesRead    *    csize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
318	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.max  +  1);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.max  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.max  +  1);	  toRead    =(int)(current.bytesRead    *    csize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
319	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead,  length);  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  current.bytesRead,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  current.bytesRead,  length);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
320	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  offset,  length);  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  offset,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  offset,  length);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
321	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  length  +  1);  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  length  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  length  +  1);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
322	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  length  -  1);  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  length  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  length  -  1);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
323	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  offset  +  length);  [CE]  <identifier>  expected  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  offset  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  offset  +  length);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
324	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  1);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  1);	  toRead    =(int)(current.bytesRead    *    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
325	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  1);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  -  1);	  toRead    =(int)(current.bytesRead    *    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
326	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize  -  1);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  csize  -  1);	  toRead    =(int)(current.bytesRead    *    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
327	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  csize  -  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  csize  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  csize  -  1);	  toRead    =(int)(current.bytesRead    *    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
328	[BUG]  [BUGGY]  toRead  =(int)(length  *  current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(length  *  current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(length  *  current.bytesRead  -  csize);	  toRead    =(int)(csize    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
329	[BUG]  [BUGGY]  toRead  =(byte)(csize  *  current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(csize  *  current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(csize  *  current.bytesRead  -  current.bytesRead);	  toRead    =(int)(csize    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
330	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  length);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  length);	  toRead    =(int)(csize    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
331	[BUG]  [BUGGY]  toRead  =(int)(length  *  current.bytesRead  -  size);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(length  *  current.bytesRead  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(length  *  current.bytesRead  -  size);	  toRead    =(int)(csize    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
332	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  csize);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
333	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
334	[BUG]  [BUGGY]  System.arraycopy(csize,  offset,  current.bytesRead,  csize);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(csize,  offset,  current.bytesRead,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(csize,  offset,  current.bytesRead,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
335	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize,  length);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  csize,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
336	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  csize);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
337	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  csize);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
338	[BUG]  [BUGGY]  byte  toRead  =(byte)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =(byte)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
339	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize,  length);  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize,  length);	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
340	[BUG]  [BUGGY]  int  toRead  =  (byte)(current.bytesRead  -  size);  [CE]  <identifier>  expected  [FE]        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =  (byte)(current.bytesRead  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =  (byte)(current.bytesRead  -  size);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
341	[BUG]  [BUGGY]  int  toRead  =  (byte)(csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =  (byte)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =  (byte)(csize  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
342	[BUG]  [BUGGY]  byte  toRead  =  (byte)(csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =  (byte)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =  (byte)(csize  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
343	[BUG]  [BUGGY]  byte  toRead  =  (byte)(current.bytesRead  -  size);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =  (byte)(current.bytesRead  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =  (byte)(current.bytesRead  -  size);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
344	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead,  length);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead,  length);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
345	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  max);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  max);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  max);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
346	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  offset,  length);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  offset,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  offset,  length);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
347	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  length  +  1);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  length  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  length  +  1);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
348	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize,  length);  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  csize,  length);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
349	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  length  -  1);  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  length  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  length  -  1);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
350	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  offset  +  length);  [CE]  <identifier>  expected  [FE]                                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  offset  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  offset  +  length);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
351	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  toRead  =(int)(current.bytesRead  *  csize  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  toRead  =(int)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  +  1);  toRead  =(int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
352	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
353	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
354	[BUG]  [BUGGY]  read  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
355	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
356	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
357	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  size)  {  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  size)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  size)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
358	[BUG]  [BUGGY]  ||(current.bytesRead  -  size)  <  toRead)  {  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  size)  <  toRead)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  size)  <  toRead)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
359	[BUG]  [BUGGY]  ||(current.bytesRead  -  csize)  <  toRead)  {  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  csize)  <  toRead)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  csize)  <  toRead)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
360	[BUG]  [BUGGY]  ||(length  -  current.bytesRead)  <  toRead)  {  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(length  -  current.bytesRead)  <  toRead)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(length  -  current.bytesRead)  <  toRead)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
361	[BUG]  [BUGGY]  ||(buffer.length  -  current.bytesRead)  <  toRead)  {  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(buffer.length  -  current.bytesRead)  <  toRead)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(buffer.length  -  current.bytesRead)  <  toRead)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
362	[BUG]  [BUGGY]  ||(offset  -  current.bytesRead)  <  toRead)  {  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(offset  -  current.bytesRead)  <  toRead)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(offset  -  current.bytesRead)  <  toRead)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
363	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  cmdEnd)  {  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  cmdEnd)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  cmdEnd)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
364	[BUG]  [BUGGY]  l  =(byte)(current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
365	[BUG]  [BUGGY]  l  =(byte)(csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(byte)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(byte)(csize  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
366	[BUG]  [BUGGY]  l  =(byte)(current.bytesRead  -  size);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(byte)(current.bytesRead  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(byte)(current.bytesRead  -  size);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
367	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    max)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
368	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    max)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
369	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  length);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  length);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  length);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    max)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
370	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  size);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  size);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  size);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    max)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
371	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    max)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
372	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
373	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
374	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
375	[BUG]  [BUGGY]  Read  =(byte)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Read  =(byte)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Read  =(byte)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
376	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
377	[BUG]  [BUGGY]  Read  =(byte)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Read  =(byte)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Read  =(byte)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
378	[BUG]  [BUGGY]  if(csize  >  toRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  toRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  toRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
379	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
381	[BUG]  [BUGGY]  if(csize  >  length)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  length)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  length)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
382	[BUG]  [BUGGY]  if(length  >  csize)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  csize)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  csize)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
383	[BUG]  [BUGGY]  if(current.bytesRead  >  size)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  >  size)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  >  size)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
384	[BUG]  [BUGGY]  l  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
385	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
386	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  1);  l  =(int)(current.bytesRead  *  csize  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  1);  l  =(int)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  +  1);  l  =(int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
387	[BUG]  [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  l  =(byte)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  l  =(byte)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(csize  -  current.bytesRead  +  1);  l  =(byte)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
388	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(current.bytesRead  *  size  +  1);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(current.bytesRead  *  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(current.bytesRead  *  size  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
389	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
390	[BUG]  [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  l  =(byte)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  l  =(byte)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(csize  -  current.bytesRead  +  1);  l  =(byte)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
391	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
392	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
393	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
394	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
395	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
396	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
397	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
398	[BUG]  [BUGGY]  java.lang.AssertionError:  current.bytesRead  differed  =(java.lang.Integer)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  java.lang.AssertionError:  current.bytesRead  differed  =(java.lang.Integer)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	java.lang.AssertionError:  current.bytesRead  differed  =(java.lang.Integer)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
399	[BUG]  [BUGGY]  AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
400	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
401	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  length);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  length);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
402	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  size);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  size);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
403	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  this.current.bytesRead);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  this.current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  this.current.bytesRead);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
404	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  -  length);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  -  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  current.bytesRead  -  length);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
405	[BUG]  [BUGGY]  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
406	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
407	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
408	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
409	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
410	[BUG]  [BUGGY]  float  toRead  =(float)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  float  toRead  =(float)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	float  toRead  =(float)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
411	[BUG]  [BUGGY]  float  toRead  =(float)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  float  toRead  =(float)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	float  toRead  =(float)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
412	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
413	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(byte)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
414	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
415	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
416	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  size)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  size)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  size)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
417	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
418	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  c  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  c  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  c	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
419	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  length);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
420	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  length);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  0,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
421	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
422	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  length);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
423	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  offset,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  buffer,  offset,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
424	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
425	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
426	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  csize);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  -  csize);	  toRead    =(int)(csize    *    current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
427	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  size);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  -  size);	  toRead    =(int)(csize    *    current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
428	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  length);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  length);	  toRead    =(int)(current.bytesRead    /    csize);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
429	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  size);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  size);	  toRead    =(int)(current.bytesRead    /    csize);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
430	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  csize,  length);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  csize,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  csize,  length);	  toRead    =(int)(current.bytesRead    /    csize);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
431	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  csize  +  1);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  csize  +  1);	  toRead    =(int)(current.bytesRead    /    csize);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
432	[BUG]  [BUGGY]  byte  toRead  =(byte)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =(byte)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =(byte)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
433	[BUG]  [BUGGY]  float  toRead  =(float)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  float  toRead  =(float)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	float  toRead  =(float)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
434	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
435	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    int  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
436	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    l  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
437	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
438	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    current.bytesRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
439	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
440	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  <identifier>  expected	2	None	add
441	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  l  =(int)current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                  IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  l  =(int)current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    l  =(int)current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
442	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  (int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  (int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  current.bytesRead);  (int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
443	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  (int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  (int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  (int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
444	[BUG]  [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead);  (int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead);  (int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  -  current.bytesRead);  (int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
445	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
446	[BUG]  [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    TokenBuffer    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
447	[BUG]  [BUGGY]  TokenBuffer  toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    TokenBuffer    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
448	[BUG]  [BUGGY]  current.bytesRead  +=  csize  -  toRead;  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  csize  -  toRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  csize  -  toRead;	  current.bytesRead    +=    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
449	[BUG]  [BUGGY]  current.bytesRead  +=  toRead  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  toRead  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  toRead  -  current.bytesRead;	  current.bytesRead    +=    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
450	[BUG]  [BUGGY]  current.bytesRead  +=  csize  -  this.current.bytesRead;  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  csize  -  this.current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  csize  -  this.current.bytesRead;	  current.bytesRead    +=    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
451	[BUG]  [BUGGY]  current.bytesRead  +=  csize  /  current.bytesRead;  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  csize  /  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  csize  /  current.bytesRead;	  current.bytesRead    +=    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
452	[BUG]  [BUGGY]  current.bytesRead  +=  size  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  size  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  size  -  current.bytesRead;	  current.bytesRead    +=    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
453	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    read    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
454	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    read    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
455	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    read    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
456	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    read    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
457	[BUG]  [BUGGY]  if(csize  <  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  <  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  <  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    <    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
458	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  size);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  size);	  int    toRead    =(int)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
459	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  cmd);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  cmd);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  cmd);	  int    toRead    =(int)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
460	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
461	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
462	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
463	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  0;  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  0;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  0;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
464	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  0;  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  0;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  buffer,  toRead,  length);  current.bytesRead  =  0;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
465	[BUG]  [BUGGY]  if(csize  ==  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  ==  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  ==  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
466	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  =  0;  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  =  0;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  =  0;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
467	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
468	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  [CE]  <identifier>  expected  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
469	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
470	[BUG]  [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
471	[BUG]  [BUGGY]  int  toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  *  current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
472	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
473	[BUG]  [BUGGY]  byte  toRead  =(byte)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =(byte)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =(byte)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
474	[BUG]  [BUGGY]  long  toRead  =(long)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  long  toRead  =(long)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	long  toRead  =(long)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
475	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  current.bytesRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  current.bytesRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  current.bytesRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
476	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
477	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  toRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
478	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  current.bytesRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  current.bytesRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  current.bytesRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
479	[BUG]  [BUGGY]  current.bytesRead  =  toRead  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  toRead  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  toRead  -  current.bytesRead;	          current.bytesRead    =    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
480	[BUG]  [BUGGY]  current.bytesRead  =  csize  -  toRead;  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  csize  -  toRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  csize  -  toRead;	          current.bytesRead    =    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
481	[BUG]  [BUGGY]  current.bytesRead  =  size  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  size  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  size  -  current.bytesRead;	          current.bytesRead    =    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
482	[BUG]  [BUGGY]  current.bytesRead  =  length  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  length  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  length  -  current.bytesRead;	          current.bytesRead    =    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
483	[BUG]  [BUGGY]  current.bytesRead  =  buffer.length  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  buffer.length  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  buffer.length  -  current.bytesRead;	          current.bytesRead    =    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
484	[BUG]  [BUGGY]  current.bytesRead  =  offset  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  offset  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  offset  -  current.bytesRead;	          current.bytesRead    =    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
485	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
486	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
487	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
488	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
489	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
490	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  toRead))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
491	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  l  =  0;  l  <  current.bytesRead;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
492	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
493	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
494	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
495	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
496	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
497	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
498	[BUG]  [BUGGY]  if(length  <  =  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  <  =  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  <  =  0)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
499	[BUG]  [BUGGY]  byte[]  csize  =  current.bytesRead;  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  csize  =  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  csize  =  current.bytesRead;	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
500	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
501	[BUG]  [BUGGY]  toRead  =  (byte)(current.bytesRead  -  size);  byte[]  csize  =  current.bytesRead;  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =  (byte)(current.bytesRead  -  size);  byte[]  csize  =  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =  (byte)(current.bytesRead  -  size);  byte[]  csize  =  current.bytesRead;	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
502	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
503	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    ToRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
504	[BUG]  [BUGGY]  ToRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ToRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	ToRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    ToRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
505	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  size);  ToRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  size);  ToRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  size);  ToRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    ToRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
506	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
507	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
508	[BUG]  [BUGGY]  read(toRead,  csize  -  current.bytesRead  +  1);  int  toRead  =(int)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read(toRead,  csize  -  current.bytesRead  +  1);  int  toRead  =(int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read(toRead,  csize  -  current.bytesRead  +  1);  int  toRead  =(int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
509	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.off,  length);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  this.off,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.off,  length);	  toRead    =(int)(current.bytesRead    -    this.off);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
510	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.off  +  1);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  this.off  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.off  +  1);	  toRead    =(int)(current.bytesRead    -    this.off);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
511	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.off  +  length);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  this.off  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.off  +  length);	  toRead    =(int)(current.bytesRead    -    this.off);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
512	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.off);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.off);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.off);	  toRead    =(int)(current.bytesRead    -    this.off);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
513	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  this.off);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  this.off);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  this.off);	  toRead    =(int)(current.bytesRead    -    this.off);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
514	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    read    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
515	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  length);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  2  +  length);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
516	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  2);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  2);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
517	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  csize);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  2  +  csize);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
518	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  2  -  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  2  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  2  -  1);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
519	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  2  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  2  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  2  +  1);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
520	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
521	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current.bytesRead,  csize,  toRead))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
522	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buffer.remaining());  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buffer.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buffer.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
523	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
524	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
525	[BUG]  [BUGGY]  AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
526	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
527	[BUG]  [BUGGY]  java.lang.AssertionError:  array  lengths  differed  =(java.lang.Integer)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  java.lang.AssertionError:  array  lengths  differed  =(java.lang.Integer)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	java.lang.AssertionError:  array  lengths  differed  =(java.lang.Integer)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
528	[BUG]  [BUGGY]  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
529	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  length);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  length);	  toRead    =(int)(current.bytesRead    *    BYTE_EXP_32);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
530	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  BYTE_EXP_32);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  BYTE_EXP_32);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  BYTE_EXP_32);	  toRead    =(int)(current.bytesRead    *    BYTE_EXP_32);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
531	[BUG]  [BUGGY]  toRead  =(int)(csize  *  BYTE_EXP_32);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  BYTE_EXP_32);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  BYTE_EXP_32);	  toRead    =(int)(current.bytesRead    *    BYTE_EXP_32);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
532	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  -  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  -  1);	  toRead    =(int)(current.bytesRead    *    BYTE_EXP_32);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
533	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  BYTE_EXP_32);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  BYTE_EXP_32);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  BYTE_EXP_32);	  toRead    =(int)(current.bytesRead    *    BYTE_EXP_32);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
534	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  csize);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  csize);	  toRead    =(int)(current.bytesRead    *    BYTE_EXP_32);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
535	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32,  length);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_EXP_32,  length);	  toRead    =(int)(current.bytesRead    *    BYTE_EXP_32);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
536	[BUG]  [BUGGY]  long  toRead  =(long)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  long  toRead  =(long)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	long  toRead  =(long)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    long    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
537	[BUG]  [BUGGY]  long  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  long  toRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	long  toRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    long    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
538	[BUG]  [BUGGY]  read  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
539	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  size)  {  break;  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  size)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  size)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
540	[BUG]  [BUGGY]  ||(current.bytesRead  -  size)  <  toRead)  {  break;  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  size)  <  toRead)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  size)  <  toRead)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
541	[BUG]  [BUGGY]  ||(current.bytesRead  -  csize)  <  toRead)  {  break;  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  csize)  <  toRead)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  csize)  <  toRead)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
542	[BUG]  [BUGGY]  ||(length  -  current.bytesRead)  <  toRead)  {  break;  [CE]  <identifier>  expected  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(length  -  current.bytesRead)  <  toRead)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(length  -  current.bytesRead)  <  toRead)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
543	[BUG]  [BUGGY]  ||(current.bytesRead  -  toRead)  <  size)  {  break;  [CE]  <identifier>  expected  [FE]                              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  toRead)  <  size)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  toRead)  <  size)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
544	[BUG]  [BUGGY]  ||(csize  -  current.bytesRead)  <  length)  {  break;  [CE]  <identifier>  expected  [FE]                                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(csize  -  current.bytesRead)  <  length)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(csize  -  current.bytesRead)  <  length)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
545	[BUG]  [BUGGY]  l  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
546	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
547	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
548	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
549	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  l  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  current.bytesRead);  l  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  current.bytesRead);  l  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
550	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
551	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  toRead);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.bytesRead,  0,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
552	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  toRead);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.length,  0,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
553	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead  +  1);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
554	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  toRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
555	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
556	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  toRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
557	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
558	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
559	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
560	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
561	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  csize  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  csize  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  csize  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
562	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  csize  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  csize  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  csize  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
563	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
564	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
565	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  +=  csize;  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  +=  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  csize);  current.bytesRead  +=  csize;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
566	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  +=  csize;  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  +=  csize;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  csize);  current.bytesRead  +=  csize;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
567	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  csize);  current.bytesRead  +=  csize;  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  csize);  current.bytesRead  +=  csize;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  csize);  current.bytesRead  +=  csize;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
568	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  current.bytesRead  +=  csize;  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  current.bytesRead  +=  csize;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  current.bytesRead  +=  csize;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
569	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  Integer  toRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  Integer  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  Integer  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    -    csize);    Integer    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
570	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    Integer    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
571	[BUG]  [BUGGY]  l  =(int)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
572	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  l  =(int)(current.bytesRead  *  csize  +  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  l  =(int)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  +  1);  l  =(int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
573	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(current.bytesRead  *  size  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(current.bytesRead  *  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(current.bytesRead  *  size  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
574	[BUG]  [BUGGY]  l  =(int)(current.bytesRead  *  csize  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(int)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
575	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
576	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
577	[BUG]  [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead  *  csize;  if(toRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead  *  csize;  if(toRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead  *  csize;  if(toRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
578	[BUG]  [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)csize;  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)csize;  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  length)  {  toRead  =(int)csize;  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
579	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    Integer  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	2	None	add
580	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  <identifier>  expected	2	None	add
581	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  ==  null)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  ==  null)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead  ==  null)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  <identifier>  expected	2	None	add
582	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  csize)  {  break;  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  csize)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  csize)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
583	[BUG]  [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  length)  {  break;  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  length)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  current.bytesRead)  <  length)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
584	[BUG]  [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  toRead)  {  break;  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  toRead)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  current.bytesRead)  <  toRead)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
585	[BUG]  [BUGGY]  ||(current.bytesRead  -  toRead)  <  csize)  {  break;  [CE]  <identifier>  expected  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  toRead)  <  csize)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  toRead)  <  csize)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
586	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  current.l  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  current.l  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  current.l  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
587	[BUG]  [BUGGY]  l  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
588	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  csize,  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  csize,  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  csize,  current.bytesRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
589	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  csize,  toRead);  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  csize,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  csize,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
590	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  toRead);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
591	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
592	[BUG]  [BUGGY]  System.arraycopy(current,  offset,  buffer,  current.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current,  offset,  buffer,  current.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current,  offset,  buffer,  current.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
593	[BUG]  [BUGGY]  toRead  =(byte)(currToRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(currToRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(currToRead  -  current.bytesRead);	  toRead    =(byte)(toRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
594	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)current.bytesRead;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
595	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
596	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
597	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  differed  =(int)current.bytesRead;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
598	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  current.bytesRead  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
599	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
600	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  AssertionError:  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
601	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  -  csize;  toRead  =(TokenBuffer)current.bytesRead  -  csize;  [CE]  <identifier>  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  -  csize;  toRead  =(TokenBuffer)current.bytesRead  -  csize;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  -  csize;  toRead  =(TokenBuffer)current.bytesRead  -  csize;	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
602	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)current.bytesRead  -  csize;  toRead  =(int)current.bytesRead  -  csize;  }  [CE]  <identifier>  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)current.bytesRead  -  csize;  toRead  =(int)current.bytesRead  -  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)current.bytesRead  -  csize;  toRead  =(int)current.bytesRead  -  csize;  }	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
603	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  toRead  =(byte)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  toRead  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  -  csize);  toRead  =(byte)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
604	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)current.bytesRead  -  csize;  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)current.bytesRead  -  csize;  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)current.bytesRead  -  csize;  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.setLength(0);  }	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
605	[BUG]  [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
606	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  1  +  length);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  1  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  -  1  +  length);	  toRead    =(int)(current.bytesRead    *    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
607	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_LEN  -  1);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_LEN  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_LEN  -  1);	  toRead    =(int)(current.bytesRead    *    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
608	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.length);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  current.length);	  toRead    =(int)(current.bytesRead    *    length    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
609	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
610	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
611	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
612	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
613	[BUG]  [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
614	[BUG]  [BUGGY]  if(csize  *  current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
615	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  csize);  current.bytesRead  =  buf.remaining();  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  csize);  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  csize);  current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
616	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  buffer,  toRead,  length);  current.bytesRead  =  buf.remaining();  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
617	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
618	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
619	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
620	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.get(buffer,  offset,  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.get(buffer,  offset,  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.get(buffer,  offset,  current.bytesRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
621	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
622	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
623	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
624	[BUG]  [BUGGY]  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
625	[BUG]  [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
626	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  /  1);  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  /  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize  /  1);	  toRead    =(int)(current.bytesRead    -    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
627	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  length  -  1);  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  length  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  length  -  1);	  toRead    =(int)(current.bytesRead    -    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
628	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current,  toRead,  csize);  current.bytesRead  =  0;  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current,  toRead,  csize);  current.bytesRead  =  0;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current,  toRead,  csize);  current.bytesRead  =  0;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
629	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  current.bytesRead  =  0;  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  current.bytesRead  =  0;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(buf,  offset,  current.bytesRead,  0,  csize);  current.bytesRead  =  0;	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
630	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
631	[BUG]  [BUGGY]  read  =(byte)current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
632	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  +  1);  if(csize  >  toRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  +  1);  if(csize  >  toRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  +  1);  if(csize  >  toRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
633	[BUG]  [BUGGY]  read  =(byte)current.bytesRead  +  1;  if(csize  >  toRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)current.bytesRead  +  1;  if(csize  >  toRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)current.bytesRead  +  1;  if(csize  >  toRead)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
634	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
635	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  bytesRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  bytesRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  bytesRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
636	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  -  current.bytesRead;  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  -  current.bytesRead;  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  -  current.bytesRead;  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
637	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  toRead  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  toRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  toRead  +  1);	  toRead    =(int)(toRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
638	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  toRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  toRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  toRead  +  1);	  toRead    =(int)(toRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
639	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  CRC32);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  CRC32);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  CRC32);	  toRead    =(int)(current.bytesRead    *    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
640	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  cmd  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  cmd  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  cmd  -  current.bytesRead);	  toRead    =(int)(csize    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
641	[BUG]  [BUGGY]  current.bytesRead  +=  csize  -  1;  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  csize  -  1;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  csize  -  1;	  current.bytesRead    +=    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
642	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_LEN);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_LEN);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_LEN);	  toRead    =(int)(current.bytesRead    *    size);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
643	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)(current.bytesRead  *  csize  -  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)(current.bytesRead  *  csize  -  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)(current.bytesRead  *  csize  -  current.bytesRead);  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
644	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
645	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    csize);    ToRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
646	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  length);  ToRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  length);  ToRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  length);  ToRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    ToRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
647	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  3);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  3);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  3);	  toRead    =(int)(current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
648	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  4);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  4);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  4);	  toRead    =(int)(current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
649	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
650	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
651	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
652	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
653	[BUG]  [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
654	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  -  current.bytesRead;	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    long    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
655	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  1);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  1);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  +  1);  ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
656	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  length);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  length);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  length);  ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
657	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  2);  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  2);  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  +  2);  ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
658	[BUG]  [BUGGY]  ||(current.bytesRead  -  toRead)  <  =  0)  {  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  toRead)  <  =  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  toRead)  <  =  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
659	[BUG]  [BUGGY]  ||(current.bytesRead  -  csize)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  csize)  <  =  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  csize)  <  =  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
660	[BUG]  [BUGGY]  ||(current.bytesRead  -  size)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  size)  <  =  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  size)  <  =  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
661	[BUG]  [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  0)  {  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  current.bytesRead)  <  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
662	[BUG]  [BUGGY]  TokenBuffer  toRead  =(int)current.bytesRead;  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(int)current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(int)current.bytesRead;	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    TokenBuffer    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
663	[BUG]  [BUGGY]  toRead  =(int)current.bytesRead  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)current.bytesRead  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)current.bytesRead  -  current.bytesRead;	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    TokenBuffer    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
664	[BUG]  [BUGGY]  toRead  =(int)current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    TokenBuffer    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	136	None	replace
665	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
666	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  csize;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
667	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
668	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
669	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  int  toRead  =(int)current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
670	[BUG]  [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  int  toRead  =(byte)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  int  toRead  =(byte)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(csize  -  current.bytesRead  +  1);  int  toRead  =(byte)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
671	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer,  0,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer,  0,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
672	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
673	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
674	[BUG]  [BUGGY]  if(csize  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
675	[BUG]  [BUGGY]  if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
676	[BUG]  [BUGGY]  if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
677	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
678	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =(byte)(current.bytesRead);  [CE]  <identifier>  expected  [FE]        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
679	[BUG]  [BUGGY]  byte[]  csize  =(byte)(current.bytesRead);  [CE]  <identifier>  expected  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  csize  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  csize  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
680	[BUG]  [BUGGY]  toRead  =(byte)current.bytesRead;  byte[]  csize  =(byte)(csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)current.bytesRead;  byte[]  csize  =(byte)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)current.bytesRead;  byte[]  csize  =(byte)(csize  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
681	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]    arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
682	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]      arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
683	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
684	[BUG]  [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
685	[BUG]  [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
686	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
687	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  offset);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  offset);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  offset);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
688	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  c  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  c  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)(current.bytesRead  *  c	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
689	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
690	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
691	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  (int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  (int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  (int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
692	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
693	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  if(toRead  >  0)  {  int  toRead  =(int)current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  if(toRead  >  0)  {  int  toRead  =(int)current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  if(toRead  >  0)  {  int  toRead  =(int)current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
694	[BUG]  [BUGGY]  read  =(byte)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
695	[BUG]  [BUGGY]  Integer  toRead  =(Integer)current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  toRead  =(Integer)current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  toRead  =(Integer)current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
696	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
697	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
698	[BUG]  [BUGGY]  Integer  toRead  =(Integer)current.bytesRead  +  1;  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  toRead  =(Integer)current.bytesRead  +  1;  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  toRead  =(Integer)current.bytesRead  +  1;  if(toRead  <  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
699	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  CRC32);  toRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  CRC32);  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  CRC32);  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
700	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  3);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  3);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  2  +  3);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
701	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  5);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  2  +  5);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  2  +  5);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
702	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  (byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  (byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  (byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
703	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  (byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  (byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  (byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
704	[BUG]  [BUGGY]  byte  toRead  =(byte)(current.bytesRead  -  csize);  (byte)(toRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =(byte)(current.bytesRead  -  csize);  (byte)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =(byte)(current.bytesRead  -  csize);  (byte)(toRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
705	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
706	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
707	[BUG]  [BUGGY]  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
708	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  }  else  {  AssertionError:  int  array  lengths  differed  =(int)current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
709	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  +  1);  }  else  {  AssertionError:  int  array  lengths  differed  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
710	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  /  size);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  /  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  /  size);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
711	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  offset  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  offset  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  offset  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
712	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
713	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
714	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
715	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
716	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
717	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
718	[BUG]  [BUGGY]  if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
719	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
720	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
721	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
722	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  toRead  =  (byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  toRead  =  (byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  toRead  =  (byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
723	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }  else  {  buf.put(buf,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }  else  {  buf.put(buf,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  toRead  =  (byte)(current.bytesRead);  }  else  {  buf.put(buf,  offset,  toRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
724	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
725	[BUG]  [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
726	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
727	[BUG]  [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
728	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  offset);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead  -  offset);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead  -  offset);	  toRead    =(int)(csize    *    current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
729	[BUG]  [BUGGY]  toRead  =(int)(current.bytesLen  *  csize  -  toRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesLen  *  csize  -  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesLen  *  csize  -  toRead);	  toRead    =(int)(toRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
730	[BUG]  [BUGGY]  toRead  =(byte)(toRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(toRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(toRead  *  csize  -  current.bytesRead);	  toRead    =(int)(toRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
731	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  current.bytesRead  *  csize);	  toRead    =(int)(toRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	140	None	replace
732	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  1);	  toRead    =(int)(current.bytesRead    *    csize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
733	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  2);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  +  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  +  2);	  toRead    =(int)(current.bytesRead    *    csize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
734	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_LEN  +  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_LEN  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_LEN  +  1);	  toRead    =(int)(current.bytesRead    *    csize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
735	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
736	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  3);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  3);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  +  3);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
737	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1L);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1L);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1L);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
738	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  4);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  4);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  +  4);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
739	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  16);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  16);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead  +  16);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
740	[BUG]  [BUGGY]  if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
741	[BUG]  [BUGGY]  if(csize  *  current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
742	[BUG]  [BUGGY]  if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
743	[BUG]  [BUGGY]  if(csize  *  current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead!=  null)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
744	[BUG]  [BUGGY]  if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead!=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  int  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
745	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  this.current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  this.current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  this.current.bytesRead);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
746	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  size);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  size);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
747	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  fileNameLen);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  fileNameLen);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  fileNameLen);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
748	[BUG]  [BUGGY]  toRead  =(int)(l  *  current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(l  *  current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(l  *  current.bytesRead  -  current.bytesRead);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
749	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  this.length);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  this.length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  this.length);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
750	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead;  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead;	  int    toRead    =(int)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
751	[BUG]  [BUGGY]  float  toRead  =(float)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  float  toRead  =(float)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	float  toRead  =(float)(current.bytesRead  -  csize);	  int    toRead    =(int)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
752	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
753	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
754	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >=  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >=  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >=  current.bytesRead)  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
755	[BUG]  [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
756	[BUG]  [BUGGY]  toRead  =(int)current.bytesRead  *  length;  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)current.bytesRead  *  length;  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)current.bytesRead  *  length;  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
757	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
758	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(csize  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
759	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
760	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  c	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
761	[BUG]  [BUGGY]  ||(current.bytesRead  -  toRead)  <  =  0);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  toRead)  <  =  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  toRead)  <  =  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
762	[BUG]  [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  =  0);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  =  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  current.bytesRead)  <  =  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
763	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
764	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
765	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  (int)(current.bytesRead  *  size  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  (int)(current.bytesRead  *  size  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size  -  current.bytesRead);  (int)(current.bytesRead  *  size  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
766	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer,  0,  toRead);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer,  0,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer,  0,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
767	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf,  0,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
768	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  toRead);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  current.bytesRead,  0,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
769	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.length);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
770	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  current.bytesRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
771	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.bytesRead,  csize);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf.bytesRead,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf.bytesRead,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
772	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.length);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
773	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
774	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
775	[BUG]  [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
776	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
777	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
778	[BUG]  [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
779	[BUG]  [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  max)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    0)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
780	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  toRead  =(int)current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  toRead  =(int)current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  toRead  =(int)current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
781	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  +  1;  toRead  =(int)current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  +  1;  toRead  =(int)current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  +  1;  toRead  =(int)current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
782	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  toRead  =(int)(current.bytesRead  *  size  +  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  toRead  =(int)(current.bytesRead  *  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  +  1);  toRead  =(int)(current.bytesRead  *  size  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
783	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  *  csize  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  *  csize  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  *  csize  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
784	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  Integer  toRead  =(int)(current.bytesRead  *  size  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  Integer  toRead  =(int)(current.bytesRead  *  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  +  1);  Integer  toRead  =(int)(current.bytesRead  *  size  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
785	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
786	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  Integer  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  Integer  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  Integer  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
787	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
788	[BUG]  [BUGGY]  Integer  toRead  =(int)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  toRead  =(int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  toRead  =(int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
789	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  2);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_EXP_32  +  2);	  toRead    =(int)(current.bytesRead    *    BYTE_EXP_32);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
790	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
791	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
792	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  toRead  =(int)current.bytesRead;  }  else  {  buf.append(csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  toRead  =(int)current.bytesRead;  }  else  {  buf.append(csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  toRead  =(int)current.bytesRead;  }  else  {  buf.append(csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
793	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  toRead  =(toReadBuffer)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  toRead  =(toReadBuffer)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  toRead  =(toReadBuffer)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
794	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
795	[BUG]  [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
796	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
797	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
798	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
799	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
800	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  (int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  (int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  +  1;  (int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
801	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  +  1;  (int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  +  1;  (int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  +  1;  (int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
802	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  (int)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  (int)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  (int)(current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
803	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize);  l  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
804	[BUG]  [BUGGY]  toRead  =(int)current.bytesRead  -  current.bytesRead;  l  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)current.bytesRead  -  current.bytesRead;  l  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)current.bytesRead  -  current.bytesRead;  l  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
805	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  l  =(toReadBuffer)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  l  =(toReadBuffer)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  l  =(toReadBuffer)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
806	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  length  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  length  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  length  +  1);	  toRead    =(int)(length    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
807	[BUG]  [BUGGY]  toRead  =(int)current.bytesRead(length  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)current.bytesRead(length  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)current.bytesRead(length  -  current.bytesRead  +  1);	  toRead    =(int)(length    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	125	None	replace
808	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
809	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
810	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
811	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
812	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(buf.length());  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
813	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  l  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  l  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  l  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
814	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  current.l  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  current.l  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  current.l  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
815	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  current.l  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  current.l  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  current.l  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
816	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  l  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  l  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  l  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
817	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  buf.length);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  buf.length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  buf.length);	  toRead    =(int)(current.bytesRead    -    buffer.length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
818	[BUG]  [BUGGY]  if(csize  >  0)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
819	[BUG]  [BUGGY]  if(csize  >  bytesRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  bytesRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  bytesRead)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
820	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    read    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
821	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  else  {  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  else  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  else  {	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    read    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
822	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
823	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
824	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
825	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(1);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
826	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
827	[BUG]  [BUGGY]  luate(current.bytesRead,  offset,  length))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  luate(current.bytesRead,  offset,  length))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	luate(current.bytesRead,  offset,  length))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
828	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  csize  =(byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  csize  =(byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  csize  =(byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
829	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  csize  =(byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  csize  =(byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  csize  =(byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
830	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  csize  =(byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  csize  =(byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  csize  =(byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
831	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  int  csize  =(byte)(current.bytesRead);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  int  csize  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize);  int  csize  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
832	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  csize  =(byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  csize  =(byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  csize  =(byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
833	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead  +  2);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead  +  2);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead  +  2);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
834	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_LEN  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  BYTE_LEN  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  BYTE_LEN  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
835	[BUG]  [BUGGY]  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
836	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  cmSize);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  cmSize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  cmSize);	  toRead    =(int)(csize    *    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
837	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  cmpEnd);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  cmpEnd);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  cmpEnd);	  toRead    =(int)(csize    *    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
838	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
839	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
840	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
841	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
842	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
843	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
844	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
845	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
846	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
847	[BUG]  [BUGGY]  luate(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  luate(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	luate(current.bytesRead,  offset,  length))  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
848	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead,  length);  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead,  length);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
849	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  max);  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  max);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  max);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
850	[BUG]  [BUGGY]  read  =(byte)current.bytesRead;  if(current.bytesRead!=  null)  {  toRead  =(byte)(current.bytesRead  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)current.bytesRead;  if(current.bytesRead!=  null)  {  toRead  =(byte)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)current.bytesRead;  if(current.bytesRead!=  null)  {  toRead  =(byte)(current.bytesRead  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
851	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
852	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
853	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
854	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
855	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  toRead  =  (byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  toRead  =  (byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)csize  -  current.bytesRead;  int  toRead  =  (byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    int    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
856	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  toRead  =  (byte)(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  toRead  =  (byte)(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  int  toRead  =  (byte)(current.bytesRead);  }	  toRead    =    (byte)(csize    -    current.bytesRead);    int    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
857	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
858	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  buffer.length  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  buffer.length  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  buffer.length  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    size    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
859	[BUG]  [BUGGY]  if(csize  *  current.bytesRead  ==  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead  ==  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead  ==  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
860	[BUG]  [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
861	[BUG]  [BUGGY]  read  =(byte)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(byte)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
862	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  l  =(byte)(current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  l  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize);  l  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
863	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  size);  l  =(byte)(current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  size);  l  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  size);  l  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
864	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  l  =(byte)(current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  l  =(byte)(current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  csize);  l  =(byte)(current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
865	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  l  =(byte)(toRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  csize);  l  =(byte)(toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  csize);  l  =(byte)(toRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
866	[BUG]  [BUGGY]  read  =(byte)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
867	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)current.bytesRead  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)current.bytesRead  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)current.bytesRead	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
868	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)current.bytesRead  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)current.bytesRead  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)current.bytesRead	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
869	[BUG]  [BUGGY]  readLen  =(byte)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(byte)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  readLen  =(byte)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(byte)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	readLen  =(byte)current.bytesRead  +  1;  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(byte)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
870	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(l  >  0)  {  for(int  csize  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
871	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(l  <  0)  {  for(int  csize  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(l  <  0)  {  for(int  csize  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(l  <  0)  {  for(int  csize  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
872	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
873	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
874	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
875	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
876	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
877	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
878	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  buf.put(buffer,  offset,  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
879	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  csize)  {  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  csize)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  csize)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
880	[BUG]  [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  length)  {  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  length)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  current.bytesRead)  <  length)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
881	[BUG]  [BUGGY]  ||(current.bytesRead  -  offset)  <  toRead)  {  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  offset)  <  toRead)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  offset)  <  toRead)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
882	[BUG]  [BUGGY]  float  toRead  =(float)current.bytesRead;  int  toRead  =(float)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  float  toRead  =(float)current.bytesRead;  int  toRead  =(float)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	float  toRead  =(float)current.bytesRead;  int  toRead  =(float)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
883	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
884	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  size);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
885	[BUG]  [BUGGY]  if(csize  *  current.bytesRead  >=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead  >=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead  >=  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
886	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
887	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
888	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRemaining);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.bytesRemaining);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.bytesRemaining);	  toRead    =(int)(current.bytesRead    *    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
889	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  }	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	83	None	replace
890	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =  (byte)(csize  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  }	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	83	None	replace
891	[BUG]  [BUGGY]  int  toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;  [CE]  cannot  find  symbol  csize  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(byte)(current.bytesRead  -  csize);  byte[]  csize  =  current.bytesRead;	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  cannot  find  symbol  csize	83	None	replace
892	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  cannot  find  symbol  csize  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  cannot  find  symbol  csize	62	None	replace
893	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  cannot  find  symbol  csize  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  cannot  find  symbol  csize	62	None	replace
894	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
895	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >=  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >=  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >=  current.bytesRead)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
896	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  size)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  size)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  <  size)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
897	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  +  1);	  toRead    =(byte)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
898	[BUG]  [BUGGY]  luate(current.bytesRead,  csize))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  luate(current.bytesRead,  csize))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	luate(current.bytesRead,  csize))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
899	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
900	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
901	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag?  inf.get(csize):  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag?  inf.get(csize):  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag?  inf.get(csize):  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
902	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.off);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.off);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.off);	  toRead    =(int)(current.bytesRead    -    this.off);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
903	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
904	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags))  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
905	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flags)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
906	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(current,  hasUTF8Flag)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
907	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.max);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.max);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.max);	  toRead    =(int)(current.bytesRead    -    this.max);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
908	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  this.max);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  this.max);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  this.max);	  toRead    =(int)(current.bytesRead    -    this.max);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
909	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  offset);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  offset);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  offset);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
910	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  size);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  size);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
911	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  3);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  3);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead  +  3);	  toRead    =(int)(current.bytesRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
912	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  16);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  16);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead  +  16);	  toRead    =(int)(current.bytesRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	123	None	replace
913	[BUG]  [BUGGY]  current.bytesRead  +=  csize  +  1;  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  csize  +  1;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  csize  +  1;	          current.bytesRead    +=    csize;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
914	[BUG]  [BUGGY]  float  toRead  =(float)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  float  toRead  =(float)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	float  toRead  =(float)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
915	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
916	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  int  toRead  =(int)current.bytesRead  -  csize;  }  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  int  toRead  =(int)current.bytesRead  -  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  int  toRead  =(int)current.bytesRead  -  csize;  }	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
917	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
918	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
919	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  int  toRead  =(int)current.bytesRead  -  csize;  }  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  int  toRead  =(int)current.bytesRead  -  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  int  toRead  =(int)current.bytesRead  -  csize;  }	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
920	[BUG]  [BUGGY]  current.bytesRead  =  lsize  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  lsize  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  lsize  -  current.bytesRead;	          current.bytesRead    =    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
921	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  read  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    read    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
922	[BUG]  [BUGGY]  read  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    read    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
923	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
924	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
925	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  toRead  =(int)current.bytesRead  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  toRead  =(int)current.bytesRead  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  if(toRead  >  0)  {  toRead  =(int)current.bytesRead	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
926	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  csize)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  csize)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  if(toRead  >  csize)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
927	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
928	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    max)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
929	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    max)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
930	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    max)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
931	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
932	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
933	[BUG]  [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  current.bytesRead)  {  toRead  =(int)current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
934	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]    arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    ToRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
935	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  Token  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]      arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  Token  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    Token  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
936	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]        arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  Integer  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    Integer  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
937	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]          arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    if(csize  >  max)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  <identifier>  expected	6	None	add
938	[BUG]  [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
939	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
940	[BUG]  [BUGGY]  if(current.csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.csize  >  0)  {  toRead  =(int)current.bytesRead;  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
941	[BUG]  [BUGGY]  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
942	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  offset  +  1);  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  offset  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  offset  +  1);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
943	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  toRead);  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize,  toRead);	  toRead    =(int)(current.bytesRead    -    csize,    length);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
944	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  +  1);  if(l  <  length)  {  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
945	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
946	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  +  1);  if(csize  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  toRead  =(int)(current.bytesRead  +  1	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
947	[BUG]  [BUGGY]  ||(csize  -  current.bytesRead)  <  0);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(csize  -  current.bytesRead)  <  0);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(csize  -  current.bytesRead)  <  0);	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
948	[BUG]  [BUGGY]  ||(current.bytesRead  <  =  0));  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  <  =  0));  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  <  =  0));	          ||(csize    -    current.bytesRead)    <    =    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
949	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.buffer.length);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  this.buffer.length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.buffer.length);	  toRead    =(int)(current.bytesRead    -    buffer.length);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
950	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  csize  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
951	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  *  csize  -  1);  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  csize  *  csize  -  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  csize  *  csize  -  1);	  toRead    =(int)(current.bytesRead    -    csize    -    1);    	non-compiled	[CE]  <identifier>  expected	135	None	replace
952	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  +  1);  Integer  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
953	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  +  1);  Integer  toRead  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    Integer    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
954	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  this.csize);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  this.csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  this.csize);	  int    toRead    =(int)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
955	[BUG]  [BUGGY]  int  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  *  current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
956	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  length  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    int    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
957	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
958	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
959	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
960	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)current.bytesRead  *  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)current.bytesRead  *  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)current.bytesRead  *	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
961	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)current.bytesRead  *  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)current.bytesRead  *  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  toRead  =(int)current.bytesRead  *	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
962	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  length);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  length);	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
963	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  length);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  +  length);	  toRead    =(int)(current.bytesRead    *    csize);    int    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
964	[BUG]  [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
965	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.offset);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  buffer.offset);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  buffer.offset);	  toRead    =(int)(current.bytesRead    -    offset);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
966	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  this.offset);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  this.offset);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  this.offset);	  toRead    =(int)(current.bytesRead    -    offset);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
967	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)current.bytesRead  -  csize;  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)current.bytesRead  -  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)current.bytesRead  -  csize;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
968	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(csize  >  0)  {  int  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
969	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(toRead  >  0)  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
970	[BUG]  [BUGGY]  Token  l  =(Token)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Token  l  =(Token)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Token  l  =(Token)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
971	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    l    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
972	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.offset);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.offset);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.offset);	  toRead    =(int)(current.bytesRead    -    length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
973	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  SHORT_BUF);  toRead  =(int)(current.bytesRead  *  SHORT_BUF);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  SHORT_BUF);  toRead  =(int)(current.bytesRead  *  SHORT_BUF);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  SHORT_BUF);  toRead  =(int)(current.bytesRead  *  SHORT_BUF);	  toRead    =(int)(current.bytesRead    *    csize);    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
974	[BUG]  [BUGGY]  toRead  =(byte)(toRead  *  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(toRead  *  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(toRead  *  current.bytesRead  +  1);	  toRead    =(byte)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
975	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
976	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
977	[BUG]  [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    >=    null)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
978	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize);  current.bytesRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
979	[BUG]  [BUGGY]  Token  l  =(Token)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Token  l  =(Token)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Token  l  =(Token)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    l    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
980	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.size,  toRead);  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  current.size,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  current.size,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
981	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  current.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  current.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf,  current.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
982	[BUG]  [BUGGY]  System.arraycopy(csize,  buffer,  offset,  current.bytesRead,  toRead);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(csize,  buffer,  offset,  current.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(csize,  buffer,  offset,  current.bytesRead,  toRead);	          System.arraycopy(buf,    offset,    csize,    current.bytesRead,    toRead);    	non-compiled	[CE]  <identifier>  expected	92	None	replace
983	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.size  +  1);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.size  +  1);	  toRead    =(int)(current.bytesRead    *    csize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
984	[BUG]  [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
985	[BUG]  [BUGGY]  if(length  <  =  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  <  =  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  <  =  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
986	[BUG]  [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.get(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
987	[BUG]  [BUGGY]  if(length  >  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
988	[BUG]  [BUGGY]  if(length  ==  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  ==  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  ==  0)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
989	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
990	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
991	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
992	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  <  =  csize)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.get(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
993	[BUG]  [BUGGY]  ||(csize  -  current.bytesRead)  <  0)  {  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(csize  -  current.bytesRead)  <  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(csize  -  current.bytesRead)  <  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
994	[BUG]  [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  =  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  current.bytesRead)  <  =  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
995	[BUG]  [BUGGY]  ||(current.bytesRead)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead)  <  =  0)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead)  <  =  0)  {	          ||(csize    -    current.bytesRead)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
996	[BUG]  [BUGGY]  current.bytesRead  =  lfh  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  lfh  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  lfh  -  current.bytesRead;	          current.bytesRead    =    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
997	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  size  +  1);  l  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
998	[BUG]  [BUGGY]  int  l  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  l  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  l  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    l    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
999	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
1000	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
1001	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
1002	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
1003	[BUG]  [BUGGY]  AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	AssertionError:  int  array  lengths  differed  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    int    array    lengths    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	99	None	replace
1004	[BUG]  [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  read  =(int)(current.bytesRead  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    read    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
1005	[BUG]  [BUGGY]  ToRead  =(int)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ToRead  =(int)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	ToRead  =(int)(current.bytesRead  *  csize);	  toRead    =(int)(current.bytesRead    *    csize);    ToRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
1006	[BUG]  [BUGGY]  byte[]  csize  =(byte)(toRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  csize  =(byte)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  csize  =(byte)(toRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1007	[BUG]  [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  -  toRead);  [CE]  <identifier>  expected  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  -  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  csize  =(byte)(current.bytesRead  -  toRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1008	[BUG]  [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  csize  =(byte)(current.bytesRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1009	[BUG]  [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte[]  csize  =(byte)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte[]  csize  =(byte)(current.bytesRead  *  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	113	None	replace
1010	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  toRead)  {  break;  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  toRead)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  toRead)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
1011	[BUG]  [BUGGY]  ||(current.bytesRead)  <  toRead)  {  break;  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead)  <  toRead)  {  break;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead)  <  toRead)  {  break;	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
1012	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  csize)  {  break;  }  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  csize)  {  break;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  csize)  {  break;  }	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
1013	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  size)  {  break;  }  [CE]  <identifier>  expected  [FE]                            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  size)  {  break;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  size)  {  break;  }	          ||(csize    -    current.bytesRead)    <    toRead)    {    break;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
1014	[BUG]  [BUGGY]  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
1015	[BUG]  [BUGGY]  int  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  byte[]  csize  =  current.bytesRead;	  toRead    =    (byte)(csize    -    current.bytesRead);    byte[]    csize    =    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
1016	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(byte)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
1017	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)current.byte  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)current.byte  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(i  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  current.bytesRead  =(int)current.byte	  toRead    =(int)(current.bytesRead    *    csize);    if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    current.bytesRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
1018	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  length);  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buf,  0,  length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buf,  0,  length);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    length);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
1019	[BUG]  [BUGGY]  toRead  =(int)(csize  /  size  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  /  size  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  /  size  +  1);	  toRead    =(int)(current.bytesRead    *    size    +    1);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
1020	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]    arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
1021	[BUG]  [BUGGY]  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]      arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	csize  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
1022	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]        arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    csize    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
1023	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(len  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(len  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
1024	[BUG]  [BUGGY]  read()  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read()  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read()  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
1025	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
1026	[BUG]  [BUGGY]  int  csize  =  0;  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  csize  =  0;  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  csize  =  0;  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
1027	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
1028	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  csize;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  csize;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  for(int  l  =  0;  l  <  csize;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
1029	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.setLength(0);  }	          if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(0);    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
1030	[BUG]  [BUGGY]  int  csize  =(byte)(toRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  csize  =(byte)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  csize  =(byte)(toRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
1031	[BUG]  [BUGGY]  Integer  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  csize  =(int)(current.bytesRead  -  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    csize    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
1032	[BUG]  [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    ToRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
1033	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  ToRead  =(int)(current.bytesRead  -  csize);	  toRead    =(int)(current.bytesRead    -    csize);    ToRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
1034	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
1035	[BUG]  [BUGGY]  current.bytesRead  +=  length  -  current.bytesRead;  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  length  -  current.bytesRead;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  length  -  current.bytesRead;	  current.bytesRead    +=    csize    -    current.bytesRead;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
1036	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
1037	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
1038	[BUG]  [BUGGY]  int  toRead  =(int)(length  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(length  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(length  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
1039	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1040	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  current.bytesRead  =  0;  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  current.bytesRead  =  0;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  current.bytesRead  =  0;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1041	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1042	[BUG]  [BUGGY]  if(csize  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  0;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    0;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
1043	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  ToRead  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
1044	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead);  ToRead  =(int)(current.bytesRead  *  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    ToRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
1045	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1046	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1047	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1048	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(current.bytesRead);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1049	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  +  1);  }  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  +  1);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1050	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  +  length);  }  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  +  length);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.setLength(buf.remaining()  +  length);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    toRead;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
1051	[BUG]  [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    read    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
1052	[BUG]  [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  else  {  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  else  {  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  else  {  read  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    read    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
1053	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    toRead  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        toRead    =(int)(current.bytesRead    -    csize);    if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  <identifier>  expected	2	None	add
1054	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
1055	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  current.bytesRead)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
1056	[BUG]  [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  if(csize  >  toRead)  {  int  toRead  =(byte)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  if(csize  >  toRead)  {  int  toRead  =(byte)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(csize  -  current.bytesRead  +  1);  if(csize  >  toRead)  {  int  toRead  =(byte)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
1057	[BUG]  [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(csize  -  current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read  =(byte)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(csize  -  current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read  =(byte)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(byte)(csize  -  current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
1058	[BUG]  [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  toRead)  {  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  current.bytesRead)  <  toRead)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  current.bytesRead)  <  toRead)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
1059	[BUG]  [BUGGY]  ||(toRead  -  current.bytesRead)  <  toRead)  {  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(toRead  -  current.bytesRead)  <  toRead)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(toRead  -  current.bytesRead)  <  toRead)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
1060	[BUG]  [BUGGY]  ||(current.bytesRead  -  toRead)  <  length)  {  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  toRead)  <  length)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  toRead)  <  length)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
1061	[BUG]  [BUGGY]  ||(current.bytesRead  -  toRead)  <  size)  {  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  ||(current.bytesRead  -  toRead)  <  size)  {  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	||(current.bytesRead  -  toRead)  <  size)  {	          ||(csize    -    current.bytesRead)    <    toRead)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
1062	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
1063	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize);  TokenBuffer  toRead  =(int)current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    *    csize);    	non-compiled	[CE]  <identifier>  expected	128	None	replace
1064	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
1065	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  int  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
1066	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  toRead  =(int)(current.bytesRead  +  1);  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  toRead  =(int)(current.bytesRead  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(toRead  >  0)  {  toRead  =(int)(current.bytesRead  +  1);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
1067	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]    arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }	  	non-compiled	[CE]  <identifier>  expected	6	None	add
1068	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]      arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  current.bytesRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    current.bytesRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
1069	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  read  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]        arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  read  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    read  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);	  	non-compiled	[CE]  <identifier>  expected	6	None	add
1070	[BUG]  [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  else  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]          arrays  first  differed    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead    =(int)(current.bytesRead    -    csize);    csize  =(int)(current.bytesRead  -  csize);  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  else  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead        =(int)(current.bytesRead        -        csize);        csize    =(int)(current.bytesRead    -    csize);    if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  csize  =(int)(current.bytesRead  -  csize);  }  else  {  buf.reset();  }	  	non-compiled	[CE]  <identifier>  expected	6	None	add
1071	[BUG]  [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  toRead  =(int)(current.bytesRead  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
1072	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  toRead  =(int)(toRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  toRead  =(int)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)current.bytesRead;  toRead  =(int)(toRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
1073	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  -  current.bytesRead;  toRead  =(int)(toRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  -  current.bytesRead;  toRead  =(int)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  -  current.bytesRead;  toRead  =(int)(toRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    toRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
1074	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
1075	[BUG]  [BUGGY]  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
1076	[BUG]  [BUGGY]  if(csize  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
1077	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  <  =  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    <    =    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
1078	[BUG]  [BUGGY]  if(current.bytesRead  >  csize)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  >  csize)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  >  csize)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  0,  toRead);  }	          if(csize    >    max)    {    System.arraycopy(buffer,    offset,    current.bytesRead,    0,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
1079	[BUG]  [BUGGY]  if(current.bytesRead  <  length)  {  toRead  =(int)csize;  if(current.bytesRead  >  csize)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  length)  {  toRead  =(int)csize;  if(current.bytesRead  >  csize)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  length)  {  toRead  =(int)csize;  if(current.bytesRead  >  csize)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
1080	[BUG]  [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)csize;  if(current.bytesRead  >  csize)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)csize;  if(current.bytesRead  >  csize)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  length)  {  toRead  =(int)csize;  if(current.bytesRead  >  csize)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
1081	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
1082	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(current.bytesRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(current.bytesRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  if(current.bytesRead  >  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
1083	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(current.bytesRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                    IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(current.bytesRead  >  0)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize;  if(current.bytesRead  >  0)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
1084	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
1085	[BUG]  [BUGGY]  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  toRead)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
1086	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    >    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
1087	[BUG]  [BUGGY]  float  toRead  =(float)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  float  toRead  =(float)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	float  toRead  =(float)(current.bytesRead  -  csize);  if(toRead  <  0)  {  int  toRead  =(float)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(csize    >    0)    {    int    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
1088	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1089	[BUG]  [BUGGY]  if(current.bytesRead  <  =  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1090	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1091	[BUG]  [BUGGY]  int  csize  =  0;  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  csize  =  0;  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  csize  =  0;  for(int  l  =  0;  l  <  length;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1092	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  csize;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  csize;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  for(int  l  =  0;  l  <  csize;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1093	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1094	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.remaining();  }  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(length  >  0)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(length  >  0)  {  for(int  l  =  0;  l  <  toRead;  ++l)  {  buf.remaining();  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.remaining();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
1095	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  current.bytesRead  -  current.bytesRead);	  toRead    =(int)(csize    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
1096	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  cmsize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  cmsize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  cmsize  -  current.bytesRead);	  toRead    =(int)(csize    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	139	None	replace
1097	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.size  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.size  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.size  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
1098	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  csize  /  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  csize  /  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  csize  /  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    /    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
1099	[BUG]  [BUGGY]  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
1100	[BUG]  [BUGGY]  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  csize)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
1101	[BUG]  [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
1102	[BUG]  [BUGGY]  (byte)(csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  (byte)(csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	(byte)(csize  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1103	[BUG]  [BUGGY]  byte  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  (byte)(toRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  byte  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  (byte)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	byte  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  (byte)(toRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1104	[BUG]  [BUGGY]  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  (byte)(toRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  (byte)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  (byte)(toRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1105	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(current.bytesRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1106	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  if(toRead  >=  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1107	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
1108	[BUG]  [BUGGY]  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
1109	[BUG]  [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  current.bytesRead);  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    >=    csize)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
1110	[BUG]  [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  length)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1111	[BUG]  [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead!=  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1112	[BUG]  [BUGGY]  if(current.bytesRead  <  length)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  length)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  length)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1113	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  toRead  =(int)csize  -  current.bytesRead  +  1;  if(csize  >  0)  {  int  toRead  =(int)csize  -  current.bytesRead  +  1;  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    0)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
1114	[BUG]  [BUGGY]  toRead  =(int)(length  *  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(length  *  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(length  *  current.bytesRead);	  toRead    =(int)(csize    *    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
1115	[BUG]  [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
1116	[BUG]  [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(csize  -  current.bytesRead  +  1);  if(csize  >  current.bytesRead)  {  int  toRead  =(int)(current.bytesRead  +  1);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(csize    -    current.bytesRead    +    1);    if(csize    >    current.bytesRead)    {    int    toRead    =(int)(csize    -    current.bytesRead    +    1);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
1117	[BUG]  [BUGGY]  l  =(byte)(toRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(byte)(toRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(byte)(toRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
1118	[BUG]  [BUGGY]  l  =(byte)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  l  =(byte)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	l  =(byte)(current.bytesRead  *  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
1119	[BUG]  [BUGGY]  L  =(byte)(current.bytesRead  -  csize);  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  L  =(byte)(current.bytesRead  -  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	L  =(byte)(current.bytesRead  -  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    l    =(byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
1120	[BUG]  [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
1121	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead;  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
1122	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)current.bytesRead;  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
1123	[BUG]  [BUGGY]  toRead  =(int)(this.off  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(this.off  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(this.off  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    this.off);    	non-compiled	[CE]  <identifier>  expected	143	None	replace
1124	[BUG]  [BUGGY]  int  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    l    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
1125	[BUG]  [BUGGY]  Integer  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  l  =(int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    l    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
1126	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  current.bytesRead  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  current.bytesRead  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
1127	[BUG]  [BUGGY]  toRead  =(int)(toRead  *  csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  *  csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  *  csize  -  current.bytesRead  +  1);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
1128	[BUG]  [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]    IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
1129	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]      IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
1130	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.setLength(0);  }  [CE]  <identifier>  expected  [FE]        IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.setLength(0);  }	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
1131	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException    [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.reset();  }	  toRead    =(int)(current.bytesRead    -    csize);    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
1132	[BUG]  [BUGGY]  int  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =  (byte)(current.bytesRead  -  current.bytesRead);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
1133	[BUG]  [BUGGY]  int  toRead  =  (byte)(current.bytesRead  *  csize);  [CE]  <identifier>  expected  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =  (byte)(current.bytesRead  *  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =  (byte)(current.bytesRead  *  csize);	  toRead    =    (byte)(csize    -    current.bytesRead);    int    toRead    =    (byte)(csize    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
1134	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  *  csize;  if(current.bytesRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
1135	[BUG]  [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  *  csize;  if(toRead  ==  current.bytesRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  *  csize;  if(toRead  ==  current.bytesRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	TokenBuffer  toRead  =(TokenBuffer)current.bytesRead  *  csize;  if(toRead  ==  current.bytesRead)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
1136	[BUG]  [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
1137	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
1138	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
1139	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
1140	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
1141	[BUG]  [BUGGY]  if(current.bytesRead  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
1142	[BUG]  [BUGGY]  if(current.bytesRead  <  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  0)  {  for(int  i  =  0;  i  <  csize;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
1143	[BUG]  [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.reset();  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.reset();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
1144	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead);  l  =(int)(current.bytesRead  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    l    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
1145	[BUG]  [BUGGY]  toRead  =(byte)(length  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(length  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(length  -  current.bytesRead);	  toRead    =(byte)(toRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
1146	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  offset,  toRead);  [CE]  <identifier>  expected  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  offset,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  buffer,  offset,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
1147	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  0,  toRead);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  0,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  buffer,  0,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
1148	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  toRead);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  offset,  buffer.length,  0,  toRead);	          System.arraycopy(buf,    offset,    current.bytesRead,    0,    toRead);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
1149	[BUG]  [BUGGY]  if(csize  *  current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [CE]  <identifier>  expected  [FE]                        arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead!=  csize)  {  toRead  =(int)(current.bytesRead  *  csize);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead!=    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
1150	[BUG]  [BUGGY]  toRead  =(int)(csize  *  2  +  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  *  2  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  *  2  +  1);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
1151	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  /  2  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  /  2  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  /  2  +  1);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
1152	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  2  /  1);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  2  /  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  2  /  1);	  toRead    =(int)(current.bytesRead    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
1153	[BUG]  [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1154	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  TokenBuffer  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    TokenBuffer    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
1155	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  CRC32_LEN  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  CRC32_LEN  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  CRC32_LEN  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    size    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
1156	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]                      IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  (int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    (int)(current.bytesRead    -    csize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
1157	[BUG]  [BUGGY]  toRead  =(int)(this.max  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(this.max  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(this.max  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    -    this.max);    	non-compiled	[CE]  <identifier>  expected	107	None	replace
1158	[BUG]  [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [CE]  <identifier>  expected  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  =  0)  {  toRead  =(int)(current.bytesRead  -  current.bytesRead);  bytesRead  =(int)(current.bytesRead  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    bytesRead    =(int)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	138	None	replace
1159	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  offset,  csize);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  offset,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  buffer,  offset,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
1160	[BUG]  [BUGGY]  System.arraycopy(csize,  buffer,  current.bytesRead,  csize);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(csize,  buffer,  current.bytesRead,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(csize,  buffer,  current.bytesRead,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
1161	[BUG]  [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  csize);  [CE]  <identifier>  expected  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  System.arraycopy(current.bytesRead,  buffer,  csize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	System.arraycopy(current.bytesRead,  buffer,  csize);	          System.arraycopy(buf,    offset,    current.bytesRead,    csize);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
1162	[BUG]  [BUGGY]  toRead  =(int)(csize  /  current.bytesRead  -  current.bytesRead);  [CE]  <identifier>  expected  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  /  current.bytesRead  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  /  current.bytesRead  -  current.bytesRead);	  toRead    =(int)(length    *    current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	141	None	replace
1163	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1164	[BUG]  [BUGGY]  if(csize  *  current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  *  current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  *  current.bytesRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1165	[BUG]  [BUGGY]  if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  illegal  start  of  expression  [FE]                    arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  <  =  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1166	[BUG]  [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead  [CE]  illegal  start  of  expression  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  ==  0)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  if(toRead  <  =  length)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1167	[BUG]  [BUGGY]  toRead  =(byte)(current.bytesRead  -  this.current.bytesRead);  [CE]  <identifier>  expected  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(byte)(current.bytesRead  -  this.current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(byte)(current.bytesRead  -  this.current.bytesRead);	  toRead    =(byte)(current.bytesRead    -    current.bytesRead);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
1168	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  not  a  statement	64	None	replace
1169	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  (int)(current.bytesRead  *  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  csize  +  1);  (int)(current.bytesRead  *  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  csize  +  1);  (int)(current.bytesRead  *  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
1170	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]                          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  *  current.bytesRead  +  1);  (int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    (int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
1171	[BUG]  [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  int  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	int  toRead  =(int)(current.bytesRead  -  csize);  if(current.bytesRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    <    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
1172	[BUG]  [BUGGY]  if(toRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  <identifier>  expected  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(toRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(toRead  <  csize)  {  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    if(current.bytesRead    <    csize)    {    toRead    =(int)(current.bytesRead    -    csize);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
1173	[BUG]  [BUGGY]  current.bytesRead  +=  this.size;  [CE]  <identifier>  expected  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  +=  this.size;  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  +=  this.size;	          current.bytesRead    +=    csize;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
1174	[BUG]  [BUGGY]  java.lang.AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  java.lang.AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	java.lang.AssertionError:  current.bytesRead  differed  =(int)(csize  -  current.bytesRead  +  1);	  toRead    =(int)(csize    -    current.bytesRead    +    1);    java.lang.AssertionError:    current.bytesRead    differed    =(int)(csize    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
1175	[BUG]  [BUGGY]  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  <  length)  {  toRead  =(int)current.bytesRead;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    current.bytesRead);    if(current.bytesRead    <    =    length)    {    toRead    =(int)(current.bytesRead    -    current.bytesRead);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
1176	[BUG]  [BUGGY]  toRead  =(int)(toRead  -  current.bytesRead  *  1);  [CE]  <identifier>  expected  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(toRead  -  current.bytesRead  *  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(toRead  -  current.bytesRead  *  1);	  toRead    =(int)(toRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
1177	[BUG]  [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1));  [CE]  <identifier>  expected  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(csize  -  current.bytesRead  +  1));  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(csize  -  current.bytesRead  +  1));	  toRead    =(int)(toRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  <identifier>  expected	124	None	replace
1178	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.offset);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  length  -  current.offset);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  length  -  current.offset);	  toRead    =(int)(current.bytesRead    *    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1179	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.length  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.length  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.length  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    length    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
1180	[BUG]  [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  csize)  {  toRead  =(int)current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1181	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  <identifier>  expected  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize;  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
1182	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1183	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  *  csize);  }  else  {  buf.put(buffer,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    *    csize);    if(current.bytesRead    ==    csize)    {    toRead    =(int)(current.bytesRead    *    csize);    }    else    {    buf.put(buffer,    offset,    toRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
1184	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  length  *  2  +  1);  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  length  *  2  +  1);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  length  *  2  +  1);	  toRead    =(int)(current.bytesRead    -    size    +    1);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
1185	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.maximumSize);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.maximumSize);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.maximumSize);	  toRead    =(int)(current.bytesRead    *    size);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
1186	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  this.current.bytesRead);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  this.current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  this.current.bytesRead);	  toRead    =(int)(current.bytesRead    *    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1187	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  current.size);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  current.size);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  current.size);	  toRead    =(int)(current.bytesRead    *    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
1188	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  buf.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1189	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer.setLength(buf.remaining());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer.setLength(buf.remaining());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  toRead;  ++i)  {  buffer.setLength(buf.remaining());  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1190	[BUG]  [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining()  +  1);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining()  +  1);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  for(int  i  =  0;  i  <  current.bytesRead;  ++i)  {  buf.setLength(buf.remaining()  +  1);  }	  if(csize    >    0)    {    for(int    i    =    0;    i    <    csize;    ++i)    {    buf.setLength(buf.remaining());    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1191	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  toRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  toRead);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1192	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  buffer.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  *  csize,  buffer.length);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  *  csize,  buffer.length);	  toRead    =(int)(current.bytesRead    *    csize,    length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1193	[BUG]  [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  >=  csize)  {  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  }	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1194	[BUG]  [BUGGY]  Integer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  Integer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	Integer  toRead  =(int)(current.bytesRead  *  csize  -  current.bytesRead);  (int)(current.bytesRead  *  csize  -  current.bytesRead);	  toRead    =(int)(current.bytesRead    *    csize    -    current.bytesRead);    (int)(current.bytesRead    *    csize    -    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1195	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  [CE]  illegal  start  of  type  [FE]        IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
1196	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]          IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.remaining();  }	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
1197	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.setLength(0);  }  [CE]  illegal  start  of  type  [FE]            IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.setLength(0);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.setLength(0);  }	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
1198	[BUG]  [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buf,  offset,  toRead);  }  [CE]  illegal  start  of  type  [FE]              IndexOutOfBoundsException      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buf,  offset,  toRead);  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(csize  >  0)  {  toRead  =(int)(current.bytesRead  -  csize);  int  toRead  =(int)(current.bytesRead  -  csize);  }  else  {  buf.put(buf,  offset,  toRead);  }	  toRead    =(int)(current.bytesRead    -    csize);    int    toRead    =(int)(current.bytesRead    -    csize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
1199	[BUG]  [BUGGY]  read()  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  read()  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	read()  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1200	[BUG]  [BUGGY]  while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1201	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1202	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead)  {  buf.setLength(buf.length());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1203	[BUG]  [BUGGY]  while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  size;  ++l)  {  buf.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1204	[BUG]  [BUGGY]  while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buffer.setLength(buf.length());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buffer.setLength(buf.length());  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	while(current.bytesRead  <  length)  {  for(int  l  =  0;  l  <  length;  ++l)  {  buffer.setLength(buf.length());  }	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1205	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead);  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead);  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	allowStoredEntriesWithDataDescriptor(csize,  current.bytesRead,  toRead);	  if(csize    >    0)    {    for(int    l    =    0;    l    <    length;    ++l)    {    buf.setLength(buf.length());    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
1206	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  length;  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  length;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  length;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1207	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  length;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  length;  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  +=  length;  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    +=    csize;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1208	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buffer,  offset,  current.bytesRead,  toRead,  csize);  current.bytesRead  =  buf.remaining();  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
1209	[BUG]  [BUGGY]  current.bytesRead  =  buf.remaining();  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  current.bytesRead  =  buf.remaining();  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	current.bytesRead  =  buf.remaining();	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
1210	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  toRead,  length);  current.bytesRead  =  buf.remaining();  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
1211	[BUG]  [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  current.bytesRead  =  buf.remaining();  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  current.bytesRead  =  buf.remaining();  }  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	if(current.bytesRead  ==  null)  {  System.arraycopy(buf,  offset,  current.bytesRead,  0,  toRead);  current.bytesRead  =  buf.remaining();  }	          if(current.bytesRead    ==    null)    {    System.arraycopy(buf,    offset,    buffer,    toRead,    csize);    current.bytesRead    =    buf.remaining();    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
1212	[BUG]  [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1));  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  array  lengths  differed      [CONTEXT]      }  buf.limit(l);  count(buf.limit());  current.bytesReadFromStream  +=  buf.limit();  }  int  toRead  =  Math.min(buf.remaining(),  length);  if  ((csize  -  current.bytesRead)  <  toRead)  {        [BUGGY]  toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1));  [BUGGY]      }  buf.get(buffer,  offset,  toRead);  current.bytesRead  +=  toRead;  return  toRead;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	431	431	1	replace	toRead  =(int)(current.bytesRead  -  current.bytesRead  +  1));	  toRead    =(int)(current.bytesRead    -    current.bytesRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
