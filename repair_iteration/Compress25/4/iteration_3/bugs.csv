bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
2	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.read(buffer,  offset,  length);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
3	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset,  length  +  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset,  length  +  1);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
4	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset,  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset,  length,  current.length);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
5	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset,  length,  buffer.length);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
6	[BUG]  [BUGGY]  int  csize  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.in.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.in.read(buffer,  offset,  length);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
7	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
8	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
9	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
10	[BUG]  [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
11	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.lastEntry.getSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getSize()  +  1;	  int    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getLength();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.lastEntry.getLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getLength();	  int    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getSize()  +  length;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.lastEntry.getSize()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getSize()  +  length;	  int    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  int  csize  =  current.currentEntry.getSize();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.currentEntry.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.currentEntry.getSize();	  int    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  /  2;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  /  2;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  /  2;	  int    csize    =    current.entry.getSize()    *    2;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
16	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  *  4;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  *  4;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  *  4;	  int    csize    =    current.entry.getSize()    *    2;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
17	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  *  2  +  length;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  *  2  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  *  2  +  length;	  int    csize    =    current.entry.getSize()    *    2;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
18	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  2;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  +  2;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  +  2;	  int    csize    =    current.entry.getSize()    *    2;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
19	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getValue();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getValue();	  int    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
20	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getValue();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.lastEntry.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getValue();	  int    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
21	[BUG]  [BUGGY]  int  csize  =  current.entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getValue()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getValue()  +  1;	  int    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
22	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.read(buffer,  offset,  length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
23	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  offset,  length,  current.bytesRead);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
24	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  offset,  length,  current.length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
25	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length  +  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  offset,  length  +  1);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
26	[BUG]  [BUGGY]  Integer  csize  =  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.read(buffer,  offset,  length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
28	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
29	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
30	[BUG]  [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
31	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.fileNameLen);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.fileNameLen);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
32	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getValue();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getValue();	  long    csize    =    current.bytesRead.getValue();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
33	[BUG]  [BUGGY]  short  csize  =  current.bytesRead.getValue();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.bytesRead.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.bytesRead.getValue();	  long    csize    =    current.bytesRead.getValue();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
34	[BUG]  [BUGGY]  Long  csize  =  current.entry.getLength();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.entry.getLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getLength();	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
35	[BUG]  [BUGGY]  Long  csize  =  current.entry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.entry.getSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getSize()  +  1;	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
36	[BUG]  [BUGGY]  Long  csize  =  current.lastEntry.getSize();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.lastEntry.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.lastEntry.getSize();	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
37	[BUG]  [BUGGY]  Long  csize  =  current.entry.getLongValue();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.entry.getLongValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getLongValue();	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
38	[BUG]  [BUGGY]  Long  csize  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.entry.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getValue();	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
39	[BUG]  [BUGGY]  in.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.read(buffer,  offset,  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length,  current.length);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
40	[BUG]  [BUGGY]  in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.read(buffer,  offset,  length  -  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length  -  1);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
41	[BUG]  [BUGGY]  in.read(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.read(buffer,  offset,  length,  csize);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length,  csize);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
42	[BUG]  [BUGGY]  in.readFully(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.readFully(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.readFully(buffer,  offset,  length);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
43	[BUG]  [BUGGY]  in.read(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.read(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length,  current.bytesRead);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
44	[BUG]  [BUGGY]  in.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length,  buffer.length);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
45	[BUG]  [BUGGY]  in.read(buffer,  offset,  length,  current.size);  [CE]  illegal  start  of  type  [FE]                                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.read(buffer,  offset,  length,  current.size);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length,  current.size);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
46	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getSize()  +  1;	  Integer    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  Integer  csize  =  current.current.entry.getSize();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.entry.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.entry.getSize();	  Integer    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getSize()  *  2  +  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getSize()  *  2  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getSize()  *  2  +  1;	  Integer    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getSize()  *  1;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getSize()  *  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getSize()  *  1;	  Integer    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getSize()  +  1;	  Integer    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getLength();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getLength();	  Integer    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  Integer  csize  =  current.currentEntry.getSize();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.currentEntry.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.currentEntry.getSize();	  Integer    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getMask();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getMask();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getMask();	  Integer    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getKey();  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getKey();	  Integer    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getKey();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getKey();	  long    csize    =    current.bytesRead.getKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
56	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getKey();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getKey();	  long    csize    =    current.bytesRead.getKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  buffer.length);	  Integer    current    =    entryEncoding.readInt(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
58	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  -  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  -  1);	  Integer    current    =    entryEncoding.readInt(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
59	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  csize);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  csize);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  csize);	  Integer    current    =    entryEncoding.readInt(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
60	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  +  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  +  1);	  Integer    current    =    entryEncoding.readInt(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
61	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  fileNameLen);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  fileNameLen);	  Integer    current    =    entryEncoding.readInt(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
62	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  size);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  entryEncoding.readInt(buffer,  offset,  length,  size);	  Integer    current    =    entryEncoding.readInt(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
63	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
64	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
65	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
66	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(buffer,  offset  +  length,  buffer.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
67	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
68	[BUG]  [BUGGY]  Short  csize  =  current.entry.getSize();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Short  csize  =  current.entry.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Short  csize  =  current.entry.getSize();	  short    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(buffer,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(buffer,  offset  +  length);	  long    csize    =    current.entry.getChars(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
70	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(buffer,  offset,  length);	  long    csize    =    current.entry.getChars(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
71	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(buffer,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(buffer,  offset  +  length);	  long    csize    =    current.entry.getChars(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
72	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getChars(buffer,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(buffer,  offset  +  length);	  long    csize    =    current.entry.getChars(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
73	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.bytesRead);	  long    csize    =    current.entry.getChars(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
74	[BUG]  [BUGGY]  int  csize  =  current.entry.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getLength()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getLength()  +  1;	  long    csize    =    current.entry.getLength()    +    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
75	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getLength()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getLength()  +  1;	  long    csize    =    current.entry.getLength()    +    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
76	[BUG]  [BUGGY]  short  csize  =  current.entry.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getLength()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getLength()  +  1;	  long    csize    =    current.entry.getLength()    +    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
77	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset);	  long    csize    =    current.entry.getChars(offset);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
78	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset);	  long    csize    =    current.entry.getChars(offset);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
79	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getChars(offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(offset);	  long    csize    =    current.entry.getChars(offset);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
80	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset);	  long    csize    =    current.entry.getChars(offset);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
81	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getLength();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getLength();	  Integer    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
82	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getBytesRead();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getBytesRead();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getBytesRead();	  Integer    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
83	[BUG]  [BUGGY]  Integer  csize  =  current.in.read();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read();	  Integer    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
84	[BUG]  [BUGGY]  long  csize  =  current.lastEntry.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.lastEntry.getLength()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.lastEntry.getLength()  +  1;	  long    csize    =    current.lastEntry.getLength();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  short  csize  =  current.lastEntry.getLength();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.lastEntry.getLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.lastEntry.getLength();	  long    csize    =    current.lastEntry.getLength();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
86	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getCurrentSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getCurrentSize();	  Integer    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
87	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getMax();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getMax();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getMax();	  Integer    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
88	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.read();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.read();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.read();	  Integer    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
89	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length,  current.bytesRead);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
90	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length,  buffer.length);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
91	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  bytesRead);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length,  bytesRead);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
92	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  size);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  size);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length,  size);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
93	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length  +  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length  +  1);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
94	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);	  Integer    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
95	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  buffer,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  buffer,  offset  +  length);	  Integer    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
96	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);	  Integer    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
97	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  size);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  size);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  size);	  Integer    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
98	[BUG]  [BUGGY]  int  csize  =  current.entry.getEndSize();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getEndSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getEndSize();	  int    csize    =    current.entry.getCompletedSize();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
99	[BUG]  [BUGGY]  int  csize  =  current.entry.getCompletedSize()  +  1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCompletedSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCompletedSize()  +  1;	  int    csize    =    current.entry.getCompletedSize();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
100	[BUG]  [BUGGY]  int  csize  =  current.entry.getColumnSize();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getColumnSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getColumnSize();	  int    csize    =    current.entry.getCompletedSize();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
101	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getLength();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.getLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getLength();	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
102	[BUG]  [BUGGY]  int  csize  =  current.entry.getBytesRead();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getBytesRead();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getBytesRead();	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
103	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  length);	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
104	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getEntryCount()  +  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getEntryCount()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getEntryCount()  +  1;	  Integer    csize    =    current.entry.getEntryCount();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
105	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getEntryCount();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getEntryCount();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getEntryCount();	  Integer    csize    =    current.entry.getEntryCount();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
106	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getEntryCount()  -  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getEntryCount()  -  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getEntryCount()  -  1;	  Integer    csize    =    current.entry.getEntryCount();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
107	[BUG]  [BUGGY]  Integer  csize  =  current.currentEntry.getEntryCount();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.currentEntry.getEntryCount();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.currentEntry.getEntryCount();	  Integer    csize    =    current.entry.getEntryCount();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
108	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getEntryCount();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getEntryCount();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getEntryCount();	  Integer    csize    =    current.entry.getEntryCount();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
109	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);	  short    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
110	[BUG]  [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.entry.getChars(offset,  offset  +  length);	  short    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
111	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getChars();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.getChars();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getChars();	  int    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
112	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(0);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(0);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(0);	  int    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
113	[BUG]  [BUGGY]  Integer  csize  =  current.currentEntry.getKey();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.currentEntry.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.currentEntry.getKey();	  Integer    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
114	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead;	  Integer    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
115	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getValue();	  Integer    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
116	[BUG]  [BUGGY]  Integer  csize  =  current.currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.currentEntry.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.currentEntry.getValue();	  Integer    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
117	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getValue()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getValue()  +  1;	  Integer    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
118	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getKey();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.lastEntry.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getKey();	  int    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
119	[BUG]  [BUGGY]  int  csize  =  current.entry.getKey()  +  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getKey()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getKey()  +  1;	  int    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
120	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  offset;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  +  offset;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  +  offset;	  int    csize    =    current.entry.getSize()    +    length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
121	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  *  length;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  *  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  *  length;	  int    csize    =    current.entry.getSize()    +    length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
122	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  buffer.length;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  +  buffer.length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  +  buffer.length;	  int    csize    =    current.entry.getSize()    +    length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
123	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  bytesRead;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  +  bytesRead;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  +  bytesRead;	  int    csize    =    current.entry.getSize()    +    length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
124	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  /  length;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  /  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  /  length;	  int    csize    =    current.entry.getSize()    +    length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
125	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  offset,  length;  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  +  offset,  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  +  offset,  length;	  int    csize    =    current.entry.getSize()    +    length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
126	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.getInputStream(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.getInputStream(buffer);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
127	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.getInputStream(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.getInputStream(buffer,  offset,  length);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
128	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  0;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  0;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  0;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
129	[BUG]  [BUGGY]  Inflater  inf  =  current.readIn();  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.readIn();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.readIn();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
130	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.getInputStream(buffer,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.getInputStream(buffer,  offset  +  length);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
131	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  buffer;  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  buffer;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  buffer;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
132	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  offset);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
133	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.read(buffer);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.read(buffer);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
134	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
135	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  in.read(buffer,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  length);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
136	[BUG]  [BUGGY]  Integer  csize  =  current.read(buffer);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.read(buffer);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
137	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  offset  +  length);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
138	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  +  1;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCurrentSize()  +  1;	  Integer    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
139	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  -  1;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  -  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCurrentSize()  -  1;	  Integer    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
140	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getCurrentSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getCurrentSize();	  Integer    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
141	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.read(buffer,  offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.read(buffer,  offset);	  int    csize    =    in.read(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
142	[BUG]  [BUGGY]  int  csize  =  current.in.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.in.read(buffer,  offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.in.read(buffer,  offset);	  int    csize    =    in.read(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
143	[BUG]  [BUGGY]  byte  csize  =  in.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  in.read(buffer,  offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  in.read(buffer,  offset);	  int    csize    =    in.read(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
144	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset,  size);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset,  size);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset,  size);	  int    csize    =    in.read(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
145	[BUG]  [BUGGY]  short  csize  =  current.lastEntry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.lastEntry.getSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.lastEntry.getSize()  +  1;	  long    csize    =    current.lastEntry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
146	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    lastStoredEntry.length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
147	[BUG]  [BUGGY]  long  csize  =  lastStoredEntry.getChars(offset,  offset  +  length,  current.entry.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  lastStoredEntry.getChars(offset,  offset  +  length,  current.entry.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  lastStoredEntry.getChars(offset,  offset  +  length,  current.entry.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    lastStoredEntry.length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
148	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    lastStoredEntry.length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
149	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  lastStoredEntry.length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  lastStoredEntry.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  lastStoredEntry.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    lastStoredEntry.length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
150	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);	  int    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
151	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  buffer,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  buffer,  offset  +  length);	  int    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
152	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  size);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  size);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length,  size);	  int    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
153	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(0);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(0);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(0);	  Integer    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
154	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getChars();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getChars();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getChars();	  Integer    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
155	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getEnd();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getEnd();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getEnd();	  Integer    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
156	[BUG]  [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
157	[BUG]  [BUGGY]  int  csize  =  current.entry.getCompressedSize()  +  1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCompressedSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCompressedSize()  +  1;	  int    csize    =    current.entry.getCompressedSize();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
158	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getCompressedSize();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.getCompressedSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getCompressedSize();	  int    csize    =    current.entry.getCompressedSize();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
159	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getEntrySize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getEntrySize()  +  1;	  Integer    csize    =    current.entry.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
160	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getEntrySize();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getEntrySize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getEntrySize();	  Integer    csize    =    current.entry.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
161	[BUG]  [BUGGY]  Integer  csize  =  current.currentEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.currentEntry.getEntrySize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.currentEntry.getEntrySize();	  Integer    csize    =    current.entry.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
162	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getEntrySize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getEntrySize();	  Integer    csize    =    current.entry.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
163	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getEntryLength();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getEntryLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getEntryLength();	  Integer    csize    =    current.entry.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
164	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset,  length);	  long    csize    =    current.entry.getChars(offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
165	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  length);	  long    csize    =    current.entry.getChars(offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
166	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.entry.getChars(offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(offset,  length);	  long    csize    =    current.entry.getChars(offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
167	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentSize()  +  1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCurrentSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCurrentSize()  +  1;	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
168	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentSize()  -  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCurrentSize()  -  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCurrentSize()  -  1;	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
169	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentSize()  +  length;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCurrentSize()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCurrentSize()  +  length;	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
170	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.getCurrentSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getCurrentSize();	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
171	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.lastEntry.getCurrentSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getCurrentSize();	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
172	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.read(buffer);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.read(buffer);	  int    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
173	[BUG]  [BUGGY]  int  csize  =  current.in.read(buffer);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.in.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.in.read(buffer);	  int    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
174	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  length);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  length);	  int    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
175	[BUG]  [BUGGY]  byte  csize  =  in.read(buffer);  [CE]  illegal  start  of  type  [FE]                                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  in.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  in.read(buffer);	  int    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
176	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.getSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getSize()  +  1;	  int    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
177	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.length;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.length;	  int    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
178	[BUG]  [BUGGY]  byte  csize  =  current.bytesRead.getSize();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.bytesRead.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.bytesRead.getSize();	  int    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
179	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.size();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.size();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.size();	  int    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
180	[BUG]  [BUGGY]  long  csize  =  current.lastEntry.getKey();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.lastEntry.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.lastEntry.getKey();	  long    csize    =    current.lastEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
181	[BUG]  [BUGGY]  long  csize  =  current.lastEntry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.lastEntry.getValue()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.lastEntry.getValue()  +  1;	  long    csize    =    current.lastEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
182	[BUG]  [BUGGY]  int  csize  =  lastStoredEntry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  lastStoredEntry.getSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  lastStoredEntry.getSize()  +  1;	  int    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
183	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  *  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  *  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  *  1;	  int    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
184	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  *  2  +  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getSize()  *  2  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  *  2  +  1;	  int    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
185	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length,  current.bytesRead);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
186	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length,  buffer.length);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
187	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length,  current.length);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
188	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  lastStoredEntry.length);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  lastStoredEntry.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length,  lastStoredEntry.length);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
189	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.read(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.read(buffer,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.read(buffer,  offset  +  length);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
190	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  size);  [CE]  illegal  start  of  type  [FE]                                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  size);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length,  size);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
191	[BUG]  [BUGGY]  long  csize  =  current.bytesRead.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.bytesRead.getLength()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.bytesRead.getLength()  +  1;	  long    csize    =    current.bytesRead.getLength();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
192	[BUG]  [BUGGY]  short  csize  =  current.bytesRead.getLength();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.bytesRead.getLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.bytesRead.getLength();	  long    csize    =    current.bytesRead.getLength();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
193	[BUG]  [BUGGY]  byte  csize  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.entry.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.entry.getValue();	  short    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
194	[BUG]  [BUGGY]  Short  csize  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Short  csize  =  current.entry.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Short  csize  =  current.entry.getValue();	  short    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
195	[BUG]  [BUGGY]  char  csize  =  current.entry.getChars();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  char  csize  =  current.entry.getChars();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	char  csize  =  current.entry.getChars();	  short    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
196	[BUG]  [BUGGY]  Short  csize  =  current.entry.getChars();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Short  csize  =  current.entry.getChars();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Short  csize  =  current.entry.getChars();	  short    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
197	[BUG]  [BUGGY]  Integer  csize  =  current.current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.entry.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.entry.getValue();	  Integer    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
198	[BUG]  [BUGGY]  Integer  csize  =  current.current.entry.getKey();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.entry.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.entry.getKey();	  Integer    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
199	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getSize()  +  length;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.getSize()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getSize()  +  length;	  int    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
200	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.read();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.read();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.read();	  int    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
201	[BUG]  [BUGGY]  Integer  current  =  zipEncoding.readInt(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  current  =  zipEncoding.readInt(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  zipEncoding.readInt(buffer,  offset,  length);	  Integer    current    =    entryEncoding.readInt(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
202	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  -  2);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  -  2);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  entryEncoding.readInt(buffer,  offset,  length  -  2);	  Integer    current    =    entryEncoding.readInt(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
203	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  current.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  current.bytesRead);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
204	[BUG]  [BUGGY]  Integer  csize  =  current.current.getEntrySize();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.getEntrySize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.getEntrySize();	  Integer    csize    =    current.entry.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
205	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset,  length  -  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset,  length  -  1);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
206	[BUG]  [BUGGY]  int  csize  =  current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.read(buffer,  offset,  length);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
207	[BUG]  [BUGGY]  byte  csize  =  current.lastEntry.getSize();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.lastEntry.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.lastEntry.getSize();	  short    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
208	[BUG]  [BUGGY]  long  csize  =  current.bytesRead.getSize();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.bytesRead.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.bytesRead.getSize();	  long    csize    =    current.bytesRead.getValue();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
209	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentLength();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCurrentLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCurrentLength();	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
210	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCharsIndex();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getCharsIndex();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCharsIndex();	  Integer    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
211	[BUG]  [BUGGY]  Integer  csize  =  current.current.getValue();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.getValue();	  Integer    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
212	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  +  length;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCurrentSize()  +  length;	  Integer    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
213	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCurrentLength();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getCurrentLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCurrentLength();	  Integer    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
214	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  +  offset;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  +  offset;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCurrentSize()  +  offset;	  Integer    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
215	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  +  2;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getCurrentSize()  +  2;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCurrentSize()  +  2;	  Integer    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
216	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead(buffer);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead(buffer);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
217	[BUG]  [BUGGY]  Integer  csize  =  inputStream.read(buffer);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  inputStream.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  inputStream.read(buffer);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
218	[BUG]  [BUGGY]  Short  csize  =  current.entry.getLength();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Short  csize  =  current.entry.getLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Short  csize  =  current.entry.getLength();	  short    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
219	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  current.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer,  current.fileNameLen);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.fileNameLen);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
220	[BUG]  [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
221	[BUG]  [BUGGY]  int  csize  =  current.read(buffer);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.read(buffer);	  int    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
222	[BUG]  [BUGGY]  int  csize  =  current.entry.getCharsCount();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCharsCount();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCharsCount();	  int    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
223	[BUG]  [BUGGY]  int  csize  =  current.entry.getCharsIndex();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCharsIndex();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCharsIndex();	  int    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
224	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length  -  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  offset,  length  -  1);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
225	[BUG]  [BUGGY]  Integer  csize  =  inputStream.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  inputStream.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  inputStream.read(buffer,  offset,  length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
226	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getLimit()  +  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getLimit()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getLimit()  +  1;	  Integer    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
227	[BUG]  [BUGGY]  int  csize  =  current.entry.getLength()  +  length;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getLength()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getLength()  +  length;	  int    csize    =    current.entry.getSize()    +    length;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
228	[BUG]  [BUGGY]  int  csize  =  current.entry.getCompressedSize()  +  length;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCompressedSize()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCompressedSize()  +  length;	  int    csize    =    current.entry.getCompressedSize();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
229	[BUG]  [BUGGY]  int  csize  =  current.entry.getCompressedSize()  +  offset;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCompressedSize()  +  offset;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCompressedSize()  +  offset;	  int    csize    =    current.entry.getCompressedSize();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
230	[BUG]  [BUGGY]  int  csize  =  current.current.getCompressedSize();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.current.getCompressedSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.current.getCompressedSize();	  int    csize    =    current.entry.getCompressedSize();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
231	[BUG]  [BUGGY]  Inflater  inf  =  current.currentEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.currentEntry.getInputStream();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.currentEntry.getInputStream();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
232	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream(offset);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.getInputStream(offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.getInputStream(offset);	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
233	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  inputStream;  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  inputStream;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  inputStream;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
234	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  null;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  null;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  null;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
235	[BUG]  [BUGGY]  Long  csize  =  current.entry.getKey();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.entry.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getKey();	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
236	[BUG]  [BUGGY]  Long  csize  =  current.entry.getEntryLength();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.entry.getEntryLength();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getEntryLength();	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
237	[BUG]  [BUGGY]  Long  csize  =  current.entry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.entry.getCurrentSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getCurrentSize();	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
238	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getSize()  +  offset;  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.lastEntry.getSize()  +  offset;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getSize()  +  offset;	  int    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
239	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getSize()  +  length;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getSize()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getSize()  +  length;	  Integer    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
240	[BUG]  [BUGGY]  in.read(buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.read(buffer,  offset,  length  +  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length  +  1);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
241	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  lastStoredEntry.length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  lastStoredEntry.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(buffer,  offset  +  length,  lastStoredEntry.length);	  long    csize    =    current.entry.getChars(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
242	[BUG]  [BUGGY]  long  csize  =  current.bytesRead.getChars(offset,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.bytesRead.getChars(offset,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.bytesRead.getChars(offset,  offset  +  length);	  long    csize    =    current.bytesRead.getLength();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
243	[BUG]  [BUGGY]  int  csize  =  current.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.read(buffer,  offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.read(buffer,  offset);	  int    csize    =    in.read(buffer,    offset);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
244	[BUG]  [BUGGY]  long  csize  =  current.lastEntry.getChars(offset,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.lastEntry.getChars(offset,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.lastEntry.getChars(offset,  offset  +  length);	  long    csize    =    current.lastEntry.getLength();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
245	[BUG]  [BUGGY]  int  csize  =  current.entry.getCompletedSize()  +  length;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCompletedSize()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCompletedSize()  +  length;	  int    csize    =    current.entry.getCompletedSize();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
246	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length  -  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length  -  1);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
247	[BUG]  [BUGGY]  Integer  csize  =  current.current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.in.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.in.read(buffer,  offset,  length);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
248	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length  +  2);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length  +  2);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
249	[BUG]  [BUGGY]  short  csize  =  current.bytesRead.getKey();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.bytesRead.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.bytesRead.getKey();	  long    csize    =    current.bytesRead.getKey();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
250	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset  +  length);	  long    csize    =    current.entry.getChars(offset);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
251	[BUG]  [BUGGY]  short  csize  =  current.lastEntry.getValue();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  short  csize  =  current.lastEntry.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.lastEntry.getValue();	  long    csize    =    current.lastEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
252	[BUG]  [BUGGY]  Integer  csize  =  current.current.getEntryCount();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.getEntryCount();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.getEntryCount();	  Integer    csize    =    current.entry.getEntryCount();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
253	[BUG]  [BUGGY]  Integer  csize  =  current.current.entry.getEntryCount();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.entry.getEntryCount();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.entry.getEntryCount();	  Integer    csize    =    current.entry.getEntryCount();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
254	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getSize()  +  length;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getSize()  +  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getSize()  +  length;	  Integer    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
255	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentSize()  +  offset;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCurrentSize()  +  offset;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCurrentSize()  +  offset;	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
256	[BUG]  [BUGGY]  int  csize  =  lastStoredEntry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  lastStoredEntry.getCurrentSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  lastStoredEntry.getCurrentSize();	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
257	[BUG]  [BUGGY]  byte  csize  =  current.entry.getChars(offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  byte  csize  =  current.entry.getChars(offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	byte  csize  =  current.entry.getChars(offset,  length);	  long    csize    =    current.entry.getChars(offset,    length);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
258	[BUG]  [BUGGY]  int  csize  =  this.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  this.in.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  this.in.read(buffer,  offset,  length);	  int    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
259	[BUG]  [BUGGY]  int  csize  =  current.current.bytesRead.getSize();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.current.bytesRead.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.current.bytesRead.getSize();	  int    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
260	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getCompressedSize();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.lastEntry.getCompressedSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getCompressedSize();	  int    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
261	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getCompressedSize();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.lastEntry.getCompressedSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getCompressedSize();	  Integer    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
262	[BUG]  [BUGGY]  Integer  csize  =  current.current.getSize();  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.getSize();	  Integer    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
263	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.bytesRead);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.bytesRead);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    current.bytesRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
264	[BUG]  [BUGGY]  int  csize  =  this.in.read(buffer);  [CE]  illegal  start  of  type  [FE]                                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  this.in.read(buffer);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  this.in.read(buffer);	  int    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
265	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.inputStream);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.inputStream);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length,  current.inputStream);	  int    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
266	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  bytesRead);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length,  bytesRead);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length,  bytesRead);	  int    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
267	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  off);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  in.read(buffer,  off);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  off);	  Integer    csize    =    in.read(buffer);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
268	[BUG]  [BUGGY]  Integer  csize  =  current.entriesRead.getKey();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entriesRead.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entriesRead.getKey();	  Integer    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
269	[BUG]  [BUGGY]  Integer  csize  =  current.current.getKey();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.getKey();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.getKey();	  Integer    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
270	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor()?  current.getInputStream()  :  buffer;  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor()?  current.getInputStream()  :  buffer;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.hasDataDescriptor()?  current.getInputStream()  :  buffer;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
271	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor()?  current.getInputStream()  :  0;  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor()?  current.getInputStream()  :  0;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.hasDataDescriptor()?  current.getInputStream()  :  0;	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
272	[BUG]  [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  buffer.array();  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  buffer.array();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.hasDataDescriptor?  current.getInputStream()  :  buffer.array();	  Inflater    inf    =    current.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
273	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentSize()  *  length;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCurrentSize()  *  length;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCurrentSize()  *  length;	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
274	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentSize()  *  2;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getCurrentSize()  *  2;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCurrentSize()  *  2;	  int    csize    =    current.entry.getCurrentSize();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
275	[BUG]  [BUGGY]  in.read(buffer,  offset,  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  in.read(buffer,  offset,  length,  current.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length,  current.fileNameLen);	  in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
276	[BUG]  [BUGGY]  Integer  csize  =  current.current.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.read(buffer,  offset,  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.read(buffer,  offset,  length);	  Integer    csize    =    in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
277	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCurrentEntryCount();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getCurrentEntryCount();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCurrentEntryCount();	  Integer    csize    =    current.entry.getEntryCount();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
278	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.inputStream);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.inputStream);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.inputStream);	  Integer    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
279	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.dataLen);  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.dataLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length,  current.dataLen);	  Integer    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
280	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset,  offset  +  length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(buffer,  offset,  offset  +  length);	  long    csize    =    current.entry.getChars(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
281	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(buffer,  offset  +  length,  current.fileNameLen);	  long    csize    =    current.entry.getChars(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
282	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.fileNameLen);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length,  current.fileNameLen);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
283	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.dataDescriptor);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.dataDescriptor);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length,  current.dataDescriptor);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
284	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.inputStream);  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length,  current.inputStream);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length,  current.inputStream);	  int    csize    =    in.read(buffer,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
285	[BUG]  [BUGGY]  int  csize  =  current.entry.getEntryCount();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getEntryCount();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getEntryCount();	  int    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
286	[BUG]  [BUGGY]  int  csize  =  current.entry.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getImplicitReturn();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getImplicitReturn();	  int    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
287	[BUG]  [BUGGY]  Integer  csize  =  current.current.bytesRead.getValue();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.current.bytesRead.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.current.bytesRead.getValue();	  Integer    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
288	[BUG]  [BUGGY]  Integer  csize  =  current.entriesRead.getValue();  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entriesRead.getValue();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entriesRead.getValue();	  Integer    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
289	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getCsize();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.getCsize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getCsize();	  Integer    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
290	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.remainder();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.bytesRead.remainder();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.remainder();	  Integer    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
291	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.remainder();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.bytesRead.remainder();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.remainder();	  int    csize    =    current.bytesRead.getSize();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
292	[BUG]  [BUGGY]  long  csize  =  current.lastEntry.getChars();  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.lastEntry.getChars();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.lastEntry.getChars();	  long    csize    =    current.lastEntry.getLength();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
293	[BUG]  [BUGGY]  Integer  csize  =  current.entriesRead.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entriesRead.getSize()  +  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entriesRead.getSize()  +  1;	  Integer    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
294	[BUG]  [BUGGY]  Integer  csize  =  current.entriesRead.getSize();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.entriesRead.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entriesRead.getSize();	  Integer    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
295	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  current.length);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length,  current.length);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length,  current.length);	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
296	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length)-  1;  [CE]  illegal  start  of  type  [FE]                                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length)-  1;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length)-  1;	  Integer    csize    =    current.in.read(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
297	[BUG]  [BUGGY]  Long  csize  =  current.entry.getCompletedSize();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Long  csize  =  current.entry.getCompletedSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getCompletedSize();	  Long    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
298	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length  -  offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length  -  offset);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length  -  offset);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
299	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length  -  1);  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length  -  1);	  long    csize    =    current.entry.getChars(offset,    offset    +    length,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
300	[BUG]  [BUGGY]  Short  csize  =  current.lastEntry.getSize();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  Short  csize  =  current.lastEntry.getSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Short  csize  =  current.lastEntry.getSize();	  short    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
301	[BUG]  [BUGGY]  int  csize  =  current.entry.getLength()  *  2;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getLength()  *  2;  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getLength()  *  2;	  int    csize    =    current.entry.getSize()    *    2;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
302	[BUG]  [BUGGY]  int  csize  =  current.entry.getHeaderSize();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed      [CONTEXT]      private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }      [BUGGY]  int  csize  =  current.entry.getHeaderSize();  [BUGGY]      if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getHeaderSize();	  int    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
