bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  csize  =  current.lastEntry.getSize();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.lastEntry.getSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.lastEntry.getSize();	  long    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  long  csize  =  current.lastEntry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.lastEntry.getSize()  +  1;  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.lastEntry.getSize()  +  1;	  long    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  long  csize  =  current.lastEntry.getLength();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.lastEntry.getLength();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.lastEntry.getLength();	  long    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  Integer  csize  =  current.lastEntry.getSize();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.lastEntry.getSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.lastEntry.getSize();	  long    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getSize()  +  1;  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  +  1;	  long    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getSize()  +  1;  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getSize()  +  1;	  long    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  short  csize  =  current.entry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  short  csize  =  current.entry.getSize()  +  1;  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getSize()  +  1;	  long    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  Integer  csize  =  current.bytesRead.getSize();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.bytesRead.getSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.bytesRead.getSize();	  Integer    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getLength();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getLength();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getLength();	  Integer    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getKey();  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getKey();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getKey();	  Integer    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getValue();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getValue();	  Integer    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getCurrentSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getCurrentSize();	  Integer    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  int  csize  =  current.entry.getKey();  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getKey();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getKey();	  long    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  long  csize  =  current.bytesRead.getKey();  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.bytesRead.getKey();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.bytesRead.getKey();	  long    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  short  csize  =  current.entry.getKey();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  short  csize  =  current.entry.getKey();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getKey();	  long    csize    =    current.entry.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  int  csize  =  current.entry.getLength();  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getLength();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getLength();	  long    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  long  csize  =  current.entry.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getLength()  +  1;  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getLength()  +  1;	  long    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  short  csize  =  current.entry.getLength();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  short  csize  =  current.entry.getLength();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getLength();	  long    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  long  csize  =  current.bytesRead.getLength();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.bytesRead.getLength();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.bytesRead.getLength();	  long    csize    =    current.entry.getLength();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getChars(offset,  offset  +  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars(offset,  offset  +  length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  buffer.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.bytesRead);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getChars(offset,  offset  +  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars(offset,  offset  +  length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  short  csize  =  current.entry.getChars(offset,  offset  +  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars(offset,  offset  +  length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getChars(buffer,  offset  +  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(buffer,  offset  +  length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  in.read(buffer,  offset,  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  in.read(buffer,  offset,  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  Inflater  inf  =  current.getInputStream();  [CE]  illegal  start  of  type  [FE]                      arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Inflater  inf  =  current.getInputStream();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Inflater  inf  =  current.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  in.read(buffer,  offset  +  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset  +  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.in.read(buffer,  offset,  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  in.read(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  in.read(buffer,  offset,  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	in.read(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  int  csize  =  in.read(buffer);  [CE]  illegal  start  of  type  [FE]                              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  in.read(buffer);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  int  csize  =  current.entry.getChars();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getChars();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getChars();	  long    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getChars();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getChars();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getChars();	  long    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset);  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getChars(offset);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset);	  long    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getChars(offset,  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  length);	  long    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  int  csize  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getValue();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getValue();	  long    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  long  csize  =  current.bytesRead.getValue();  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.bytesRead.getValue();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.bytesRead.getValue();	  long    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  long  csize  =  current.lastEntry.getValue();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.lastEntry.getValue();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.lastEntry.getValue();	  long    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  int  csize  =  current.bytesRead.getSize();  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.bytesRead.getSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.bytesRead.getSize();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  +  length;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getSize()  +  length;  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  +  length;	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  int  csize  =  current.entry.getSize()  *  2;  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getSize()  *  2;  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getSize()  *  2;	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  int  csize  =  current.entry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getCurrentSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCurrentSize();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getEntryCount();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getEntryCount();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getEntryCount();	  Integer    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  short  csize  =  current.entry.getSize();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  short  csize  =  current.entry.getSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getSize();	  long    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  Long  csize  =  current.entry.getSize();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Long  csize  =  current.entry.getSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Long  csize  =  current.entry.getSize();	  long    csize    =    current.entry.getSize()    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  short  csize  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  short  csize  =  current.entry.getValue();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getValue();	  long    csize    =    current.entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  lastStoredEntry.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  current  =  entryEncoding.readInt(buffer,  offset,  length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  current  =  entryEncoding.readInt(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  int  csize  =  in.read(buffer,  offset);  [CE]  illegal  start  of  type  [FE]                    arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  in.read(buffer,  offset);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  in.read(buffer,  offset);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  short  csize  =  current.lastEntry.getSize();  [CE]  illegal  start  of  type  [FE]                arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  short  csize  =  current.lastEntry.getSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.lastEntry.getSize();	  long    csize    =    current.lastEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  Integer  csize  =  current.entry.getEntrySize();  [CE]  illegal  start  of  type  [FE]              arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  current.entry.getEntrySize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  current.entry.getEntrySize();	  Integer    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  int  csize  =  current.entry.getCompressedSize();  [CE]  illegal  start  of  type  [FE]        arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getCompressedSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCompressedSize();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  int  csize  =  current.entry.getCompletedSize();  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  int  csize  =  current.entry.getCompletedSize();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	int  csize  =  current.entry.getCompletedSize();	  int    csize    =    current.entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.length);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	long  csize  =  current.entry.getChars(offset,  offset  +  length,  current.fileNameLen);	  long    csize    =    current.entry.getChars(offset,    offset    +    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  short  csize  =  current.entry.getChars();  [CE]  illegal  start  of  type  [FE]            arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  short  csize  =  current.entry.getChars();  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	short  csize  =  current.entry.getChars();	  long    csize    =    current.entry.getChars();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  Integer  csize  =  in.read(buffer);  [CE]  illegal  start  of  type  [FE]                  arrays  first  differed    [CONTEXT]    private  int  readStored(byte[]  buffer,  int  offset,  int  length)  throws  IOException  {  if  (current.hasDataDescriptor)  {  if  (lastStoredEntry  ==  null)  {  readStoredEntry();  }  return  lastStoredEntry.read(buffer,  offset,  length);  }    [BUGGY]  Integer  csize  =  in.read(buffer);  [BUGGY]    if  (current.bytesRead  >=  csize)  {  return  -1;  }  if  (buf.position()  >=  buf.limit())  {  buf.position(0);  int  l  =  in.read(buf.array());  if  (l  ==  -1)  {  return  -1;  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readStored  [RETURN_TYPE]  int  byte[]  buffer  int  offset  int  length  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress25/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	411	411	1	replace	Integer  csize  =  in.read(buffer);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
