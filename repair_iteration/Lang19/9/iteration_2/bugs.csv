bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'a'    ||    firstChar    ==    'z')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
2	[BUG]  [BUGGY]  if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'a'    ||    firstChar    ==    'z')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
3	[BUG]  [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'a'    ||    firstChar    ==    'z')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
4	[BUG]  [BUGGY]  int  end  =  input.length()  -  1;  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  int  end  =  input.length()  -  1;  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	int  end  =  input.length()  -  1;	      int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
5	[BUG]  [BUGGY]  int  end  =  input.length()  +  1;  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  int  end  =  input.length()  +  1;  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	int  end  =  input.length()  +  1;	      int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
6	[BUG]  [BUGGY]  int  end  =  input.length()  -  seqEnd;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  int  end  =  input.length()  -  seqEnd;  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	int  end  =  input.length()  -  seqEnd;	      int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
7	[BUG]  [BUGGY]  char  end  =  input.length();  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  end  =  input.length();  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  end  =  input.length();	      int    end    =    input.length();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
8	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  ||  firstChar  ==  'X'  ||  firstChar  ==  'X')  {	  if(firstChar    ==    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  if(firstChar  ==  'X'  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  'X'  &&  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  'X'  &&  firstChar  ==  'X')  {	  if(firstChar    ==    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  if(firstChar!=  'X'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar!=  'X'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar!=  'X'  ||  firstChar  ==  'X')  {	  if(firstChar    ==    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(firstChar);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.charAt(firstChar);  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.charAt(firstChar);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(seqEnd);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.charAt(seqEnd);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.charAt(seqEnd);	      int    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  ';')  {  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(!isHex  &&  firstChar  ==  ';')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(!isHex  &&  firstChar  ==  ';')  {	  if(firstChar    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
14	[BUG]  [BUGGY]  if(firstChar  ==  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  ';'  &&  isHex)  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  &&  isHex)  {	  if(firstChar    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
15	[BUG]  [BUGGY]  if(isHex)  {  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex)  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex)  {	  if(firstChar    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
16	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.charAt(start  +  1);	      int    firstChar    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(seqEnd  +  1);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.charAt(seqEnd  +  1);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.charAt(seqEnd  +  1);	      int    firstChar    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
18	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  int  firstChar  =  input.charAt(start  +  1);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	int  firstChar  =  input.charAt(start  +  1);	      int    firstChar    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
19	[BUG]  [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar!=  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
20	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar!=  'X')  {  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar!=  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar!=  'X')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
21	[BUG]  [BUGGY]  char  firstChar  =  input.length();  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.length();  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.length();	      int    firstChar    =    input.length();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  int  firstChar  =  input.length()  -  1;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  int  firstChar  =  input.length()  -  1;  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	int  firstChar  =  input.length()  -  1;	      int    firstChar    =    input.length();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
23	[BUG]  [BUGGY]  int  firstChar  =  input.length()  +  1;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  int  firstChar  =  input.length()  +  1;  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	int  firstChar  =  input.length()  +  1;	      int    firstChar    =    input.length();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
24	[BUG]  [BUGGY]  int  firstChar  =  input.length()  -  seqEnd;  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  int  firstChar  =  input.length()  -  seqEnd;  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	int  firstChar  =  input.length()  -  seqEnd;	      int    firstChar    =    input.length();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
25	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(first);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.charAt(first);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.charAt(first);	      char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.charAt(index  +  1);	      char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  'X'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
28	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
29	[BUG]  [BUGGY]  if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar!=  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
30	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.charAt(0);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.charAt(0);	      char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {	  if(isHex    ||    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(!isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(!isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {	  if(isHex    ||    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  boolean  isHex  =  input.charAt(index);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	boolean  isHex  =  input.charAt(index);	      boolean    isHex    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
34	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  boolean  isHex  =  input.charAt(start  +  1);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	boolean  isHex  =  input.charAt(start  +  1);	      boolean    isHex    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
35	[BUG]  [BUGGY]  boolean  isHex  =  firstChar.charAt(start);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  boolean  isHex  =  firstChar.charAt(start);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	boolean  isHex  =  firstChar.charAt(start);	      boolean    isHex    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
36	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  boolean  isHex  =  input.charAt(0);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	boolean  isHex  =  input.charAt(0);	      boolean    isHex    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
38	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'a'    ||    firstChar    ==    'z')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start  +  1)!=  ';';  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  boolean  isHex  =  input.charAt(start  +  1)!=  ';';  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	boolean  isHex  =  input.charAt(start  +  1)!=  ';';	      boolean    isHex    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
40	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start  +  1)  ==  ';';  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  boolean  isHex  =  input.charAt(start  +  1)  ==  ';';  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	boolean  isHex  =  input.charAt(start  +  1)  ==  ';';	      boolean    isHex    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
41	[BUG]  [BUGGY]  if(firstChar!=  'x'  &&  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar!=  'x'  &&  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar!=  'x'  &&  firstChar  ==  'X')  {	  if(firstChar!=    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
42	[BUG]  [BUGGY]  if(firstChar  ==  'n')  {  out.write('r');  }  else  {  out.write('n');  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  'n')  {  out.write('r');  }  else  {  out.write('n');  }  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  'n')  {  out.write('r');  }  else  {  out.write('n');  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  if(!isHex)  {  out.write('n');  }  else  {  out.write('r');  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(!isHex)  {  out.write('n');  }  else  {  out.write('r');  }  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(!isHex)  {  out.write('n');  }  else  {  out.write('r');  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
44	[BUG]  [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  ||  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
45	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(seqEnd);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  int  firstChar  =  input.charAt(seqEnd);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	int  firstChar  =  input.charAt(seqEnd);	      int    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
46	[BUG]  [BUGGY]  if(firstChar!=  ';'  &&  isHex)  {  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar!=  ';'  &&  isHex)  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar!=  ';'  &&  isHex)  {	  if(firstChar    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  if(firstChar!=  ';')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar!=  ';')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar!=  ';')  {	  if(firstChar    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
48	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start)!=  ';';  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  boolean  isHex  =  input.charAt(start)!=  ';';  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	boolean  isHex  =  input.charAt(start)!=  ';';	      boolean    isHex    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
49	[BUG]  [BUGGY]  boolean  isHex  =  input.charAt(start)  ==  ';';  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  boolean  isHex  =  input.charAt(start)  ==  ';';  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	boolean  isHex  =  input.charAt(start)  ==  ';';	      boolean    isHex    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  &&  firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X')  {	  if(firstChar    ==    ';'    ||    firstChar    ==    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
51	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'a'  ||  firstChar  ==  'z')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'a'    ||    firstChar    ==    'z')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
52	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'x'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'X'  ||  firstChar  ==  'A')  {	  if(firstChar    ==    'x'    ||    firstChar    ==    'X'    ||    firstChar    ==    'A')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
54	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {	  if(firstChar!=    'x'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
55	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X')  {  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'X')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'X')  {	  if(firstChar    ==    'X'    ||    firstChar    ==    'X')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
56	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  char  firstChar  =  input.charAt(end);  [BUGGY]    if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	char  firstChar  =  input.charAt(end);	      char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
57	[BUG]  [BUGGY]  if(!isHex  &&  firstChar!=  ';')  {  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(!isHex  &&  firstChar!=  ';')  {  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(!isHex  &&  firstChar!=  ';')  {	  if(firstChar    ==    ';')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
58	[BUG]  [BUGGY]  if(firstChar  ==  'n'  ||  firstChar  ==  'r'  ||  firstChar  ==  'n'  ||  firstChar  ==  't')  {  if(!isHex)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  'n'  ||  firstChar  ==  'r'  ||  firstChar  ==  'n'  ||  firstChar  ==  't')  {  if(!isHex)  {  return  false;  }  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  'n'  ||  firstChar  ==  'r'  ||  firstChar  ==  'n'  ||  firstChar  ==  't')  {  if(!isHex)  {  return  false;  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
59	[BUG]  [BUGGY]  if(firstChar  ==  'n'  ||  firstChar  ==  'r'  ||  firstChar  ==  'n'  ||  firstChar  ==  't')  {  if(!isHex)  {  return  input.length();  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);    [BUGGY]  if(firstChar  ==  'n'  ||  firstChar  ==  'r'  ||  firstChar  ==  'n'  ||  firstChar  ==  't')  {  if(!isHex)  {  return  input.length();  }  [BUGGY]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  'n'  ||  firstChar  ==  'r'  ||  firstChar  ==  'n'  ||  firstChar  ==  't')  {  if(!isHex)  {  return  input.length();  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
