bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isHex)  {  end++;  }  else  {  input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  if(isHex)  {  end++;  }  else  {  input.subSequence(start,  end).toString(),  16);  }  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(isHex)  {  end++;  }  else  {  input.subSequence(start,  end).toString(),  16);  }	end++;  	non-compiled	[CE]  <identifier>  expected	24	None	replace
2	[BUG]  [BUGGY]  if(!isHex)  {  end++;  }  else  {  input.subSequence(start,  end).toString(),  16);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  if(!isHex)  {  end++;  }  else  {  input.subSequence(start,  end).toString(),  16);  }  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(!isHex)  {  end++;  }  else  {  input.subSequence(start,  end).toString(),  16);  }	end++;  	non-compiled	[CE]  <identifier>  expected	24	None	replace
3	[BUG]  [BUGGY]  if(!isHex)  {  end++;  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  if(!isHex)  {  end++;  }  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(!isHex)  {  end++;  }	end++;  	non-compiled	[CE]  <identifier>  expected	24	None	replace
4	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	  	end++;  	non-compiled	[CE]  <identifier>  expected	24	None	replace
5	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(end);  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	    char  firstChar  =  input.charAt(end);		non-compiled	[CE]  <identifier>  expected	25	None	add
6	[BUG]  [BUGGY]    int  firstChar  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    int  firstChar  =  input.charAt(end);  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	    int  firstChar  =  input.charAt(end);		non-compiled	[CE]  <identifier>  expected	25	None	add
7	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(start);  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	    char  firstChar  =  input.charAt(start);		non-compiled	[CE]  <identifier>  expected	25	None	add
8	[BUG]  [BUGGY]    int  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    int  firstChar  =  input.charAt(index);  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	    int  firstChar  =  input.charAt(index);		non-compiled	[CE]  <identifier>  expected	25	None	add
9	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(end)+  1;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    char  firstChar  =  input.charAt(end)+  1;  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	    char  firstChar  =  input.charAt(end)+  1;		non-compiled	[CE]  <identifier>  expected	25	None	add
10	[BUG]  [BUGGY]  end  =  input.charAt(end)+  ';';  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  end  =  input.charAt(end)+  ';';  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)+  ';';	end++;  	non-compiled	[CE]  <identifier>  expected	24	None	replace
11	[BUG]  [BUGGY]  end  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  end  =  input.charAt(end);  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end);	end++;  	non-compiled	[CE]  <identifier>  expected	24	None	replace
12	[BUG]  [BUGGY]  int  seqEnd  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  int  seqEnd  =  input.charAt(end);  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAt(end);	end++;  	non-compiled	[CE]  <identifier>  expected	24	None	replace
13	[BUG]  [BUGGY]    int  firstChar  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]    int  firstChar  =  input.charAt(start);  [BUGGY]  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	    int  firstChar  =  input.charAt(start);		non-compiled	[CE]  <identifier>  expected	25	None	add
14	[BUG]  [BUGGY]  int  seqEnd  =  input.length();  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [BUGGY]  int  seqEnd  =  input.length();  [BUGGY]  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.length();	end++;  	non-compiled	[CE]  <identifier>  expected	24	None	replace
