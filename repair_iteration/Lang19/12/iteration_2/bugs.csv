bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  16);	  if(isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  16);	  if(isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  16;	  if(isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  16;	  if(isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  end  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(index);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(index);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  char  end  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  end  =  input.charAt(end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  end  =  input.charAt(end);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  end  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(start);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(start);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end  -  1);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end  -  1);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end).toString(),  16;	  if(!isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(index);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(index);	      int    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(index  +  1);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(index  +  1);	      int    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(0);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(0);	      char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  String  firstChar  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  String  firstChar  =  input.charAt(end);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	String  firstChar  =  input.charAt(end);	      char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start  +  1);	      char    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)+  ';';  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end)+  ';';  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)+  ';';	  end    =    input.charAt(end)+    ';';    	non-compiled	[CE]  <identifier>  expected	10	None	replace
16	[BUG]  [BUGGY]  end  =  input.charAt(end)+  1  ';';  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end)+  1  ';';  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)+  1  ';';	  end    =    input.charAt(end)+    ';';    	non-compiled	[CE]  <identifier>  expected	10	None	replace
17	[BUG]  [BUGGY]  end  =  input.charAt(start)+  ';';  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(start)+  ';';  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(start)+  ';';	  end    =    input.charAt(end)+    ';';    	non-compiled	[CE]  <identifier>  expected	10	None	replace
18	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  1;  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  seqEnd  =  input.length()  -  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.length()  -  1;	  int    seqEnd    =    input.length();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
19	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  +  1;  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  seqEnd  =  input.length()  +  1;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.length()  +  1;	  int    seqEnd    =    input.length();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  2;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  seqEnd  =  input.length()  -  2;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.length()  -  2;	  int    seqEnd    =    input.length();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  if(isHex)  {  end++;  }  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(isHex)  {  end++;  }  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(isHex)  {  end++;  }	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  result  =  input.subSequence(start,  end).toString();  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end).toString();	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  result  =  input.subSequence(start,  end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end);	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  char  seqEnd  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  seqEnd  =  input.charAt(end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  seqEnd  =  input.charAt(end);	  int    seqEnd    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  int  seqEnd  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  seqEnd  =  input.charAt(index);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAt(index);	  int    seqEnd    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  int  seqEnd  =  input.charAtIndex(end);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  seqEnd  =  input.charAtIndex(end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAtIndex(end);	  int    seqEnd    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start)+  1;  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(start)+  1;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start)+  1;	      char    firstChar    =    input.charAt(end)+    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)+  2;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end)+  2;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)+  2;	      char    firstChar    =    input.charAt(end)+    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
29	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)/  1;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end)/  1;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)/  1;	      char    firstChar    =    input.charAt(end)+    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
30	[BUG]  [BUGGY]  out  =  input.charAt(end);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  out  =  input.charAt(end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	out  =  input.charAt(end);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(end  -  1);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(end  -  1);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  end  =  input.subSequence(start,  end);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end);	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
33	[BUG]  [BUGGY]  int  seqEnd  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  seqEnd  =  input.charAt(start);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAt(start);	  int    seqEnd    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
34	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(start  +  1);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(start  +  1);	      int    firstChar    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
35	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString();  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString();	  if(isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  16;	  if(isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  end  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end  +  1);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end  +  1);	  end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
38	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(0);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(0);	      int    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
39	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  start;  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  seqEnd  =  input.length()  -  start;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.length()  -  start;	  int    seqEnd    =    input.length();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
40	[BUG]  [BUGGY]  end  =  input.charAt(end)/  ';';  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end)/  ';';  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)/  ';';	  end    =    input.charAt(end)+    ';';    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  16;	  if(!isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end  -  1);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end  -  1);	      char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString();  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString();  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString();	  if(isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16);	  if(isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(end);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  int  firstChar  =  input.charAt(end);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(end);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
46	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)-  1;  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end)-  1;  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)-  1;	      char    firstChar    =    input.charAt(end)+    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end).toString(),  16);	  if(!isHex)    {    end++;    }    else    {    input.subSequence(start,    end).toString(),    16);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
48	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  char  firstChar  =  input.charAt(end  +  1);  [BUGGY]    end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end  +  1);	      char    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  end  =  input.charAt(end)-  ';';  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  end  =  input.charAt(end)-  ';';  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)-  ';';	  end    =    input.charAt(end)+    ';';    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  if(!isHex)  {  start++;  }  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {    [BUGGY]  if(!isHex)  {  start++;  }  [BUGGY]    }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(!isHex)  {  start++;  }	  if(!isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
