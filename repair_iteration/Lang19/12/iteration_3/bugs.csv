bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end).toString()  +  1;	  End    result    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
2	[BUG]  [BUGGY]  End  result  =  input.subSequence(index,  end).toString();  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(index,  end).toString();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(index,  end).toString();	  End    result    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
3	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  10;	  End    <?>    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  8;	  End    <?>    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  16  +  1;	  End    <?>    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  12;	  End    <?>    end    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  char  end  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(end  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  end  =  input.charAt(end  -  1);	  end    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
8	[BUG]  [BUGGY]  end  =  input.charAt(end)-  1;  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)-  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)-  1;	  end    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  10);	  End    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  12);	  End    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  8);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  8);	  End    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  9);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  9);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  9);	  End    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start)+  2;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(start)+  2;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start)+  2;	  char    firstChar    =    input.charAt(start)+    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
14	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start)/  1;  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(start)/  1;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start)/  1;	  char    firstChar    =    input.charAt(start)+    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
15	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  start  +  1;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.length()  -  start  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.length()  -  start  +  1;	  int    seqEnd    =    input.length()    -    start;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
16	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  *  start;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.length()  *  start;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.length()  *  start;	  int    seqEnd    =    input.length()    -    start;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
17	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(1);	  int    firstChar    =    input.charAt(0);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
18	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  10;	  End    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  8;	  End    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  12;	  End    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  9;  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  9;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  9;	  End    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  char  seqEnd  =  input.charAtIndex(end);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  seqEnd  =  input.charAtIndex(end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  seqEnd  =  input.charAtIndex(end);	  int    seqEnd    =    input.charAtIndex(end);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
23	[BUG]  [BUGGY]  int  seqEnd  =  input.charAtIndex(start);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.charAtIndex(start);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAtIndex(start);	  int    seqEnd    =    input.charAtIndex(end);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
24	[BUG]  [BUGGY]  int  seqEnd  =  input.charAtIndex(index);  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.charAtIndex(index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAtIndex(index);	  int    seqEnd    =    input.charAtIndex(end);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
25	[BUG]  [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  10);	  EndIndexOutOfBounds    exception    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
26	[BUG]  [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  8);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  8);	  EndIndexOutOfBounds    exception    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
27	[BUG]  [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  12);	  EndIndexOutOfBounds    exception    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
28	[BUG]  [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  9);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  9);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  9);	  EndIndexOutOfBounds    exception    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
29	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end).toString(),  10;	  End    result    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
30	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end).toString(),  8;	  End    result    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
31	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end).toString(),  12;	  End    result    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
32	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end).toString(),  16  +  1;	  End    result    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  int  seqEnd  =  output.length();  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  output.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  output.length();	  int    seqEnd    =    input.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
34	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString()  +  1;	  EndIndexOutOfBoundsException    outIndex    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
35	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  16;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  16;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  16;	  EndIndexOutOfBoundsException    outIndex    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
36	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  1;  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  1;	  EndIndexOutOfBoundsException    outIndex    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
37	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(index  +  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(index  +  1);	  char    firstChar    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  char  seqEnd  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  seqEnd  =  input.charAt(index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  seqEnd  =  input.charAt(index);	  char    seqEnd    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
39	[BUG]  [BUGGY]  char  seqEnd  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  seqEnd  =  input.charAt(start);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  seqEnd  =  input.charAt(start);	  char    seqEnd    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
40	[BUG]  [BUGGY]  char  seqEnd  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  seqEnd  =  input.charAt(0);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  seqEnd  =  input.charAt(0);	  char    seqEnd    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
41	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)+  1  ';';  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end)+  1  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)+  1  ';';	  end    =    input.charAt(end)+    1    ';';    	non-compiled	[CE]  <identifier>  expected	16	None	replace
42	[BUG]  [BUGGY]  char  end  =  input.charAt(end)+  1  ';';  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(end)+  1  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  end  =  input.charAt(end)+  1  ';';	  end    =    input.charAt(end)+    1    ';';    	non-compiled	[CE]  <identifier>  expected	16	None	replace
43	[BUG]  [BUGGY]  End  =  input.charAt(end)+  1  ';';  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.charAt(end)+  1  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.charAt(end)+  1  ';';	  end    =    input.charAt(end)+    1    ';';    	non-compiled	[CE]  <identifier>  expected	16	None	replace
44	[BUG]  [BUGGY]  String  firstChar  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  String  firstChar  =  input.charAt(index);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	String  firstChar  =  input.charAt(index);	  String    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end);	  if(isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
46	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(end  +  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(end  +  1);	  int    firstChar    =    input.charAt(index    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
47	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  -  1);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(start  -  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start  -  1);	  char    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
48	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index  -  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(index  -  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(index  -  1);	  char    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
49	[BUG]  [BUGGY]  if(isHex)  {  start++;  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(isHex)  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
50	[BUG]  [BUGGY]  if(start  ==  -1)  {  if(!isHex)  {  start++;  }  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  -1)  {  if(!isHex)  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(start  ==  -1)  {  if(!isHex)  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
51	[BUG]  [BUGGY]  ||!isHex)  {  start++;  }  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  ||!isHex)  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	||!isHex)  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
52	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start)+  ';';  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(start)+  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start)+  ';';	  char    firstChar    =    input.charAt(end)+    ';';    	non-compiled	[CE]  <identifier>  expected	15	None	replace
53	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index)+  ';';  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(index)+  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(index)+  ';';	  char    firstChar    =    input.charAt(end)+    ';';    	non-compiled	[CE]  <identifier>  expected	15	None	replace
54	[BUG]  [BUGGY]  int  seqEnd  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.charAt(index  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAt(index  +  1);	  int    seqEnd    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
55	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end).toString(),  10);	  End    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
56	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  8);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end).toString(),  8);	  End    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
57	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end).toString(),  12);	  End    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
58	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  9);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  9);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end).toString(),  9);	  End    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
59	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start)-  1;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(start)-  1;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start)-  1;	  char    firstChar    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
60	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index)-  1;  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(index)-  1;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(index)-  1;	  char    firstChar    =    input.charAt(end)-    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
61	[BUG]  [BUGGY]  end  =  input.charAt(index)+  ';';  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(index)+  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(index)+  ';';	  end    =    input.charAt(start)+    ';';    	non-compiled	[CE]  <identifier>  expected	17	None	replace
62	[BUG]  [BUGGY]  char  end  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(end  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  end  =  input.charAt(end  +  1);	  end    =    input.charAt(end    +    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
63	[BUG]  [BUGGY]  end  =  input.charAt(end)+  1;  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)+  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)+  1;	  end    =    input.charAt(end    +    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
64	[BUG]  [BUGGY]  end  =  input.charAt(end)-  1  ';';  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)-  1  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)-  1  ';';	  end    =    input.charAt(end)-    ';';    	non-compiled	[CE]  <identifier>  expected	49	None	replace
65	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)-  ';';  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end)-  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)-  ';';	  end    =    input.charAt(end)-    ';';    	non-compiled	[CE]  <identifier>  expected	49	None	replace
66	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  10;	  EndIndexOutOfBoundsException    ex    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
67	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  8;	  EndIndexOutOfBoundsException    ex    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
68	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  12;	  EndIndexOutOfBoundsException    ex    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
69	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  9;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  9;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  9;	  EndIndexOutOfBoundsException    ex    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
70	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(index);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(index);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }	  int    firstChar    =    input.charAt(end);    if(firstChar    ==    ';')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
71	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(start);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(start);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }	  int    firstChar    =    input.charAt(end);    if(firstChar    ==    ';')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
72	[BUG]  [BUGGY]  int  firstChar  =  input.length();  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.length();  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.length();  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }	  int    firstChar    =    input.charAt(end);    if(firstChar    ==    ';')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
73	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(start  -  1);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(start  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(start  -  1);	  int    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
74	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(index  -  1);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(index  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(index  -  1);	  int    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
75	[BUG]  [BUGGY]  end  =  input.charAt(end)/  2  ';';  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  2  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)/  2  ';';	  end    =    input.charAt(end)/    ';';    	non-compiled	[CE]  <identifier>  expected	40	None	replace
76	[BUG]  [BUGGY]  end  =  input.charAt(end)/  2;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  2;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)/  2;	  end    =    input.charAt(end)/    ';';    	non-compiled	[CE]  <identifier>  expected	40	None	replace
77	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)/  ';';  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end)/  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)/  ';';	  end    =    input.charAt(end)/    ';';    	non-compiled	[CE]  <identifier>  expected	40	None	replace
78	[BUG]  [BUGGY]  end  =  input.charAt(end)/  10  ';';  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  10  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)/  10  ';';	  end    =    input.charAt(end)/    ';';    	non-compiled	[CE]  <identifier>  expected	40	None	replace
79	[BUG]  [BUGGY]  End  end  =  input.subSequence(index,  end);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(index,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(index,  end);	  End    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
80	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end  +  1);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end  +  1);	  End    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
81	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end  -  1);	  End    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
82	[BUG]  [BUGGY]  End  end  =  input.subSequence(0,  end);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(0,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(0,  end);	  End    end    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
83	[BUG]  [BUGGY]  end  =  input.charAt(index  +  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(index  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(index  +  1);	  end    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
84	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)/  2;  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end)/  2;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)/  2;	  char    firstChar    =    input.charAt(end)+    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
85	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)-  2;  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end)-  2;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)-  2;	  char    firstChar    =    input.charAt(end)+    2;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
86	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString()  +  1;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString()  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString()  +  1;	  EndIndexOutOfBoundsException    out    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
87	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  1;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  1;	  EndIndexOutOfBoundsException    out    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
88	[BUG]  [BUGGY]  char  end  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  end  =  input.charAt(index);	  char    end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  char  end  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  end  =  input.charAt(start);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  end  =  input.charAt(start);	  char    end    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  out  =  input.charAt(index);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  out  =  input.charAt(index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	out  =  input.charAt(index);	  out    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
91	[BUG]  [BUGGY]  out  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  out  =  input.charAt(start);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	out  =  input.charAt(start);	  out    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
92	[BUG]  [BUGGY]  out  =  input.charAt(0);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  out  =  input.charAt(0);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	out  =  input.charAt(0);	  out    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
93	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end  +  1);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end  +  1);	  End    result    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
94	[BUG]  [BUGGY]  End  result  =  input.subSequence(index,  end);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(index,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(index,  end);	  End    result    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
95	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  index);  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  index);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  index);	  End    result    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
96	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end  -  1);	  End    result    =    input.subSequence(start,    end);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
97	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index)/  1;  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(index)/  1;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(index)/  1;	  char    firstChar    =    input.charAt(end)/    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
98	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  +  1)/  1;  [CE]  <identifier>  expected  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end  +  1)/  1;  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end  +  1)/  1;	  char    firstChar    =    input.charAt(end)/    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
99	[BUG]  [BUGGY]  end  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(start  +  1);	  end    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
100	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  10;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  10;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  10;	  EndIndexOutOfBoundsException    out    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
101	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  8;  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  8;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  8;	  EndIndexOutOfBoundsException    out    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
102	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  12;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  12;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  12;	  EndIndexOutOfBoundsException    out    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
103	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString(),  16  +  1;	  EndIndexOutOfBoundsException    out    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
104	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  10);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  10);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  10);	  End    <?>    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
105	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  12);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  12);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  12);	  End    <?>    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
106	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  8);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  8);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  8);	  End    <?>    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
107	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  2);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(start  +  2);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start  +  2);	  char    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
108	[BUG]  [BUGGY]  char  seqEnd  =  input.length();  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  seqEnd  =  input.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  seqEnd  =  input.length();	  int    seqEnd    =    input.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
109	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end);  if(firstChar  ==  ';')  {  throw  new  NumberFormatException( " ");  }	  int    firstChar    =    input.charAt(end);    if(firstChar    ==    ';')    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
110	[BUG]  [BUGGY]  end  =  input.charAt(start  -  1);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(start  -  1);	  end    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
111	[BUG]  [BUGGY]  end  =  input.charAt(end  -  2);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  2);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end  -  2);	  end    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
112	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1  +  1);  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  1  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end  -  1  +  1);	  end    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
113	[BUG]  [BUGGY]  end  =  input.charAt(start)+  1  ';';  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start)+  1  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(start)+  1  ';';	  end    =    input.charAt(start)+    ';';    	non-compiled	[CE]  <identifier>  expected	17	None	replace
114	[BUG]  [BUGGY]  end  =  input.charAt(index  -  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(index  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(index  -  1);	  end    =    input.charAt(index);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
115	[BUG]  [BUGGY]  end  =  input.charAt(end  +  2);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  +  2);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end  +  2);	  end    =    input.charAt(end    +    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
116	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end)+  ';'  +  start;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end)+  ';'  +  start;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end)+  ';'  +  start;	  char    firstChar    =    input.charAt(end)+    ';';    	non-compiled	[CE]  <identifier>  expected	15	None	replace
117	[BUG]  [BUGGY]  if(start  ==  -1)  {  start++;  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  -1)  {  start++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(start  ==  -1)  {  start++;  }	  if(!isHex)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
118	[BUG]  [BUGGY]  int  siqEnd  =  input.length();  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  siqEnd  =  input.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  siqEnd  =  input.length();	  int    seqEnd    =    input.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
119	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end).toString(),  16  +  1;	  End    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
120	[BUG]  [BUGGY]  End  result  =  input.subSequence(start,  end).toString()  +  index;  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  result  =  input.subSequence(start,  end).toString()  +  index;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  result  =  input.subSequence(start,  end).toString()  +  index;	  End    result    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
121	[BUG]  [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16  +  1;	  EndIndexOutOfBounds    exception    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
122	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  16  +  1;	  End    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
123	[BUG]  [BUGGY]  int  firstChar  =  input.charAt(end  -  1  +  1);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  firstChar  =  input.charAt(end  -  1  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  firstChar  =  input.charAt(end  -  1  +  1);	  int    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
124	[BUG]  [BUGGY]  char  seqEnd  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  seqEnd  =  input.charAt(end  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  seqEnd  =  input.charAt(end  -  1);	  char    seqEnd    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
125	[BUG]  [BUGGY]  end  =  input.charAt(end)/  2  +  ';';  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  2  +  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)/  2  +  ';';	  end    =    input.charAt(end)/    ';';    	non-compiled	[CE]  <identifier>  expected	40	None	replace
126	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString()  +  index;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString()  +  index;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  out  =  input.subSequence(start,  end).toString()  +  index;	  EndIndexOutOfBoundsException    out    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
127	[BUG]  [BUGGY]  int  seqEnd  =  input.charAt(start  +  1);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.charAt(start  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAt(start  +  1);	  int    seqEnd    =    input.charAt(start);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
128	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  -  1  +  1);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end  -  1  +  1);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end  -  1  +  1);	  char    firstChar    =    input.charAt(end    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
129	[BUG]  [BUGGY]  out  =  input.charAt(end  -  1);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  out  =  input.charAt(end  -  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	out  =  input.charAt(end  -  1);	  out    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
130	[BUG]  [BUGGY]  int  seqEnd  =  input.charAtIndex(start,  end);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.charAtIndex(start,  end);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAtIndex(start,  end);	  int    seqEnd    =    input.charAtIndex(end);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
131	[BUG]  [BUGGY]  int  seqEnd  =  input.indexOf(';');  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.indexOf(';');  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.indexOf(';');	  int    seqEnd    =    input.charAtIndex(end);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
132	[BUG]  [BUGGY]  String  firstChar  =  input.charAt(start);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  String  firstChar  =  input.charAt(start);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	String  firstChar  =  input.charAt(start);	  String    firstChar    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
133	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString()  +  index;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString()  +  index;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString()  +  index;	  EndIndexOutOfBoundsException    outIndex    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
134	[BUG]  [BUGGY]  end  =  input.charAt(start)-  ';';  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start)-  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(start)-  ';';	  end    =    input.charAt(end)-    ';';    	non-compiled	[CE]  <identifier>  expected	49	None	replace
135	[BUG]  [BUGGY]  end  =  input.charAt(end  -  1)-  ';';  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  -  1)-  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end  -  1)-  ';';	  end    =    input.charAt(end)-    ';';    	non-compiled	[CE]  <identifier>  expected	49	None	replace
136	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  +  2);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end  +  2);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end  +  2);	  char    firstChar    =    input.charAt(end    +    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
137	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(end  +  11);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(end  +  11);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(end  +  11);	  char    firstChar    =    input.charAt(end    +    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
138	[BUG]  [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16  +  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  =  input.subSequence(start,  end).toString(),  16  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  =  input.subSequence(start,  end).toString(),  16  +  1);	  End    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
139	[BUG]  [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16  +  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBounds  exception  =  input.subSequence(start,  end).toString(),  16  +  1);	  EndIndexOutOfBounds    exception    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
140	[BUG]  [BUGGY]  Integer  seqEnd  =  input.length();  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  Integer  seqEnd  =  input.length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	Integer  seqEnd  =  input.length();	  int    seqEnd    =    input.length()    -    2;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
141	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  16  +  1;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  16  +  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  ex  =  input.subSequence(start,  end).toString(),  16  +  1;	  EndIndexOutOfBoundsException    ex    =    input.subSequence(start,    end).toString(),    16;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
142	[BUG]  [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  16);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  16);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	EndIndexOutOfBoundsException  outIndex  =  input.subSequence(start,  end).toString(),  16);	  EndIndexOutOfBoundsException    outIndex    =    input.subSequence(start,    end).toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
143	[BUG]  [BUGGY]  end  =  input.charAt(end)/  1  ';';  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  1  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)/  1  ';';	  end    =    input.charAt(end)+    1    ';';    	non-compiled	[CE]  <identifier>  expected	16	None	replace
144	[BUG]  [BUGGY]  int  seqEnd  =  input.charAt(end  -  1).length();  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.charAt(end  -  1).length();  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAt(end  -  1).length();	  int    seqEnd    =    input.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
145	[BUG]  [BUGGY]  int  seqEnd  =  input.charAt(end)-  1;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.charAt(end)-  1;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.charAt(end)-  1;	  int    seqEnd    =    input.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
146	[BUG]  [BUGGY]  end  =  input.charAt(end)/  10  +  ';';  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end)/  10  +  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end)/  10  +  ';';	  end    =    input.charAt(end)/    ';';    	non-compiled	[CE]  <identifier>  expected	40	None	replace
147	[BUG]  [BUGGY]  end  =  input.charAt(end  +  11);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(end  +  11);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(end  +  11);	  end    =    input.charAt(end    +    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
148	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1,  end);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  char  firstChar  =  input.charAt(start  +  1,  end);  [BUGGY]      end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	char  firstChar  =  input.charAt(start  +  1,  end);	  char    firstChar    =    input.charAt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
149	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  index;  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  int  seqEnd  =  input.length()  -  index;  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	int  seqEnd  =  input.length()  -  index;	  int    seqEnd    =    input.length()    -    start;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
150	[BUG]  [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  16  +  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  end  =  input.subSequence(start,  end).toString(),  16  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  end  =  input.subSequence(start,  end).toString(),  16  +  1);	  End    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
151	[BUG]  [BUGGY]  end  =  input.charAt(start)/  ';';  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  end  =  input.charAt(start)/  ';';  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	end  =  input.charAt(start)/  ';';	  end    =    input.charAt(start)+    ';';    	non-compiled	[CE]  <identifier>  expected	17	None	replace
152	[BUG]  [BUGGY]  if(start  ==  end)  {  end++;  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(start  ==  end)  {  end++;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(start  ==  end)  {  end++;  }	  if(isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
153	[BUG]  [BUGGY]  if(isHex)  {  start++;  end  =  end;  }  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  if(isHex)  {  start++;  end  =  end;  }  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	if(isHex)  {  start++;  end  =  end;  }	  if(isHex)    {    end++;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
154	[BUG]  [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  16  +  1);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  End  <?>  end  =  input.subSequence(start,  end).toString(),  16  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	End  <?>  end  =  input.subSequence(start,  end).toString(),  16  +  1);	  End    <?>    end    =    input.subSequence(start,    end).toString(),    16);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
155	[BUG]  [BUGGY]  out  =  input.charAt(end  +  1);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {      [BUGGY]  out  =  input.charAt(end  +  1);  [BUGGY]      }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  }  else  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  10);  }  }  catch(NumberFormatException  nfe)  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	56	56	2	replace	out  =  input.charAt(end  +  1);	  out    =    input.charAt(end);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
