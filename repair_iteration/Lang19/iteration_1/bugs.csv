bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	add	if(seqEnd  ==  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2
2	[BUG]  [BUGGY]  if(seqEnd  ==  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  ==  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2	replace
2	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  <  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	add	if(seqEnd  <  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2
3	[BUG]  [BUGGY]  if(seqEnd  <  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  <  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  <  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  <=  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	add	if(seqEnd  <=  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2
4	[BUG]  [BUGGY]  if(seqEnd  <=  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  <=  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  <=  0  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2	replace
4	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  input.length()  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	add	if(seqEnd  ==  0  &&  index  <  input.length()  -  1  &&  input.charAt(index  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2
5	[BUG]  [BUGGY]  if(seqEnd  ==  0  &&  index  <  input.length()  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  input.length()  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  ==  0  &&  index  <  input.length()  -  1  &&  input.charAt(index  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	  	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  start  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	  	int  start  =  index  +  2;  	non-compiled	[CE]  cannot  find  symbol  start	8	None	replace
21	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  -  1;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	add	int  seqEnd  =  input.length()  -  1;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	2
22	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  1;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  -  1;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	int  seqEnd  =  input.length()  -  1;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	2	replace
22	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  -  2;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	add	int  seqEnd  =  input.length()  -  2;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	1
23	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  2;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  -  2;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	int  seqEnd  =  input.length()  -  2;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	1	replace
24	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  +  1;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	add	int  seqEnd  =  input.length()  +  1;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	2
25	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  +  1;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  +  1;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	int  seqEnd  =  input.length()  +  1;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	2	replace
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  seqEnd  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	  	int  seqEnd  =  input.length();  	non-compiled	[CE]  cannot  find  symbol  seqEnd	4	None	replace
33	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]  char  firstChar  =  input.charAt(index);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	add	char  firstChar  =  input.charAt(index);	char  firstChar  =  input.charAt(start);  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	12	2
34	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(index);  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]  char  firstChar  =  input.charAt(index);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	char  firstChar  =  input.charAt(index);	char  firstChar  =  input.charAt(start);  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	12	2	replace
35	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  firstChar  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	  	char  firstChar  =  input.charAt(start);  	non-compiled	[CE]  cannot  find  symbol  firstChar	12	None	replace
41	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    char[]  chrs  =  input.charAt(seqEnd);		non-compiled	[CE]  incompatible  types	7	None	add
42	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    char[]  chrs  =  input.toCharArray();  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    char[]  chrs  =  input.toCharArray();		non-compiled	[CE]  cannot  find  symbol	7	None	add
43	[BUG]  [BUGGY]    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  out.write(chrs[index]);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  out.write(chrs[index]);  }  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  out.write(chrs[index]);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
44	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);		non-compiled	[CE]  incompatible  types	7	None	add
51	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    char[]  chrs  =  input.charAt(start);  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    char[]  chrs  =  input.charAt(start);		non-compiled	[CE]  incompatible  types	13	None	add
52	[BUG]  [BUGGY]    out.write(chrs[index]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    out.write(chrs[index]);  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    out.write(chrs[index]);		non-compiled	[CE]  cannot  find  symbol  chrs	13	None	add
53	[BUG]  [BUGGY]    if(isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  start++;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    if(isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  start++;  }  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    if(isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  start++;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	add
54	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);		non-compiled	[CE]  incompatible  types	13	None	add
55	[BUG]  [BUGGY]    if(isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '_')  {  start++;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    if(isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '_')  {  start++;  }  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    if(isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '_')  {  start++;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	add
62	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	add	int  end  =  1;	int  end  =  start;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	20	2
63	[BUG]  [BUGGY]  int  end  =  1;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	int  end  =  1;	int  end  =  start;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	20	2	replace
63	[BUG]  [BUGGY]  int  end  =  chrs.length;  [CE]  cannot  find  symbol  chrs  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  chrs.length;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	int  end  =  chrs.length;	int  end  =  start;  	non-compiled	[CE]  cannot  find  symbol  chrs	20	None	replace
64	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  0;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	add	int  end  =  0;	int  end  =  start;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	20	2
65	[BUG]  [BUGGY]  int  end  =  0;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  0;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	int  end  =  0;	int  end  =  start;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	20	2	replace
65	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  end  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	  	int  end  =  start;  	non-compiled	[CE]  cannot  find  symbol  end	20	None	replace
72	[BUG]  [BUGGY]  start++;  if(!isHex  &&  firstChar!=  '.'  &&  firstChar!=  ':')  {  end++;  }  [CE]  cannot  find  symbol  end  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start++;  if(!isHex  &&  firstChar!=  '.'  &&  firstChar!=  ':')  {  end++;  }  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	start++;  if(!isHex  &&  firstChar!=  '.'  &&  firstChar!=  ':')  {  end++;  }	start++;  	non-compiled	[CE]  cannot  find  symbol  end	14	None	replace
73	[BUG]  [BUGGY]  start++;  if(!isHex  &&  firstChar!=  '.'  &&  firstChar!=  ':')  {  out++;  }  [CE]  bad  operand  type  Writer  for  unary  operator  '++'  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start++;  if(!isHex  &&  firstChar!=  '.'  &&  firstChar!=  ':')  {  out++;  }  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	start++;  if(!isHex  &&  firstChar!=  '.'  &&  firstChar!=  ':')  {  out++;  }	start++;  	non-compiled	[CE]  bad  operand  type  Writer  for  unary  operator  '++'	14	None	replace
74	[BUG]  [BUGGY]  start++;  if(!isHex  &&  firstChar!=  ':')  {  out.write(chrs[index]);  }  [CE]  cannot  find  symbol  chrs  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start++;  if(!isHex  &&  firstChar!=  ':')  {  out.write(chrs[index]);  }  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	start++;  if(!isHex  &&  firstChar!=  ':')  {  out.write(chrs[index]);  }	start++;  	non-compiled	[CE]  cannot  find  symbol  chrs	14	None	replace
75	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	  	start++;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	14	2
76	[BUG]  [BUGGY]    [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	  	start++;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	14	2	replace
81	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  return  1;  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	add	return  1;	return  0;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	1	2
82	[BUG]  [BUGGY]  return  1;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  return  1;  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	return  1;	return  0;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	1	2	replace
82	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  return  2;  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	add	return  2;	return  0;  	compilable	  [FE]  ComparisonFailure  testUnfinishedEntity	1	2
83	[BUG]  [BUGGY]  return  2;  [FE]  ComparisonFailure  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  return  2;  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	return  2;	return  0;  	compilable	  [FE]  ComparisonFailure  testUnfinishedEntity	1	2	replace
83	[BUG]  [BUGGY]  [FE]  NumberFormatException  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  throw  new  NumberFormatException( " ");  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	add	throw  new  NumberFormatException( " ");	return  0;  	compilable	  [FE]  NumberFormatException  testUnfinishedEntity	1	2
84	[BUG]  [BUGGY]  throw  new  NumberFormatException( " ");  [FE]  NumberFormatException  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  throw  new  NumberFormatException( " ");  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	throw  new  NumberFormatException( " ");	return  0;  	compilable	  [FE]  NumberFormatException  testUnfinishedEntity	1	2	replace
85	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	  	return  0;  	non-compiled	[CE]  missing  return  statement	1	None	replace
91	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  isHex  =  false;  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	add	isHex  =  false;	isHex  =  true;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	16	2
92	[BUG]  [BUGGY]  isHex  =  false;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  isHex  =  false;  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	isHex  =  false;	isHex  =  true;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	16	2	replace
92	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  if(isHex  &&  firstChar!=  ';')  {  isHex  =  true;  }  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	add	if(isHex  &&  firstChar!=  ';')  {  isHex  =  true;  }	isHex  =  true;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	16	2
93	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  ';')  {  isHex  =  true;  }  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  if(isHex  &&  firstChar!=  ';')  {  isHex  =  true;  }  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	if(isHex  &&  firstChar!=  ';')  {  isHex  =  true;  }	isHex  =  true;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	16	2	replace
93	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  if(isHex  &&  firstChar!=  ';')  {  isHex  =  false;  }  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	add	if(isHex  &&  firstChar!=  ';')  {  isHex  =  false;  }	isHex  =  true;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	16	2
94	[BUG]  [BUGGY]  if(isHex  &&  firstChar!=  ';')  {  isHex  =  false;  }  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  if(isHex  &&  firstChar!=  ';')  {  isHex  =  false;  }  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	if(isHex  &&  firstChar!=  ';')  {  isHex  =  false;  }	isHex  =  true;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	16	2	replace
94	[BUG]  [BUGGY]  if(isHex  ||  isHex  >  0)  {  isHex  =  true;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  if(isHex  ||  isHex  >  0)  {  isHex  =  true;  }  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	if(isHex  ||  isHex  >  0)  {  isHex  =  true;  }	isHex  =  true;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	16	None	replace
95	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	add	  	isHex  =  true;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	16	2
96	[BUG]  [BUGGY]    [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	  	isHex  =  true;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	16	2	replace
101	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(!isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(!isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
102	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(!isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(!isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
103	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
104	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  &&  firstChar  ==  'x'  &&  firstChar  ==  'X')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
104	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
105	[BUG]  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(isHex  &&  firstChar  ==  'x'  ||  firstChar  ==  'X')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
105	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	  	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	non-compiled	[CE]  illegal  start  of  type	18	None	replace
111	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =  input.toCharArray();  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =  input.toCharArray();		non-compiled	[CE]  cannot  find  symbol	5	None	add
112	[BUG]  [BUGGY]    char[]  chrs  =  input.getChrs();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =  input.getChrs();  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =  input.getChrs();		non-compiled	[CE]  cannot  find  symbol	5	None	add
113	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs);  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =  input.toCharArray();  out.write(chrs);		non-compiled	[CE]  cannot  find  symbol	5	None	add
114	[BUG]  [BUGGY]    char[]  chrs  =  input.getChars();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =  input.getChars();  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =  input.getChars();		non-compiled	[CE]  cannot  find  symbol	5	None	add
115	[BUG]  [BUGGY]    char[]  chrs  =  input.getChrs();  out.write(chrs);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =  input.getChrs();  out.write(chrs);  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =  input.getChrs();  out.write(chrs);		non-compiled	[CE]  cannot  find  symbol	5	None	add
121	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    char[]  chrs  =  input.charAt(seqEnd);		non-compiled	[CE]  incompatible  types	9	None	add
122	[BUG]  [BUGGY]    out.write(chrs[index]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    out.write(chrs[index]);  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    out.write(chrs[index]);		non-compiled	[CE]  cannot  find  symbol  chrs	9	None	add
123	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);		non-compiled	[CE]  incompatible  types	9	None	add
124	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd++);  out.write(chrs[index]);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd++);  out.write(chrs[index]);  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    char[]  chrs  =  input.charAt(seqEnd++);  out.write(chrs[index]);		non-compiled	[CE]  incompatible  types	9	None	add
125	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd++);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd++);  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    char[]  chrs  =  input.charAt(seqEnd++);		non-compiled	[CE]  incompatible  types	9	None	add
131	[BUG]  [BUGGY]    out.write(chrs[0]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(chrs[0]);  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(chrs[0]);		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
132	[BUG]  [BUGGY]    out.write(chrs[0]);  out.write(chrs[1]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(chrs[0]);  out.write(chrs[1]);  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(chrs[0]);  out.write(chrs[1]);		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
133	[BUG]  [BUGGY]    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(chrs[0]);  }  [CE]  cannot  find  symbol  isHex  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(chrs[0]);  }  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(chrs[0]);  }		non-compiled	[CE]  cannot  find  symbol  isHex	2	None	add
134	[BUG]  [BUGGY]    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(chrs[2]);  }  [CE]  cannot  find  symbol  isHex  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(chrs[2]);  }  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(chrs[2]);  }		non-compiled	[CE]  cannot  find  symbol  isHex	2	None	add
135	[BUG]  [BUGGY]    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }  [CE]  cannot  find  symbol  isHex  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    if(isHex?  1  :  0)  {  out.write(chrs[0]);  out.write(chrs[1]);  }		non-compiled	[CE]  cannot  find  symbol  isHex	2	None	add
142	[BUG]  [BUGGY]  boolean  hasHex  =  true;  [CE]  cannot  find  symbol  isHex  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]  boolean  hasHex  =  true;  [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	boolean  hasHex  =  true;	boolean  isHex  =  false;  	non-compiled	[CE]  cannot  find  symbol  isHex	10	None	replace
144	[BUG]  [BUGGY]  boolean  isHex  =  real;  [CE]  cannot  find  symbol  real  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]  boolean  isHex  =  real;  [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	boolean  isHex  =  real;	boolean  isHex  =  false;  	non-compiled	[CE]  cannot  find  symbol  real	10	None	replace
145	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  isHex  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    [BUGGY]    char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	  	boolean  isHex  =  false;  	non-compiled	[CE]  cannot  find  symbol  isHex	10	None	replace
151	[BUG]  [BUGGY]    out.write(chrs[index]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(chrs[index]);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write(chrs[index]);		non-compiled	[CE]  cannot  find  symbol  chrs	15	None	add
152	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    char[]  chrs  =  input.toCharArray();  out.write(chrs);		non-compiled	[CE]  cannot  find  symbol	15	None	add
153	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs[index]);		non-compiled	[CE]  incompatible  types	15	None	add
154	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);		non-compiled	[CE]  incompatible  types	15	None	add
155	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write('n');  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	    out.write('n');		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2
156	[BUG]  [BUGGY]    out.write('n');  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write('n');  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write('n');		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2	add
161	[BUG]  [BUGGY]    out.write(chrs[index]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(chrs[index]);  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    out.write(chrs[index]);		non-compiled	[CE]  cannot  find  symbol  chrs	17	None	add
162	[BUG]  [BUGGY]    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(seqEnd);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  out++;  }  [CE]  not  a  statement  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(seqEnd);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  out++;  }  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(seqEnd);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  out++;  }		non-compiled	[CE]  not  a  statement	17	None	add
163	[BUG]  [BUGGY]    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(seqEnd);  if(chrs!=  '+'  ||  chrs  ==  '-')  {  out++;  }  [CE]  not  a  statement  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(seqEnd);  if(chrs!=  '+'  ||  chrs  ==  '-')  {  out++;  }  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(seqEnd);  if(chrs!=  '+'  ||  chrs  ==  '-')  {  out++;  }		non-compiled	[CE]  not  a  statement	17	None	add
164	[BUG]  [BUGGY]    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  out++;  }  [CE]  not  a  statement  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  out++;  }  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  out++;  }		non-compiled	[CE]  not  a  statement	17	None	add
165	[BUG]  [BUGGY]    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  firstChar  ==  '-')  {  out++;  }  [CE]  not  a  statement  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  firstChar  ==  '-')  {  out++;  }  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    if(seqEnd  <  seqEnd)  {  -1)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  '+'  ||  firstChar  ==  '-')  {  out++;  }		non-compiled	[CE]  not  a  statement	17	None	add
171	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.charAt(start);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.charAt(start);		non-compiled	[CE]  incompatible  types	11	None	add
172	[BUG]  [BUGGY]    out.write(chrs[index]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    out.write(chrs[index]);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    out.write(chrs[index]);		non-compiled	[CE]  cannot  find  symbol  chrs	11	None	add
173	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.charAt(start);  out.write(chrs[index]);		non-compiled	[CE]  incompatible  types	11	None	add
174	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start,  index  +  1);  out.write(chrs[index]);  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.charAt(start,  index  +  1);  out.write(chrs[index]);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.charAt(start,  index  +  1);  out.write(chrs[index]);		non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	11	None	add
175	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  out.write(chrs[index],  start,  seqEnd);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.charAt(start);  out.write(chrs[index],  start,  seqEnd);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.charAt(start);  out.write(chrs[index],  start,  seqEnd);		non-compiled	[CE]  incompatible  types	11	None	add
181	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  [CE]  incompatible  types  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    char[]  chrs  =  input.charAt(start);  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    char[]  chrs  =  input.charAt(start);		non-compiled	[CE]  incompatible  types	21	None	add
182	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    char[]  chrs  =  input.toCharArray();  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    char[]  chrs  =  input.toCharArray();		non-compiled	[CE]  cannot  find  symbol	21	None	add
183	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(firstChar);  [CE]  incompatible  types  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    char[]  chrs  =  input.charAt(firstChar);  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    char[]  chrs  =  input.charAt(firstChar);		non-compiled	[CE]  incompatible  types	21	None	add
184	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start).toString();  [CE]  char  cannot  be  dereferenced  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    char[]  chrs  =  input.charAt(start).toString();  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    char[]  chrs  =  input.charAt(start).toString();		non-compiled	[CE]  char  cannot  be  dereferenced	21	None	add
185	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  int  index  =  start;  [CE]  incompatible  types  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    char[]  chrs  =  input.charAt(start);  int  index  =  start;  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    char[]  chrs  =  input.charAt(start);  int  index  =  start;		non-compiled	[CE]  incompatible  types	21	None	add
191	[BUG]  [BUGGY]    char  chrs[index]  =  input.charAt(seqEnd);  [CE]  ']'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    char  chrs[index]  =  input.charAt(seqEnd);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    char  chrs[index]  =  input.charAt(seqEnd);		non-compiled	[CE]  ']'  expected	19	None	add
193	[BUG]  [BUGGY]    char  secondChar  =  input.charAt(end);  [CE]  cannot  find  symbol  end  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    char  secondChar  =  input.charAt(end);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    char  secondChar  =  input.charAt(end);		non-compiled	[CE]  cannot  find  symbol  end	19	None	add
194	[BUG]  [BUGGY]    char  chrs  =  input.charAt(seqEnd);  [CE]  variable  chrs  is  already  defined  in  method  translate(CharSequence,int,Writer)  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    char  chrs  =  input.charAt(seqEnd);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    char  chrs  =  input.charAt(seqEnd);		non-compiled	[CE]  variable  chrs  is  already  defined  in  method  translate(CharSequence,int,Writer)	19	None	add
1	[BUG]  [BUGGY]    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  return  0;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  return  0;  }  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  return  0;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	add
3	[BUG]  [BUGGY]    if(seqEnd  <  0)  {  if(!isHex)  {  return  0;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    if(seqEnd  <  0)  {  if(!isHex)  {  return  0;  }  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    if(seqEnd  <  0)  {  if(!isHex)  {  return  0;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	add
4	[BUG]  [BUGGY]    out.write(input.getChars(start,  index));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    out.write(input.getChars(start,  index));  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    out.write(input.getChars(start,  index));		non-compiled	[CE]  cannot  find  symbol	13	None	add
5	[BUG]  [BUGGY]    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  out.write(chrs[start]);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  out.write(chrs[start]);  }  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    if(seqEnd  <  seqEnd)  {  if(!isHex)  {  out.write(chrs[start]);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	add
21	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(!isHex  &&  firstChar  ==  '+'  ||  firstChar  ==  '-')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(!isHex  &&  firstChar  ==  '+'  ||  firstChar  ==  '-')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
22	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  '+'  ||  firstChar  ==  '-')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(!isHex  &&  firstChar  ==  '+'  ||  firstChar  ==  '-')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(!isHex  &&  firstChar  ==  '+'  ||  firstChar  ==  '-')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
22	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(!isHex  &&  firstChar  ==  ';')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(!isHex  &&  firstChar  ==  ';')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
23	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  ';')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(!isHex  &&  firstChar  ==  ';')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(!isHex  &&  firstChar  ==  ';')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
23	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(!isHex  &&  firstChar  ==  ':')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(!isHex  &&  firstChar  ==  ':')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
24	[BUG]  [BUGGY]  if(!isHex  &&  firstChar  ==  ':')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(!isHex  &&  firstChar  ==  ':')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(!isHex  &&  firstChar  ==  ':')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
24	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(firstChar  ==  '+'  ||  firstChar  ==  '-')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(firstChar  ==  '+'  ||  firstChar  ==  '-')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
25	[BUG]  [BUGGY]  if(firstChar  ==  '+'  ||  firstChar  ==  '-')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(firstChar  ==  '+'  ||  firstChar  ==  '-')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  '+'  ||  firstChar  ==  '-')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
41	[BUG]  [BUGGY]    out.write(input.getChars(start,  index));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    out.write(input.getChars(start,  index));  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    out.write(input.getChars(start,  index));		non-compiled	[CE]  cannot  find  symbol	11	None	add
44	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(index);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.charAt(index);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.charAt(index);		non-compiled	[CE]  incompatible  types	11	None	add
45	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start,  index);  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.charAt(start,  index);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.charAt(start,  index);		non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	11	None	add
61	[BUG]  [BUGGY]    char  seqEnd  =  input.charAt(seqEnd);  [CE]  variable  seqEnd  is  already  defined  in  method  translate(CharSequence,int,Writer)  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    char  seqEnd  =  input.charAt(seqEnd);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    char  seqEnd  =  input.charAt(seqEnd);		non-compiled	[CE]  variable  seqEnd  is  already  defined  in  method  translate(CharSequence,int,Writer)	19	None	add
62	[BUG]  [BUGGY]    char  seqEnd  =  input.charAt(seqEnd);  isHex  =  true;  [CE]  variable  seqEnd  is  already  defined  in  method  translate(CharSequence,int,Writer)  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    char  seqEnd  =  input.charAt(seqEnd);  isHex  =  true;  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    char  seqEnd  =  input.charAt(seqEnd);  isHex  =  true;		non-compiled	[CE]  variable  seqEnd  is  already  defined  in  method  translate(CharSequence,int,Writer)	19	None	add
63	[BUG]  [BUGGY]    if(isHex)  {  if(!Character.isLetter(firstChar))  {  return  ';';  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    if(isHex)  {  if(!Character.isLetter(firstChar))  {  return  ';';  }  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    if(isHex)  {  if(!Character.isLetter(firstChar))  {  return  ';';  }		non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
64	[BUG]  [BUGGY]    if(!isHex)  {  if(firstChar  ==  '+'  ||  firstChar  ==  '-')  {  return;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    if(!isHex)  {  if(firstChar  ==  '+'  ||  firstChar  ==  '-')  {  return;  }  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    if(!isHex)  {  if(firstChar  ==  '+'  ||  firstChar  ==  '-')  {  return;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
65	[BUG]  [BUGGY]    if(isHex)  {  if(!Character.isLetter(firstChar))  {  out.write(';');  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    if(isHex)  {  if(!Character.isLetter(firstChar))  {  out.write(';');  }  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    if(isHex)  {  if(!Character.isLetter(firstChar))  {  out.write(';');  }		non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
81	[BUG]  [BUGGY]    out.write(chrs[index]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(chrs[index]);  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(chrs[index]);		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
82	[BUG]  [BUGGY]    out.write(chrs);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(chrs);  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(chrs);		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
83	[BUG]  [BUGGY]    out.write(chrs[index  -  1]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(chrs[index  -  1]);  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(chrs[index  -  1]);		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
84	[BUG]  [BUGGY]    out.write(chrs[index  -  start]);  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(chrs[index  -  start]);  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(chrs[index  -  start]);		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
85	[BUG]  [BUGGY]    out.write(Input.toString(index));  [CE]  cannot  find  symbol  Input  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(Input.toString(index));  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(Input.toString(index));		non-compiled	[CE]  cannot  find  symbol  Input	2	None	add
101	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(input.charAt(start));  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	    out.write(input.charAt(start));		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2
102	[BUG]  [BUGGY]    out.write(input.charAt(start));  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(input.charAt(start));  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write(input.charAt(start));		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2	add
102	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(input.charAt(start));  isHex  =  true;  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	    out.write(input.charAt(start));  isHex  =  true;		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2
103	[BUG]  [BUGGY]    out.write(input.charAt(start));  isHex  =  true;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(input.charAt(start));  isHex  =  true;  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write(input.charAt(start));  isHex  =  true;		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2	add
103	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(index);  out.write(chrs,  start,  seqEnd);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    char[]  chrs  =  input.charAt(index);  out.write(chrs,  start,  seqEnd);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    char[]  chrs  =  input.charAt(index);  out.write(chrs,  start,  seqEnd);		non-compiled	[CE]  incompatible  types	15	None	add
104	[BUG]  [BUGGY]    out.write(input.charAt(start),  index);  [CE]  no  suitable  method  found  for  write(char,int)  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(input.charAt(start),  index);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write(input.charAt(start),  index);		non-compiled	[CE]  no  suitable  method  found  for  write(char,int)	15	None	add
105	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(index  +  1);  out.write(chrs,  start,  seqEnd);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    char[]  chrs  =  input.charAt(index  +  1);  out.write(chrs,  start,  seqEnd);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    char[]  chrs  =  input.charAt(index  +  1);  out.write(chrs,  start,  seqEnd);		non-compiled	[CE]  incompatible  types	15	None	add
123	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  -  4;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	add	int  seqEnd  =  input.length()  -  4;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	1
124	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  4;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  -  4;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	int  seqEnd  =  input.length()  -  4;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	1	replace
124	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  -  3;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	add	int  seqEnd  =  input.length()  -  3;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	1
125	[BUG]  [BUGGY]  int  seqEnd  =  input.length()  -  3;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]  int  seqEnd  =  input.length()  -  3;  [BUGGY]    if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	int  seqEnd  =  input.length()  -  3;	int  seqEnd  =  input.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	4	1	replace
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  seqEnd)  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	add	if(seqEnd  ==  0  &&  index  <  seqEnd)  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2
142	[BUG]  [BUGGY]  if(seqEnd  ==  0  &&  index  <  seqEnd)  {  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  seqEnd)  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  ==  0  &&  index  <  seqEnd)  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2	replace
142	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index!=  seqEnd)  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	add	if(seqEnd  ==  0  &&  index!=  seqEnd)  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2
143	[BUG]  [BUGGY]  if(seqEnd  ==  0  &&  index!=  seqEnd)  {  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index!=  seqEnd)  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  ==  0  &&  index!=  seqEnd)  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2	replace
143	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  >=  seqEnd)  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	add	if(seqEnd  ==  0  &&  index  >=  seqEnd)  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2
144	[BUG]  [BUGGY]  if(seqEnd  ==  0  &&  index  >=  seqEnd)  {  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  >=  seqEnd)  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  ==  0  &&  index  >=  seqEnd)  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2	replace
144	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  input.length())  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	add	if(seqEnd  ==  0  &&  index  <  input.length())  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2
145	[BUG]  [BUGGY]  if(seqEnd  ==  0  &&  index  <  input.length())  {  [FE]  ComparisonFailure  testSupplementaryUnescaping  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  input.length())  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  ==  0  &&  index  <  input.length())  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	compilable	  [FE]  ComparisonFailure  testSupplementaryUnescaping	6	2	replace
162	[BUG]  [BUGGY]  out++;  [CE]  bad  operand  type  Writer  for  unary  operator  '++'  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  out++;  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	out++;	start++;  	non-compiled	[CE]  bad  operand  type  Writer  for  unary  operator  '++'	14	None	replace
163	[BUG]  [BUGGY]  end++;  [CE]  cannot  find  symbol  end  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  end++;  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	end++;	start++;  	non-compiled	[CE]  cannot  find  symbol  end	14	None	replace
164	[BUG]  [BUGGY]  begin++;  [CE]  cannot  find  symbol  begin  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  begin++;  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	begin++;	start++;  	non-compiled	[CE]  cannot  find  symbol  begin	14	None	replace
182	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(index);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    char[]  chrs  =  input.charAt(index);  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    char[]  chrs  =  input.charAt(index);		non-compiled	[CE]  incompatible  types	9	None	add
185	[BUG]  [BUGGY]    out.write(input.getChars(0,  index));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    out.write(input.getChars(0,  index));  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    out.write(input.getChars(0,  index));		non-compiled	[CE]  cannot  find  symbol	9	None	add
201	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(index);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    char[]  chrs  =  input.charAt(index);  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    char[]  chrs  =  input.charAt(index);		non-compiled	[CE]  incompatible  types	7	None	add
203	[BUG]  [BUGGY]    int  entityValue  =  input.getEntityValue();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    int  entityValue  =  input.getEntityValue();  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    int  entityValue  =  input.getEntityValue();		non-compiled	[CE]  cannot  find  symbol	7	None	add
204	[BUG]  [BUGGY]    if(seqEnd  <  0)  {  if(index  ==  seqEnd)  {  return  0;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    if(seqEnd  <  0)  {  if(index  ==  seqEnd)  {  return  0;  }  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    if(seqEnd  <  0)  {  if(index  ==  seqEnd)  {  return  0;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
205	[BUG]  [BUGGY]    if(seqEnd  <  0)  {  if(index  ==  seqEnd)  {  return  -1;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    if(seqEnd  <  0)  {  if(index  ==  seqEnd)  {  return  -1;  }  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    if(seqEnd  <  0)  {  if(index  ==  seqEnd)  {  return  -1;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
222	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start,  index);  [CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]  char  firstChar  =  input.charAt(start,  index);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	char  firstChar  =  input.charAt(start,  index);	char  firstChar  =  input.charAt(start);  	non-compiled	[CE]  method  charAt  in  interface  CharSequence  cannot  be  applied  to  given  types;	12	None	replace
224	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	add	char  firstChar  =  input.charAt(start  +  1);	char  firstChar  =  input.charAt(start);  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	12	2
225	[BUG]  [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]  char  firstChar  =  input.charAt(start  +  1);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	char  firstChar  =  input.charAt(start  +  1);	char  firstChar  =  input.charAt(start);  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	12	2	replace
241	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(firstChar);  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	add	    out.write(firstChar);		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	17	2
242	[BUG]  [BUGGY]    out.write(firstChar);  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(firstChar);  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    out.write(firstChar);		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	17	2	add
242	[BUG]  [BUGGY]    out.write(input.getChars(start,  index));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(input.getChars(start,  index));  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    out.write(input.getChars(start,  index));		non-compiled	[CE]  cannot  find  symbol	17	None	add
243	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(input.charAt(start));  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	add	    out.write(input.charAt(start));		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	17	2
244	[BUG]  [BUGGY]    out.write(input.charAt(start));  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(input.charAt(start));  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    out.write(input.charAt(start));		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	17	2	add
244	[BUG]  [BUGGY]    boolean  isHex  =  input.length()  ==  seqEnd;  [CE]  variable  isHex  is  already  defined  in  method  translate(CharSequence,int,Writer)  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    boolean  isHex  =  input.length()  ==  seqEnd;  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    boolean  isHex  =  input.length()  ==  seqEnd;		non-compiled	[CE]  variable  isHex  is  already  defined  in  method  translate(CharSequence,int,Writer)	17	None	add
245	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(input.charAt(index));  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	add	    out.write(input.charAt(index));		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	17	2
246	[BUG]  [BUGGY]    out.write(input.charAt(index));  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(input.charAt(index));  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    out.write(input.charAt(index));		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	17	2	add
262	[BUG]  [BUGGY]  return  0L;  [CE]  possible  loss  of  precision  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  return  0L;  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	return  0L;	return  0;  	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
264	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	add	throw  new  IllegalArgumentException( " ");	return  0;  	compilable	  [FE]  IllegalArgumentException  testUnfinishedEntity	1	2
265	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	throw  new  IllegalArgumentException( " ");	return  0;  	compilable	  [FE]  IllegalArgumentException  testUnfinishedEntity	1	2	replace
302	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  start  +  1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	add	int  end  =  start  +  1;	int  end  =  start;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	20	2
303	[BUG]  [BUGGY]  int  end  =  start  +  1;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  start  +  1;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	int  end  =  start  +  1;	int  end  =  start;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	20	2	replace
304	[BUG]  [BUGGY]  int  end  =  _indexOf(firstChar);  [CE]  cannot  find  symbol  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  _indexOf(firstChar);  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	int  end  =  _indexOf(firstChar);	int  end  =  start;  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
322	[BUG]  [BUGGY]    char[]  chrs  =  input.getChars(0,  index);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =  input.getChars(0,  index);  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =  input.getChars(0,  index);		non-compiled	[CE]  cannot  find  symbol	5	None	add
323	[BUG]  [BUGGY]    char[]  chrs  =  input.getChars(index);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =  input.getChars(index);  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =  input.getChars(index);		non-compiled	[CE]  cannot  find  symbol	5	None	add
325	[BUG]  [BUGGY]    int  index  =  input.length();  [CE]  variable  index  is  already  defined  in  method  translate(CharSequence,int,Writer)  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    int  index  =  input.length();  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    int  index  =  input.length();		non-compiled	[CE]  variable  index  is  already  defined  in  method  translate(CharSequence,int,Writer)	5	None	add
342	[BUG]  [BUGGY]  int  start  =  index  +  1,  seqEnd  -  1;  [CE]  ';'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  1,  seqEnd  -  1;  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	int  start  =  index  +  1,  seqEnd  -  1;	int  start  =  index  +  2;  	non-compiled	[CE]  ';'  expected	8	None	replace
362	[BUG]  [BUGGY]    int  start  =  input.length();  while(input.charAt(start)!=  ';')  {  start++;  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    int  start  =  input.length();  while(input.charAt(start)!=  ';')  {  start++;  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    int  start  =  input.length();  while(input.charAt(start)!=  ';')  {  start++;		non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
363	[BUG]  [BUGGY]    if(isHex)  {  if(chrs[index]  ==  ';')  {  out.write(chrs[index]);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    if(isHex)  {  if(chrs[index]  ==  ';')  {  out.write(chrs[index]);  }  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    if(isHex)  {  if(chrs[index]  ==  ';')  {  out.write(chrs[index]);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
364	[BUG]  [BUGGY]    if(isHex)  {  if(chrs[index]  ==  ';')  {  start++;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    if(isHex)  {  if(chrs[index]  ==  ';')  {  start++;  }  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    if(isHex)  {  if(chrs[index]  ==  ';')  {  start++;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
365	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(start);  int  start  =  start;  [CE]  incompatible  types  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    char[]  chrs  =  input.charAt(start);  int  start  =  start;  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    char[]  chrs  =  input.charAt(start);  int  start  =  start;		non-compiled	[CE]  incompatible  types	21	None	add
382	[BUG]  [BUGGY]  isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')  [CE]  ';'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')	isHex  =  true;  	non-compiled	[CE]  ';'  expected	16	None	replace
383	[BUG]  [BUGGY]  isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')&&  [CE]  ';'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')&&  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')&&	isHex  =  true;  	non-compiled	[CE]  ';'  expected	16	None	replace
384	[BUG]  [BUGGY]  isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')-  1;  [CE]  ';'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')-  1;  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	isHex  =(!isHex  &&  firstChar!=  ';')&&  firstChar!=  'X'  ||  firstChar  ==  'Y')&&  firstChar!=  'Z'  ||  firstChar  ==  'a'  &&  firstChar  <=  'z')-  1;	isHex  =  true;  	non-compiled	[CE]  ';'  expected	16	None	replace
2	[BUG]  [BUGGY]    if(isHex)  {  if(char  firstChar  ==  ';')  {  out.write(firstChar);  }  [CE]  '.class'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    if(isHex)  {  if(char  firstChar  ==  ';')  {  out.write(firstChar);  }  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    if(isHex)  {  if(char  firstChar  ==  ';')  {  out.write(firstChar);  }		non-compiled	[CE]  '.class'  expected	19	None	add
3	[BUG]  [BUGGY]    char  firstChar  =  input.charAt(seqEnd);  [CE]  variable  firstChar  is  already  defined  in  method  translate(CharSequence,int,Writer)  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    char  firstChar  =  input.charAt(seqEnd);  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    char  firstChar  =  input.charAt(seqEnd);		non-compiled	[CE]  variable  firstChar  is  already  defined  in  method  translate(CharSequence,int,Writer)	19	None	add
4	[BUG]  [BUGGY]    if(!isHex)  {  if(char  firstChar  ==  '+'  ||  firstChar  ==  '-')  {  out.write(firstChar);  }  [CE]  '.class'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    if(!isHex)  {  if(char  firstChar  ==  '+'  ||  firstChar  ==  '-')  {  out.write(firstChar);  }  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    if(!isHex)  {  if(char  firstChar  ==  '+'  ||  firstChar  ==  '-')  {  out.write(firstChar);  }		non-compiled	[CE]  '.class'  expected	19	None	add
5	[BUG]  [BUGGY]    if(isHex)  {  if(!Character.isUpperCase(firstChar))  {  out.write('.');  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]    if(isHex)  {  if(!Character.isUpperCase(firstChar))  {  out.write('.');  }  [BUGGY]  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	    if(isHex)  {  if(!Character.isUpperCase(firstChar))  {  out.write('.');  }		non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
34	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  start  +  2;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	add	int  end  =  start  +  2;	int  end  =  start;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	20	2
35	[BUG]  [BUGGY]  int  end  =  start  +  2;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]  int  end  =  start  +  2;  [BUGGY]    while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	int  end  =  start  +  2;	int  end  =  start;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	20	2	replace
64	[BUG]  [BUGGY]    char[]  chrs  =  getChars(input,  out,  seqEnd);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    char[]  chrs  =  getChars(input,  out,  seqEnd);  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    char[]  chrs  =  getChars(input,  out,  seqEnd);		non-compiled	[CE]  cannot  find  symbol	7	None	add
65	[BUG]  [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs);  [CE]  incompatible  types  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs);  [BUGGY]  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	    char[]  chrs  =  input.charAt(seqEnd);  out.write(chrs);		non-compiled	[CE]  incompatible  types	7	None	add
92	[BUG]  [BUGGY]  if(input.charAt(seqEnd)  ==  '&'  &&  index  <  input.length  -  1  &&  input.charAt(seqEnd  +  1)  ==  '#')  {  [CE]  cannot  find  symbol  length  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(input.charAt(seqEnd)  ==  '&'  &&  index  <  input.length  -  1  &&  input.charAt(seqEnd  +  1)  ==  '#')  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(input.charAt(seqEnd)  ==  '&'  &&  index  <  input.length  -  1  &&  input.charAt(seqEnd  +  1)  ==  '#')  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	non-compiled	[CE]  cannot  find  symbol  length	6	None	replace
93	[BUG]  [BUGGY]  if(seqEnd  ==  0  &&  index  <  input.length  -  1)  {  [CE]  cannot  find  symbol  length  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();    [BUGGY]  if(seqEnd  ==  0  &&  index  <  input.length  -  1)  {  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	40	40	2	replace	if(seqEnd  ==  0  &&  index  <  input.length  -  1)  {	if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  	non-compiled	[CE]  cannot  find  symbol  length	6	None	replace
151	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.toCharArray();  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.toCharArray();		non-compiled	[CE]  cannot  find  symbol	11	None	add
152	[BUG]  [BUGGY]    char[]  chrs  =(char[])input.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =(char[])input.toCharArray();  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =(char[])input.toCharArray();		non-compiled	[CE]  cannot  find  symbol	11	None	add
153	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs,  start,  seqEnd);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs,  start,  seqEnd);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.toCharArray();  out.write(chrs,  start,  seqEnd);		non-compiled	[CE]  cannot  find  symbol	11	None	add
154	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs);  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	42	42	2	replace	    char[]  chrs  =  input.toCharArray();  out.write(chrs);		non-compiled	[CE]  cannot  find  symbol	11	None	add
182	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(firstChar  ==  ';'  ||  firstChar  ==  'x')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
183	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'x')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'x')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
183	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(firstChar  ==  ';'  &&  firstChar!=  'x')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(firstChar  ==  ';'  &&  firstChar!=  'x')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
184	[BUG]  [BUGGY]  if(firstChar  ==  ';'  &&  firstChar!=  'x')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(firstChar  ==  ';'  &&  firstChar!=  'x')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  &&  firstChar!=  'x')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
184	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'n'  ||  firstChar  ==  'r')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	add	if(firstChar  ==  ';'  ||  firstChar  ==  'n'  ||  firstChar  ==  'r')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2
185	[BUG]  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'n'  ||  firstChar  ==  'r')  {  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  [BUGGY]  if(firstChar  ==  ';'  ||  firstChar  ==  'n'  ||  firstChar  ==  'r')  {  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	45	45	2	replace	if(firstChar  ==  ';'  ||  firstChar  ==  'n'  ||  firstChar  ==  'r')  {	if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	18	2	replace
211	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write('.');  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	    out.write('.');		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2
212	[BUG]  [BUGGY]    out.write('.');  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write('.');  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write('.');		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2	add
212	[BUG]  [BUGGY]    out.write(introspect(seqEnd));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(introspect(seqEnd));  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write(introspect(seqEnd));		non-compiled	[CE]  cannot  find  symbol	15	None	add
213	[BUG]  [BUGGY]    out.write(introspect(firstChar));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(introspect(firstChar));  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write(introspect(firstChar));		non-compiled	[CE]  cannot  find  symbol	15	None	add
214	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(firstChar);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	    out.write(firstChar);		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2
215	[BUG]  [BUGGY]    out.write(firstChar);  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(firstChar);  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write(firstChar);		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2	add
215	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(';');  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	    out.write(';');		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2
216	[BUG]  [BUGGY]    out.write(';');  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]    out.write(';');  [BUGGY]  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	    out.write(';');		compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	15	2	add
243	[BUG]  [BUGGY]  int  start  =  input.length  +  2;  [CE]  cannot  find  symbol  length  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]  int  start  =  input.length  +  2;  [BUGGY]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	int  start  =  input.length  +  2;	int  start  =  index  +  2;  	non-compiled	[CE]  cannot  find  symbol  length	8	None	replace
301	[BUG]  [BUGGY]    out.write(Input.toString(chrs,  start,  index));  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(Input.toString(chrs,  start,  index));  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(Input.toString(chrs,  start,  index));		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
302	[BUG]  [BUGGY]    out.write(Input.toString(chrs[index]));  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(Input.toString(chrs[index]));  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(Input.toString(chrs[index]));		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
303	[BUG]  [BUGGY]    out.write(Input.toString(chrs));  [CE]  cannot  find  symbol  chrs  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(Input.toString(chrs));  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(Input.toString(chrs));		non-compiled	[CE]  cannot  find  symbol  chrs	2	None	add
304	[BUG]  [BUGGY]    out.write(Integer.toHexString(input));  [CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]    out.write(Integer.toHexString(input));  [BUGGY]  return  0;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	    out.write(Integer.toHexString(input));		non-compiled	[CE]  method  toHexString  in  class  Integer  cannot  be  applied  to  given  types;	2	None	add
333	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start  =  index  +  1;  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	start  =  index  +  1;	start++;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	14	2
334	[BUG]  [BUGGY]  start  =  index  +  1;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start  =  index  +  1;  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	start  =  index  +  1;	start++;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	14	2	replace
334	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start  =  index  -  1;  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	add	start  =  index  -  1;	start++;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	14	2
335	[BUG]  [BUGGY]  start  =  index  -  1;  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  [BUGGY]  start  =  index  -  1;  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	46	46	2	replace	start  =  index  -  1;	start++;  	compilable	  [FE]  StringIndexOutOfBoundsException  testUnfinishedEntity	14	2	replace
363	[BUG]  [BUGGY]    out.write(input.getBoolean());  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(input.getBoolean());  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    out.write(input.getBoolean());		non-compiled	[CE]  cannot  find  symbol	17	None	add
364	[BUG]  [BUGGY]    out.write(introspect(firstChar));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(introspect(firstChar));  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    out.write(introspect(firstChar));		non-compiled	[CE]  cannot  find  symbol	17	None	add
365	[BUG]  [BUGGY]    out.write(introspect(seqEnd));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    out.write(introspect(seqEnd));  [BUGGY]  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	    out.write(introspect(seqEnd));		non-compiled	[CE]  cannot  find  symbol	17	None	add
393	[BUG]  [BUGGY]    if(isHex)  {  char[]  chrs  =  input.charAt(start++);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  start++;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    if(isHex)  {  char[]  chrs  =  input.charAt(start++);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  start++;  }  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    if(isHex)  {  char[]  chrs  =  input.charAt(start++);  if(chrs  ==  '+'  ||  chrs  ==  '-')  {  start++;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	add
394	[BUG]  [BUGGY]    if(input.length  ==  seqEnd)  {  boolean  isHex  =  true;  if(chrs[index]  ==  '+'  ||  chrs[index]  ==  '-')  {  start++;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    if(input.length  ==  seqEnd)  {  boolean  isHex  =  true;  if(chrs[index]  ==  '+'  ||  chrs[index]  ==  '-')  {  start++;  }  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    if(input.length  ==  seqEnd)  {  boolean  isHex  =  true;  if(chrs[index]  ==  '+'  ||  chrs[index]  ==  '-')  {  start++;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	add
395	[BUG]  [BUGGY]    if(input.length  ==  seqEnd)  {  boolean  isHex  =  true;  if(chrs[index]  ==  '+'  ||  chrs[index]  ==  '-')  {  out.write('n');  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  [BUGGY]    if(input.length  ==  seqEnd)  {  boolean  isHex  =  true;  if(chrs[index]  ==  '+'  ||  chrs[index]  ==  '-')  {  out.write('n');  }  [BUGGY]  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  int  end  =  start;  while(input.charAt(end)  !=  ';')  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	44	44	2	replace	    if(input.length  ==  seqEnd)  {  boolean  isHex  =  true;  if(chrs[index]  ==  '+'  ||  chrs[index]  ==  '-')  {  out.write('n');  }		non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	add
423	[BUG]  [BUGGY]    out.write(input.getChars(0,  seqEnd));  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    out.write(input.getChars(0,  seqEnd));  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    out.write(input.getChars(0,  seqEnd));		non-compiled	[CE]  cannot  find  symbol	9	None	add
425	[BUG]  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  [BUGGY]    char[]  chrs  =  input.toCharArray();  out.write(chrs);  [BUGGY]  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	41	41	2	replace	    char[]  chrs  =  input.toCharArray();  out.write(chrs);		non-compiled	[CE]  cannot  find  symbol	9	None	add
452	[BUG]  [BUGGY]  isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  ++seqEnd;  [CE]  ';'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  ++seqEnd;  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  ++seqEnd;	isHex  =  true;  	non-compiled	[CE]  ';'  expected	16	None	replace
453	[BUG]  [BUGGY]  isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'x')  {  ++seqEnd;  [CE]  ';'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'x')  {  ++seqEnd;  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'x')  {  ++seqEnd;	isHex  =  true;  	non-compiled	[CE]  ';'  expected	16	None	replace
454	[BUG]  [BUGGY]  isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;  [CE]  ';'  expected  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]  isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;  [BUGGY]    }  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.7071067811865475	47	47	2	replace	isHex  =(isHex  ==  false)?  true  :  firstChar.charAt(seqEnd)  ==  ';'  &&  firstChar!=  'x'  ||  firstChar  ==  'X')  {  start++;	isHex  =  true;  	non-compiled	[CE]  ';'  expected	16	None	replace
483	[BUG]  [BUGGY]  [FE]  IllegalStateException  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	add	throw  new  IllegalStateException( " ");	return  0;  	compilable	  [FE]  IllegalStateException  testUnfinishedEntity	1	2
484	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  IllegalStateException  testUnfinishedEntity  [CONTEXT]  char[]  chrs  =  Character.toChars(entityValue);  out.write(chrs[0]);  out.write(chrs[1]);  }  else  {  out.write(entityValue);  }  return  2  +  (end  -  start)  +  (isHex  ?  1  :  0)  +  1;  }  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	1.0	82	82	2	replace	throw  new  IllegalStateException( " ");	return  0;  	compilable	  [FE]  IllegalStateException  testUnfinishedEntity	1	2	replace
511	[BUG]  [BUGGY]    while(input.charAt(start)!=  ';')  {  start++;  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    while(input.charAt(start)!=  ';')  {  start++;  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    while(input.charAt(start)!=  ';')  {  start++;		non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
512	[BUG]  [BUGGY]    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  ';')  {  out.write(chrs);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  ';')  {  out.write(chrs);  }  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  ';')  {  out.write(chrs);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
513	[BUG]  [BUGGY]    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs!=  ';')  {  out.write(chrs);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs!=  ';')  {  out.write(chrs);  }  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs!=  ';')  {  out.write(chrs);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
515	[BUG]  [BUGGY]    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  ';')  {  start++;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  }  [BUGGY]    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  ';')  {  start++;  }  [BUGGY]  int  end  =  start;  while(input.charAt(end)  !=  ';')  {  end++;  }  int  entityValue;  try  {  if(isHex)  {  entityValue  =  Integer.parseInt(input.subSequence(start,  end).toString(),  16);  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.5	52	52	2	replace	    if(!isHex)  {  char[]  chrs  =  input.charAt(start);  if(chrs  ==  ';')  {  start++;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
572	[BUG]  [BUGGY]    char[]  chrs  =(char[])input.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =(char[])input.toCharArray();  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =(char[])input.toCharArray();		non-compiled	[CE]  cannot  find  symbol	5	None	add
574	[BUG]  [BUGGY]    char[]  chrs  =  getChars(input,  out);  [CE]  cannot  find  symbol  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    char[]  chrs  =  getChars(input,  out);  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    char[]  chrs  =  getChars(input,  out);		non-compiled	[CE]  cannot  find  symbol	5	None	add
575	[BUG]  [BUGGY]    out.write(Integer.toString(input));  [CE]  no  suitable  method  found  for  toString(CharSequence)  [CONTEXT]  public  int  translate(CharSequence  input,  int  index,  Writer  out)  throws  IOException  {  [BUGGY]    out.write(Integer.toString(input));  [BUGGY]  int  seqEnd  =  input.length();  if(input.charAt(index)  ==  '&'  &&  index  <  seqEnd  -  1  &&  input.charAt(index  +  1)  ==  '#')  {  int  start  =  index  +  2;  boolean  isHex  =  false;  char  firstChar  =  input.charAt(start);  if(firstChar  ==  'x'  ||  firstChar  ==  'X')  {  start++;  isHex  =  true;  [CLASS]  NumericEntityUnescaper  [METHOD]  translate  [RETURN_TYPE]  int  CharSequence  input  int  index  Writer  out  [VARIABLES]  boolean  isHex  CharSequence  input  char  firstChar  NumberFormatException  nfe  int  end  entityValue  index  seqEnd  start  Writer  out  char[]  chrs  	projects/Lang19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java	0.8164965809277261	38	38	2	replace	    out.write(Integer.toString(input));		non-compiled	[CE]  no  suitable  method  found  for  toString(CharSequence)	5	None	add
