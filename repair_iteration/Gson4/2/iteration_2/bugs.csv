bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  bucket(0)  {  checkLenient();  }  [CE]  orphaned  case  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucket(0)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucket(0)  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	4	None	replace
2	[BUG]  [BUGGY]  readLenient();  [CE]  orphaned  case  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  readLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	readLenient();	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	4	None	replace
3	[BUG]  [BUGGY]  pendInt(stackSize  -  1))  {  checkLenient();  }  [CE]  orphaned  case  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendInt(stackSize  -  1))  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendInt(stackSize  -  1))  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	4	None	replace
4	[BUG]  [BUGGY]  pendInt(stackSize,  peekedLong);  [CE]  orphaned  case  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendInt(stackSize,  peekedLong);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendInt(stackSize,  peekedLong);	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	4	None	replace
5	[BUG]  [BUGGY]  pendInt(stackSize,  peekedLong)  {  checkLenient();  }  [CE]  orphaned  case  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendInt(stackSize,  peekedLong)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendInt(stackSize,  peekedLong)  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	4	None	replace
6	[BUG]  [BUGGY]  pendInt(stackSize,  peekedLong,  PEEKED_BUFFERED);  [CE]  orphaned  case  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendInt(stackSize,  peekedLong,  PEEKED_BUFFERED);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendInt(stackSize,  peekedLong,  PEEKED_BUFFERED);	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	4	None	replace
7	[BUG]  [BUGGY]  bucket(1)  {  checkLenient();  }  [CE]  orphaned  case  [FE]                          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucket(1)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucket(1)  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	4	None	replace
8	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[stackSize]);  [CE]  orphaned  case  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
9	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[stackSize]);  break;  [CE]  orphaned  case  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[stackSize]);  break;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[stackSize]);  break;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
10	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);  [CE]  orphaned  case  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
11	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[3]);  [CE]  orphaned  case  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[3]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[3]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  orphaned  case	10	None	replace
12	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[1]);  break;  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[1]);  break;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[1]);  break;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
13	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[3],  pathIndices[3]);  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[3],  pathIndices[3]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[3],  pathIndices[3]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
14	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[4],  pathIndices[3]);  [CE]  illegal  start  of  expression  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[4],  pathIndices[3]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[2],  pathIndices[4],  pathIndices[3]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  while(t.hasNext())  {  try  {  checkLenient();  }  catch(Throwable  t)  {  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  while(t.hasNext())  {  try  {  checkLenient();  }  catch(Throwable  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	while(t.hasNext())  {  try  {  checkLenient();  }  catch(Throwable  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  try  {  return  checkLenient();  }  catch(Throwable  t)  {  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  return  checkLenient();  }  catch(Throwable  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  return  checkLenient();  }  catch(Throwable  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Exception  t)  {  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Exception  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Exception  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  try  {  }  catch(Throwable  t)  {  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  }  catch(Throwable  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  }  catch(Throwable  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  try  {  checkIndices();  }  catch(Throwable  t)  {  }  [CE]  orphaned  case  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkIndices();  }  catch(Throwable  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkIndices();  }  catch(Throwable  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  orphaned  case	13	None	replace
20	[BUG]  [BUGGY]  try  {  break;  }  catch(Throwable  t)  {  }  [CE]  orphaned  case  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  break;  }  catch(Throwable  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  break;  }  catch(Throwable  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  orphaned  case	13	None	replace
21	[BUG]  [BUGGY]  bucket();  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucket();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucket();	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  CheckLenient();  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  CheckLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	CheckLenient();	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  luate();  [CE]  orphaned  case  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  luate();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	luate();	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	1	None	replace
24	[BUG]  [BUGGY]  safeNumber();  [CE]  orphaned  case  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumber();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumber();	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	1	None	replace
25	[BUG]  [BUGGY]  safePeek();  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safePeek();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safePeek();	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  safely();  [CE]  orphaned  case  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safely();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safely();	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  case	1	None	replace
27	[BUG]  [BUGGY]  sweepLenient();  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  sweepLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	sweepLenient();	  if(stackSize    >    1)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[1]);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[1]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  stack,  peekedString,  pathNames[1]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  pendIndices.add(peekedString,  pathNames[stackSize]);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[3]);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[3]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices.add(pathIndices[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[3]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
31	[BUG]  [BUGGY]  checkLenient(peek);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(peek);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(peek);	  checkLenient(stackSize);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  checkLenient(peekedString);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(peekedString);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(peekedString);	  checkLenient(stackSize);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  checkLenient(peeked);  [CE]  orphaned  case  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(peeked);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(peeked);	  checkLenient(stackSize);    	non-compiled	[CE]  orphaned  case	9	None	replace
34	[BUG]  [BUGGY]  int  stackSize  =  stack.size();  [CE]  orphaned  case  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int  stackSize  =  stack.size();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int  stackSize  =  stack.size();	  checkLenient(stackSize);    	non-compiled	[CE]  orphaned  case	9	None	replace
35	[BUG]  [BUGGY]  checkLenient(peekSize);  [CE]  orphaned  case  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(peekSize);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(peekSize);	  checkLenient(stackSize);    	non-compiled	[CE]  orphaned  case	9	None	replace
36	[BUG]  [BUGGY]  checkLenient(peekedString,  peekedSize);  [CE]  orphaned  case  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(peekedString,  peekedSize);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(peekedString,  peekedSize);	  checkLenient(stackSize);    	non-compiled	[CE]  orphaned  case	9	None	replace
37	[BUG]  [BUGGY]  checkLenient(peekedString,  stackSize);  [CE]  orphaned  case  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(peekedString,  stackSize);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(peekedString,  stackSize);	  checkLenient(stackSize);    	non-compiled	[CE]  orphaned  case	9	None	replace
38	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Throwable  ioe)  {  }  [CE]  orphaned  case  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Throwable  ioe)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Throwable  ioe)  {  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  orphaned  case	14	None	replace
39	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Exception  ioe)  {  }  [CE]  orphaned  case  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Exception  ioe)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Exception  ioe)  {  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  orphaned  case	14	None	replace
40	[BUG]  [BUGGY]  try  {  return  checkLenient();  }  catch(IOException  ioe)  {  }  [CE]  orphaned  case  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  return  checkLenient();  }  catch(IOException  ioe)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  return  checkLenient();  }  catch(IOException  ioe)  {  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  orphaned  case	14	None	replace
41	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(JsonNullException  ioe)  {  }  [CE]  orphaned  case  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(JsonNullException  ioe)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(JsonNullException  ioe)  {  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  orphaned  case	14	None	replace
42	[BUG]  [BUGGY]  try  {  break;  }  catch(IOException  ioe)  {  }  [CE]  orphaned  case  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  break;  }  catch(IOException  ioe)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  break;  }  catch(IOException  ioe)  {  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  orphaned  case	14	None	replace
43	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Throwable  e)  {  }  [CE]  orphaned  case  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Throwable  e)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Throwable  e)  {  }	  try    {    checkLenient();    }    catch(Exception    e)    {    }    	non-compiled	[CE]  orphaned  case	17	None	replace
44	[BUG]  [BUGGY]  try  {  return  checkLenient();  }  catch(Throwable  e)  {  }  [CE]  orphaned  case  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  return  checkLenient();  }  catch(Throwable  e)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  return  checkLenient();  }  catch(Throwable  e)  {  }	  try    {    checkLenient();    }    catch(Exception    e)    {    }    	non-compiled	[CE]  orphaned  case	17	None	replace
45	[BUG]  [BUGGY]  try  {  }  catch(Throwable  e)  {  }  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  }  catch(Throwable  e)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  }  catch(Throwable  e)  {  }	  try    {    checkLenient();    }    catch(Exception    e)    {    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
46	[BUG]  [BUGGY]  try  {  return  checkLenient();  }  catch(Exception  e)  {  }  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  return  checkLenient();  }  catch(Exception  e)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  return  checkLenient();  }  catch(Exception  e)  {  }	  try    {    checkLenient();    }    catch(Exception    e)    {    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
47	[BUG]  [BUGGY]  try  {  break;  }  catch(Throwable  e)  {  }  [CE]  illegal  start  of  expression  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  break;  }  catch(Throwable  e)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  break;  }  catch(Throwable  e)  {  }	  try    {    checkLenient();    }    catch(Exception    e)    {    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
48	[BUG]  [BUGGY]  allowIndices(peekedLong,  peekedString,  pathNames[stackSize]);  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowIndices(peekedLong,  peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowIndices(peekedLong,  peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  allowIndices(in,  peekedLong,  pathNames[stackSize]);  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowIndices(in,  peekedLong,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowIndices(in,  peekedLong,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  parent!=  null  &&  parent.equals(pathIndices[0]))  {  checkLenient();  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&  parent.equals(pathIndices[0]))  {  checkLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&  parent.equals(pathIndices[0]))  {  checkLenient();	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  parent!=  null  &&  parent.equals(pathIndices[pos]))  {  checkLenient();  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&  parent.equals(pathIndices[pos]))  {  checkLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&  parent.equals(pathIndices[pos]))  {  checkLenient();	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
52	[BUG]  [BUGGY]  allowIndices(peekedLong,  peekedString,  pathNames[stackSize]));  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowIndices(peekedLong,  peekedString,  pathNames[stackSize]));  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowIndices(peekedLong,  peekedString,  pathNames[stackSize]));	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  allowIndices(in,  peekedLong);  [CE]  illegal  start  of  expression  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowIndices(in,  peekedLong);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowIndices(in,  peekedLong);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
54	[BUG]  [BUGGY]  allowIndices(int[])  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowIndices(int[])  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowIndices(int[])  {  checkLenient();  }	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
55	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  [Delete]  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	[Delete]	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
56	[BUG]  [BUGGY]  allowNegated();  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNegated();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNegated();	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
57	[BUG]  [BUGGY]  allowNegatives();  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNegatives();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNegatives();	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
58	[BUG]  [BUGGY]  allowNonLenient(stackSize);  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNonLenient(stackSize);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNonLenient(stackSize);	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
59	[BUG]  [BUGGY]  allowNegated(true);  [CE]  illegal  start  of  expression  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNegated(true);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNegated(true);	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
60	[BUG]  [BUGGY]  allowNonLenient();  [CE]  illegal  start  of  expression  [FE]                          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNonLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNonLenient();	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Exception  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Exception  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Exception  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
62	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Throwable  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Throwable  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Throwable  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
63	[BUG]  [BUGGY]  if(stackSize  ==  1)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  if(stackSize  ==  1)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	if(stackSize  ==  1)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
64	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(JsonMappingException  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(JsonMappingException  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(JsonMappingException  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
65	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Throwable  t)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Throwable  t)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Throwable  t)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
66	[BUG]  [BUGGY]  try  {  return  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  return  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  return  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
67	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Exception  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
68	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Throwable  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Throwable  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Throwable  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
69	[BUG]  [BUGGY]  if(stackSize  ==  1)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  default  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  if(stackSize  ==  1)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	if(stackSize  ==  1)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	16	None	replace
70	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(Throwable  t)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  default  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(Throwable  t)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(Throwable  t)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	16	None	replace
71	[BUG]  [BUGGY]  if(lenient)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  default  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  if(lenient)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	if(lenient)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	16	None	replace
72	[BUG]  [BUGGY]  try  {  clear();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  default  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  clear();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  clear();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	16	None	replace
73	[BUG]  [BUGGY]  bucketStack.push(peekedString);  [CE]  orphaned  default  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(peekedString);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(peekedString);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  orphaned  default	6	None	replace
74	[BUG]  [BUGGY]  bucketStack.push(peekedString());  [CE]  orphaned  default  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(peekedString());  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(peekedString());	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  orphaned  default	6	None	replace
75	[BUG]  [BUGGY]  bucketStack.push(peeked);  [CE]  orphaned  default  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(peeked);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(peeked);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  orphaned  default	6	None	replace
76	[BUG]  [BUGGY]  bucketStack.push(peekedString,  peekedLong);  [CE]  orphaned  default  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(peekedString,  peekedLong);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(peekedString,  peekedLong);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  orphaned  default	6	None	replace
77	[BUG]  [BUGGY]  bucketStack.push(peekedString,  peekedString);  [CE]  orphaned  default  [FE]                          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(peekedString,  peekedString);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(peekedString,  peekedString);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  orphaned  default	6	None	replace
78	[BUG]  [BUGGY]  bucketStack.push(peekedLong);  [CE]  orphaned  default  [FE]                            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(peekedLong);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(peekedLong);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  orphaned  default	6	None	replace
79	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  [CE]  orphaned  default  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);	      	non-compiled	[CE]  orphaned  default	7	None	replace
80	[BUG]  [BUGGY]  if(stackSize  ==  1)  {  return  PEEKED_BUFFERED;  }  [CE]  orphaned  default  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  if(stackSize  ==  1)  {  return  PEEKED_BUFFERED;  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	if(stackSize  ==  1)  {  return  PEEKED_BUFFERED;  }	      	non-compiled	[CE]  orphaned  default	7	None	replace
81	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);  [CE]  orphaned  default  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  -  1]);	      	non-compiled	[CE]  orphaned  default	7	None	replace
82	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  ]);  [CE]  orphaned  default  [FE]                          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  ]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  ]);	      	non-compiled	[CE]  orphaned  default	7	None	replace
83	[BUG]  [BUGGY]  int[]  pathIndices  =  new  int[pathNames.length  -  1];  [CE]  orphaned  default  [FE]                            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  new  int[pathNames.length  -  1];  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  new  int[pathNames.length  -  1];	      	non-compiled	[CE]  orphaned  default	7	None	replace
84	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1]);  [CE]  orphaned  default  [FE]                              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1]);	      	non-compiled	[CE]  orphaned  default	7	None	replace
85	[BUG]  [BUGGY]  int[]  pathIndices  =  peekedString.split( ": ");  [CE]  orphaned  default  [FE]                                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  peekedString.split( ": ");  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  peekedString.split( ": ");	      	non-compiled	[CE]  orphaned  default	7	None	replace
86	[BUG]  [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]  [CE]  orphaned  default  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
87	[BUG]  [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[2],  pathIndices[3]  [CE]  orphaned  default  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[2],  pathIndices[3]  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[2],  pathIndices[3]	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
88	[BUG]  [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);  [CE]  orphaned  default  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
89	[BUG]  [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[2],  pathIndices[3]);  [CE]  orphaned  default  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[2],  pathIndices[3]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[2],  pathIndices[3]);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
90	[BUG]  [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3],  [CE]  orphaned  default  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3],  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3],	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
91	[BUG]  [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3])  {  [CE]  orphaned  default  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3])  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3])  {	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
92	[BUG]  [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);  [CE]  orphaned  default  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberFor(peekedString,  pathNames[0],  pathIndices[1],  pathIndices[1],  pathIndices[2],  pathIndices[2],  pathIndices[3]);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
93	[BUG]  [BUGGY]  bucketTree  <  NUMBER_CHAR_QUOTED)  {  checkLenient();  }  [CE]  orphaned  default  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketTree  <  NUMBER_CHAR_QUOTED)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketTree  <  NUMBER_CHAR_QUOTED)  {  checkLenient();  }	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  default	2	None	replace
94	[BUG]  [BUGGY]  bucketTree  <  NUMBER_CHAR_SINGLE_QUOTED)  {  checkLenient();  }  [CE]  orphaned  default  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketTree  <  NUMBER_CHAR_SINGLE_QUOTED)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketTree  <  NUMBER_CHAR_SINGLE_QUOTED)  {  checkLenient();  }	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  default	2	None	replace
95	[BUG]  [BUGGY]  bucketTree  <  NUMBER_CHAR_QUOTED?  checkLenient()  :  null;  [CE]  orphaned  default  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketTree  <  NUMBER_CHAR_QUOTED?  checkLenient()  :  null;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketTree  <  NUMBER_CHAR_QUOTED?  checkLenient()  :  null;	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  default	2	None	replace
96	[BUG]  [BUGGY]  bucketTree  <  NUMBER_CHAR_QUOTED  ||  clearTreeTree();  [CE]  orphaned  default  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketTree  <  NUMBER_CHAR_QUOTED  ||  clearTreeTree();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketTree  <  NUMBER_CHAR_QUOTED  ||  clearTreeTree();	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  default	2	None	replace
97	[BUG]  [BUGGY]  bucketTree  <  NUMBER_CHAR_SINGLE_QUOTED)  {  checkLenient();  [CE]  orphaned  default  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketTree  <  NUMBER_CHAR_SINGLE_QUOTED)  {  checkLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketTree  <  NUMBER_CHAR_SINGLE_QUOTED)  {  checkLenient();	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  orphaned  default	2	None	replace
98	[BUG]  [BUGGY]  try  {  checkLenient(t);  }  catch(Throwable  t)  {  }  [CE]  orphaned  default  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient(t);  }  catch(Throwable  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient(t);  }  catch(Throwable  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  orphaned  default	13	None	replace
99	[BUG]  [BUGGY]  try  {  }  catch(Throwable  t)  {  [CE]  orphaned  default  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  }  catch(Throwable  t)  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  }  catch(Throwable  t)  {	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  orphaned  default	13	None	replace
100	[BUG]  [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize]);  [CE]  orphaned  default  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeMultiply(stack,  peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
101	[BUG]  [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize]));  [CE]  orphaned  default  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize]));  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeMultiply(stack,  peekedString,  pathNames[stackSize]));	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
102	[BUG]  [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize])  {  [CE]  orphaned  default  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize])  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeMultiply(stack,  peekedString,  pathNames[stackSize])  {	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
103	[BUG]  [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize]))  {  [CE]  orphaned  default  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize]))  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeMultiply(stack,  peekedString,  pathNames[stackSize]))  {	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
104	[BUG]  [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize])  [CE]  orphaned  default  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize])  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeMultiply(stack,  peekedString,  pathNames[stackSize])	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
105	[BUG]  [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize]).return;  [CE]  orphaned  default  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeMultiply(stack,  peekedString,  pathNames[stackSize]).return;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeMultiply(stack,  peekedString,  pathNames[stackSize]).return;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  orphaned  default	11	None	replace
106	[BUG]  [BUGGY]  try  {  }  catch(Exception  e)  {  }  [CE]  orphaned  default  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  }  catch(Exception  e)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  }  catch(Exception  e)  {  }	  try    {    checkLenient();    }    catch(Exception    e)    {    }    	non-compiled	[CE]  orphaned  default	17	None	replace
107	[BUG]  [BUGGY]  safeNumberIfNull(pathNames[0],  pathNames[1])  {  [CE]  orphaned  default  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberIfNull(pathNames[0],  pathNames[1])  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberIfNull(pathNames[0],  pathNames[1])  {	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
108	[BUG]  [BUGGY]  safeNumberIfNull(peekedString);  [CE]  orphaned  default  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberIfNull(peekedString);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberIfNull(peekedString);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  default	3	None	replace
109	[BUG]  [BUGGY]  safeNumberForSideEquals(pathNames[0],  pathNames[1])  {  [CE]  ';'  expected  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberForSideEquals(pathNames[0],  pathNames[1])  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberForSideEquals(pathNames[0],  pathNames[1])  {	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	3	None	replace
110	[BUG]  [BUGGY]  safeNumberForSideEquals(pathNames[0],  pathNames[1]))  {  [CE]  ';'  expected  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberForSideEquals(pathNames[0],  pathNames[1]))  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberForSideEquals(pathNames[0],  pathNames[1]))  {	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	3	None	replace
111	[BUG]  [BUGGY]  safeNumberIfNull(peekedString,  pathNames[pos])  {  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberIfNull(peekedString,  pathNames[pos])  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberIfNull(peekedString,  pathNames[pos])  {	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
112	[BUG]  [BUGGY]  safeNumberIfNull(peekedString,  pathNames[0],  pathNames[1])  {  [CE]  ';'  expected  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumberIfNull(peekedString,  pathNames[0],  pathNames[1])  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumberIfNull(peekedString,  pathNames[0],  pathNames[1])  {	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	3	None	replace
113	[BUG]  [BUGGY]  safeCheckLenient();  [CE]  ';'  expected  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeCheckLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeCheckLenient();	  if(stackSize    >    1)    {    checkLenient();    }    	non-compiled	[CE]  ';'  expected	5	None	replace
114	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathIndexes.size()  ]);  [CE]  ';'  expected  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathIndexes.size()  ]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathIndexes.size()  ]);	      	non-compiled	[CE]  ';'  expected	7	None	replace
115	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(pathIndices);  [CE]  ';'  expected  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(pathIndices);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(pathIndices);	      	non-compiled	[CE]  ';'  expected	7	None	replace
116	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1)];  [CE]  ';'  expected  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1)];  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.length  +  1)];	      	non-compiled	[CE]  ';'  expected	7	None	replace
117	[BUG]  [BUGGY]  parent!=  null)  {  checkLenient();  }  [CE]  ';'  expected  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null)  {  checkLenient();  }	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  ';'  expected	2	None	replace
118	[BUG]  [BUGGY]  allowNegatives(true)  {  checkLenient();  }  [CE]  ';'  expected  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNegatives(true)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNegatives(true)  {  checkLenient();  }	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  ';'  expected	2	None	replace
119	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  peekLenient();  [CE]  ';'  expected  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&  parent  ==  peekLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&  parent  ==  peekLenient();	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  ';'  expected	2	None	replace
120	[BUG]  [BUGGY]  parent  ==  checkLenient();  [CE]  ';'  expected  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  checkLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  checkLenient();	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  ';'  expected	2	None	replace
121	[BUG]  [BUGGY]  allowNegatives(1)  {  checkLenient();  }  [CE]  ';'  expected  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNegatives(1)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNegatives(1)  {  checkLenient();  }	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  ';'  expected	2	None	replace
122	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  throw  new  JsonMappingException( " ");  }  [CE]  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  throw  new  JsonMappingException( " ");  }	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
123	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  [CE]  ';'  expected  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  ';'  expected	12	None	replace
124	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ");  }  [CE]  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ");  }	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
125	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  [CE]  ';'  expected  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  ';'  expected	12	None	replace
126	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  throw  new  JsonMappingException( " ");  }  [CE]  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  throw  new  JsonMappingException( " ");  }	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
127	[BUG]  [BUGGY]  try  {  }  catch(IOException  ioe)  {  }  [CE]  ';'  expected  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  }  catch(IOException  ioe)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  }  catch(IOException  ioe)  {  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    }    	non-compiled	[CE]  ';'  expected	14	None	replace
128	[BUG]  [BUGGY]  luate(pathNames,  NUMBER_CHAR_EXP_SIGN);  [CE]  ';'  expected  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  luate(pathNames,  NUMBER_CHAR_EXP_SIGN);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	luate(pathNames,  NUMBER_CHAR_EXP_SIGN);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
129	[BUG]  [BUGGY]  luate(pathNames,  NUMBER_CHAR_DECIMAL);  [CE]  ';'  expected  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  luate(pathNames,  NUMBER_CHAR_DECIMAL);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	luate(pathNames,  NUMBER_CHAR_DECIMAL);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
130	[BUG]  [BUGGY]  luate(pathNames,  PEEKED_DOUBLE_QUOTED);  [CE]  ';'  expected  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  luate(pathNames,  PEEKED_DOUBLE_QUOTED);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	luate(pathNames,  PEEKED_DOUBLE_QUOTED);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
131	[BUG]  [BUGGY]  luate(pathNames,  PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  luate(pathNames,  PEEKED_SINGLE_QUOTED);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	luate(pathNames,  PEEKED_SINGLE_QUOTED);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
132	[BUG]  [BUGGY]  luate(pathNames,  pos,  PEEKED_SINGLE_QUOTED);  [CE]  illegal  start  of  expression  [FE]                          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  luate(pathNames,  pos,  PEEKED_SINGLE_QUOTED);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	luate(pathNames,  pos,  PEEKED_SINGLE_QUOTED);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
133	[BUG]  [BUGGY]  safeNumber(1)  {  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  safeNumber(1)  {  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	safeNumber(1)  {	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
134	[BUG]  [BUGGY]  if(lenient)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  if(lenient)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	if(lenient)  {  try  {  checkLenient();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
135	[BUG]  [BUGGY]  try  {  throw  new  JsonMappingException( " ");  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  throw  new  JsonMappingException( " ");  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  throw  new  JsonMappingException( " ");  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
136	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  null;  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  &&  parent!=  null;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  &&  parent!=  null;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
137	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  null;  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&  parent  ==  null;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&  parent  ==  null;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
138	[BUG]  [BUGGY]  allowNegatives(true);  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNegatives(true);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNegatives(true);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
139	[BUG]  [BUGGY]  parent!=  null  &&  parent!=  null;  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&  parent!=  null;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&  parent!=  null;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
140	[BUG]  [BUGGY]  allowNegatives(false);  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  allowNegatives(false);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	allowNegatives(false);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  parent  ==  null  &&  parent  ==  null;  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  &&  parent  ==  null;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  &&  parent  ==  null;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
142	[BUG]  [BUGGY]  checkLenient(pathNames);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(pathNames);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(pathNames);	  checkLenient(stackSize);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
143	[BUG]  [BUGGY]  checkLenient(peek,  stackSize);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(peek,  stackSize);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(peek,  stackSize);	  checkLenient(stackSize);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
144	[BUG]  [BUGGY]  checkLenient(0);  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(0);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(0);	  checkLenient(stackSize);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
145	[BUG]  [BUGGY]  parent!=  null  &&!lenient)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&!lenient)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&!lenient)  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
146	[BUG]  [BUGGY]  parent!=  null  ||!lenient)  {  checkLenient();  }  [CE]  unclosed  character  literal  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  ||!lenient)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  ||!lenient)  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  unclosed  character  literal	4	None	replace
147	[BUG]  [BUGGY]  parent!=  null  &&!lenient)  {  checkLenient();  [CE]  unclosed  character  literal  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&!lenient)  {  checkLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&!lenient)  {  checkLenient();	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  unclosed  character  literal	4	None	replace
148	[BUG]  [BUGGY]  parent!=  null  ||!lenient)  {  checkLenient();  [CE]  unclosed  character  literal  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  ||!lenient)  {  checkLenient();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  ||!lenient)  {  checkLenient();	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  unclosed  character  literal	4	None	replace
149	[BUG]  [BUGGY]  piedLong  =  peekIndices[pos];  [CE]  unclosed  character  literal  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  piedLong  =  peekIndices[pos];  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	piedLong  =  peekIndices[pos];	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
150	[BUG]  [BUGGY]  parent  ==  null;  [CE]  unclosed  character  literal  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  unclosed  character  literal	8	None	replace
151	[BUG]  [BUGGY]  try  {  checkLenient();  }  catch(NullPointerException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unclosed  character  literal  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  checkLenient();  }  catch(NullPointerException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  checkLenient();  }  catch(NullPointerException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  character  literal	16	None	replace
152	[BUG]  [BUGGY]  try  {  break;  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unclosed  character  literal  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  break;  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  break;  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  character  literal	16	None	replace
153	[BUG]  [BUGGY]  checkLenient(pos);  [CE]  unclosed  character  literal  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(pos);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(pos);	  checkLenient(stackSize);    	non-compiled	[CE]  unclosed  character  literal	9	None	replace
154	[BUG]  [BUGGY]  checkLenient(peeks);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  checkLenient(peeks);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	checkLenient(peeks);	  checkLenient(stackSize);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
155	[BUG]  [BUGGY]  bucketStack.push(peek);  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(peek);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(peek);	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
156	[BUG]  [BUGGY]  bucketPeek();  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketPeek();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketPeek();	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
157	[BUG]  [BUGGY]  read();  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  read();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	read();	  if(stackSize    ==    1)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
158	[BUG]  [BUGGY]  try  {  break;  }  catch(Exception  e)  {  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  break;  }  catch(Exception  e)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  break;  }  catch(Exception  e)  {  }	  try    {    checkLenient();    }    catch(Exception    e)    {    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
159	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  System.arraycopy(pathIndices,  0,  pathIndices,  0,  pathIndices.length);  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  System.arraycopy(pathIndices,  0,  pathIndices,  0,  pathIndices.length);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  System.arraycopy(pathIndices,  0,  pathIndices,  0,  pathIndices.length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
160	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  System.arraycopy(pathIndices,  0,  pathIndices,  1,  pathIndices.length);  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  System.arraycopy(pathIndices,  0,  pathIndices,  1,  pathIndices.length);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  System.arraycopy(pathIndices,  0,  pathIndices,  1,  pathIndices.length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
161	[BUG]  [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  ]);  [CE]  illegal  start  of  expression  [FE]                        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  ]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathNames  =  stack.toArray(new  String[pathNames.size()  ]);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
162	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.length;  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i]  [CE]  illegal  start  of  expression  [FE]                          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.length;  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i]  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.length;  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i]	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
163	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.size();  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i]  [CE]  illegal  start  of  expression  [FE]                            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.size();  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i]  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.size();  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i]	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
164	[BUG]  [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.length;  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i];  [CE]  illegal  start  of  expression  [FE]                              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.length;  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i];  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	int[]  pathIndices  =  stack.toArray(new  String[pathNames.size()  ]);  for(int  i  =  0,  len  =  pathIndices.length;  i  <  len;  ++i)  {  pathIndices[i]  =  pathIndices[i];	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
165	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
166	[BUG]  [BUGGY]  readIndices(in,  stack,  peekedString,  pathNames[stackSize]);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  readIndices(in,  stack,  peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	readIndices(in,  stack,  peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
167	[BUG]  [BUGGY]  pendIndices(in,  stack,  peekedString,  pathNames[stackSize]);  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices(in,  stack,  peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices(in,  stack,  peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
168	[BUG]  [BUGGY]  readIndices(in,  stack,  peekedString,  pathNames[stackSize]);  return  result;  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  readIndices(in,  stack,  peekedString,  pathNames[stackSize]);  return  result;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	readIndices(in,  stack,  peekedString,  pathNames[stackSize]);  return  result;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
169	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
170	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathNames,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathNames,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathNames,  stack,  peekedString,  pathNames[stackSize]);  return  result;  }	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    return    result;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
171	[BUG]  [BUGGY]  bucketStack.push(new  Integer(PEEKED_BUFFERED));  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(new  Integer(PEEKED_BUFFERED));  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(new  Integer(PEEKED_BUFFERED));	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
172	[BUG]  [BUGGY]  bucketStack.push(new  Long(peekNumber(),  peekedLong));  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(new  Long(peekNumber(),  peekedLong));  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(new  Long(peekNumber(),  peekedLong));	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
173	[BUG]  [BUGGY]  bucketStack.push(new  Integer(PEEKED_DOUBLE_QUOTED));  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(new  Integer(PEEKED_DOUBLE_QUOTED));  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(new  Integer(PEEKED_DOUBLE_QUOTED));	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
174	[BUG]  [BUGGY]  bucketStack.push(new  Long(peekNumber()  -  pathNames.length));  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(new  Long(peekNumber()  -  pathNames.length));  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(new  Long(peekNumber()  -  pathNames.length));	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
175	[BUG]  [BUGGY]  bucketStack.push(new  Long(peekNumber()  -  1,  peekedLong));  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(new  Long(peekNumber()  -  1,  peekedLong));  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(new  Long(peekNumber()  -  1,  peekedLong));	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
176	[BUG]  [BUGGY]  bucketStack.push(new  Integer(PEEKED_BUFFERED,  pos));  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  bucketStack.push(new  Integer(PEEKED_BUFFERED,  pos));  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	bucketStack.push(new  Integer(PEEKED_BUFFERED,  pos));	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
177	[BUG]  [BUGGY]  try  {  break;  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  break;  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  break;  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
178	[BUG]  [BUGGY]  try  {  clear();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  clear();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  clear();  }  catch(IOException  ioe)  {  throw  new  JsonMappingException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
179	[BUG]  [BUGGY]  try  {  throw  new  JsonMappingException( " ");  }  catch(Throwable  t)  {  }  [CE]  illegal  start  of  expression  [FE]        MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  throw  new  JsonMappingException( " ");  }  catch(Throwable  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  throw  new  JsonMappingException( " ");  }  catch(Throwable  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
180	[BUG]  [BUGGY]  try  {  clear();  }  catch(Throwable  t)  {  }  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  clear();  }  catch(Throwable  t)  {  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  clear();  }  catch(Throwable  t)  {  }	  try    {    checkLenient();    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
181	[BUG]  [BUGGY]  if(!lenient  &&  peekedLong!=  null)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  if(!lenient  &&  peekedLong!=  null)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	if(!lenient  &&  peekedLong!=  null)  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
182	[BUG]  [BUGGY]  if(!lenient  &&  peeked.length  >  0)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  if(!lenient  &&  peeked.length  >  0)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	if(!lenient  &&  peeked.length  >  0)  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
183	[BUG]  [BUGGY]  if(!lenient  &&  stack.size()  >  0)  {  checkLenient();  }  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  if(!lenient  &&  stack.size()  >  0)  {  checkLenient();  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	if(!lenient  &&  stack.size()  >  0)  {  checkLenient();  }	  if(!lenient)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
184	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  break;  }  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  break;  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  break;  }	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
185	[BUG]  [BUGGY]  readIndices(in,  stack,  peekedString,  pathNames[stackSize]);  break;  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  readIndices(in,  stack,  peekedString,  pathNames[stackSize]);  break;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	readIndices(in,  stack,  peekedString,  pathNames[stackSize]);  break;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
186	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  break;  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  break;  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  break;  }	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
187	[BUG]  [BUGGY]  pendIndices(in,  stack,  peekedString,  pathNames[stackSize]);  break;  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendIndices(in,  stack,  peekedString,  pathNames[stackSize]);  break;  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendIndices(in,  stack,  peekedString,  pathNames[stackSize]);  break;	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
188	[BUG]  [BUGGY]  parent!=  null  &&  parent.equals(peekedString);  [CE]  illegal  start  of  expression  [FE]          MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&  parent.equals(peekedString);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&  parent.equals(peekedString);	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
189	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  peekedString.length();  [CE]  illegal  start  of  expression  [FE]            MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent!=  null  &&  parent  ==  peekedString.length();  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent!=  null  &&  parent  ==  peekedString.length();	  if(lenient)    {    checkLenient();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
190	[BUG]  [BUGGY]  pendString(peekedString);  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendString(peekedString);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendString(peekedString);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
191	[BUG]  [BUGGY]  pendString(peekedString,  pathNames);  [CE]  unclosed  string  literal  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  pendString(peekedString,  pathNames);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	pendString(peekedString,  pathNames);	  if(stackSize    ==    1)    {    checkLenient();    }    else    {    peekedString();    }    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
192	[BUG]  [BUGGY]  try  {  return  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  try  {  return  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	try  {  return  checkLenient();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  try    {    checkLenient();    }    catch(IOException    ioe)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
193	[BUG]  [BUGGY]  parent  ==  null  ||  lenient  <  pathIndices.length)  {  throw  new  JsonMappingException( " ");  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient  <  pathIndices.length)  {  throw  new  JsonMappingException( " ");  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient  <  pathIndices.length)  {  throw  new  JsonMappingException( " ");  }	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
194	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ".equals(pathNames[stackSize]);  }  [CE]  unclosed  string  literal  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ".equals(pathNames[stackSize]);  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ".equals(pathNames[stackSize]);  }	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
195	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ".equals(pathNames[stackSize]));  }  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ".equals(pathNames[stackSize]));  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  throw  new  JsonMappingException( " ".equals(pathNames[stackSize]));  }	  if(lenient)    {    checkLenient();    }    else    {    throw    new    JsonMappingException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
196	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  }  [CE]  illegal  start  of  expression  [FE]              MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  }	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
197	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  }  [CE]  illegal  start  of  expression  [FE]                MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  }  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  }	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
198	[BUG]  [BUGGY]  readIndices(int,  stack,  peekedString,  pathNames[stackSize]);  [CE]  illegal  start  of  expression  [FE]                  MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  readIndices(int,  stack,  peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	readIndices(int,  stack,  peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
199	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  [CE]  illegal  start  of  expression  [FE]                    MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  pathIndices,  stack,  peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
200	[BUG]  [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  [CE]  illegal  start  of  expression  [FE]                      MalformedJsonException    [CONTEXT]    }  return  peeked  =  PEEKED_DOUBLE_QUOTED;  case  '[':  return  peeked  =  PEEKED_BEGIN_ARRAY;  case  '{':  return  peeked  =  PEEKED_BEGIN_OBJECT;  default:  pos--;  //  Don't  consume  the  first  character  in  a  literal  value.  }  if  (stackSize  ==  1)  {    [BUGGY]  parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);  [BUGGY]    }  int  result  =  peekKeyword();  if  (result  !=  PEEKED_NONE)  {  return  result;  }  result  =  peekNumber();  if  (result  !=  PEEKED_NONE)  {  return  result;  [CLASS]  JsonReader  1  [METHOD]  doPeek  [RETURN_TYPE]  int  [VARIABLES]  boolean  lenient  Reader  in  int[]  pathIndices  stack  String  peekedString  String[]  pathNames  long  MIN_INCOMPLETE_INTEGER  peekedLong  int  NUMBER_CHAR_DECIMAL  NUMBER_CHAR_DIGIT  NUMBER_CHAR_EXP_DIGIT  NUMBER_CHAR_EXP_E  NUMBER_CHAR_EXP_SIGN  NUMBER_CHAR_FRACTION_DIGIT  NUMBER_CHAR_NONE  NUMBER_CHAR_SIGN  PEEKED_BEGIN_ARRAY  PEEKED_BEGIN_OBJECT  PEEKED_BUFFERED  PEEKED_DOUBLE_QUOTED  PEEKED_DOUBLE_QUOTED_NAME  PEEKED_END_ARRAY  PEEKED_END_OBJECT  PEEKED_EOF  PEEKED_FALSE  PEEKED_LONG  PEEKED_NONE  PEEKED_NULL  PEEKED_NUMBER  PEEKED_SINGLE_QUOTED  PEEKED_SINGLE_QUOTED_NAME  PEEKED_TRUE  PEEKED_UNQUOTED  PEEKED_UNQUOTED_NAME  c  limit  lineNumber  lineStart  p  peekStack  peeked  peekedNumberLength  pos  result  stackSize  char[]  NON_EXECUTE_PREFIX  buffer  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonReader.java	0.3651483716701107	586	586	3	replace	parent  ==  null  ||  lenient)  {  checkLenient();  }  else  {  System.arraycopy(pathNames,  0,  stack,  peekedString,  pathNames[stackSize]);	  if(lenient)    {    checkLenient();    }    else    {    System.arraycopy(pathNames,    0,    stack,    peekedString,    pathNames[stackSize]);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
