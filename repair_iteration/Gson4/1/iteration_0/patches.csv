bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  <identifier>  expected  [FE]    MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]      MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	2	replace
3	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [FE]  MalformedJsonException  [FE]      MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	2	replace
4	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object. ");  [CE]  [FE]        MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object. ");	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  cannot  find  symbol  Throwables  [FE]          MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object. ");	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	non-compiled	[CE]  cannot  find  symbol  Throwables	1	None	replace
6	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));  [CE]  cannot  find  symbol  Throwables  [FE]            MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "));	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	non-compiled	[CE]  cannot  find  symbol  Throwables	1	None	replace
7	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  cannot  find  symbol  Throwables  [FE]              MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ");	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	non-compiled	[CE]  cannot  find  symbol  Throwables	1	None	replace
8	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]    [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	  	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	2	replace
9	[BUG]  [BUGGY]    [FE]  MalformedJsonException  [FE]                MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]    [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	  	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	2	replace
10	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]    MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	2	replace
11	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [FE]  MalformedJsonException  [FE]    MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	2	replace
12	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]      MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	2	replace
13	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [FE]  MalformedJsonException  [FE]      MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	2	replace
14	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  not  a  statement  [FE]    MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	non-compiled	[CE]  not  a  statement	1	None	replace
15	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]      MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	3	replace
16	[BUG]  [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [FE]  MalformedJsonException  [FE]      MalformedJsonException  [CONTEXT]  private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(   "JSON  must  have  only  one  top-level  value. ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {  [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [BUGGY]   "JSON  must  start  with  an  array  or  an  object. ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }	throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object. ");  	compilable	  [FE]  MalformedJsonException  	1	3	replace
