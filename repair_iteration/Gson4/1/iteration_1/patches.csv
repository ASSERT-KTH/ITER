bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      int[]  newStack  =  stack.toArray(newStack[size()  ]);  [CE]  cannot  find  symbol  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      int[]  newStack  =  stack.toArray(newStack[size()  ]);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        int[]  newStack  =  stack.toArray(newStack[size()  ]);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
2	[BUG]  [BUGGY]      int[]  newStack  =  getStack(root);  [CE]  cannot  find  symbol  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      int[]  newStack  =  getStack(root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        int[]  newStack  =  getStack(root);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
3	[BUG]  [BUGGY]      int[]  newStack  =  getStack();  [CE]  cannot  find  symbol  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      int[]  newStack  =  getStack();  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        int[]  newStack  =  getStack();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
4	[BUG]  [BUGGY]      int[]  newStack  =  stack.toArray(newStack[stack.size()  ]);  [CE]  cannot  find  symbol  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      int[]  newStack  =  stack.toArray(newStack[stack.size()  ]);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        int[]  newStack  =  stack.toArray(newStack[stack.size()  ]);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
5	[BUG]  [BUGGY]      int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT);  [CE]  cannot  find  symbol  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        int[]  newStack  =  getStack(root);  replaceTop(NONEMPTY_DOCUMENT);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
6	[BUG]  [BUGGY]      int[]  newStack  =  stack.toArray(newStack);  [CE]  cannot  find  symbol  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      int[]  newStack  =  stack.toArray(newStack);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        int[]  newStack  =  stack.toArray(newStack);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
7	[BUG]  [BUGGY]      JsonWriter  out  =  getWriter();  [CE]  cannot  find  symbol  [FE]                MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      JsonWriter  out  =  getWriter();  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        JsonWriter  out  =  getWriter();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
8	[BUG]  [BUGGY]      int[]  newStack  =  getStack(root);  replaceTop(newStack[newStack.size()  ]);  [CE]  cannot  find  symbol  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      int[]  newStack  =  getStack(root);  replaceTop(newStack[newStack.size()  ]);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        int[]  newStack  =  getStack(root);  replaceTop(newStack[newStack.size()  ]);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
9	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	compilable	  [FE]  MalformedJsonException  	15	3	add
10	[BUG]  [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [FE]  MalformedJsonException  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	compilable	  [FE]  MalformedJsonException  	15	3	add
11	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	compilable	  [FE]  MalformedJsonException  	15	3	add
12	[BUG]  [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [FE]  MalformedJsonException  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	compilable	  [FE]  MalformedJsonException  	15	3	add
13	[BUG]  [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  <identifier>  expected  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	  	non-compiled	[CE]  <identifier>  expected	15	None	add
14	[BUG]  [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(!lenient)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	15	None	add
15	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
16	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  illegal  start  of  expression  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
18	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
19	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
20	[BUG]  [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  >  expected  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	bucket  <  NONEMPTY_DOCUMENT  ||!lenient  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  >  expected	11	None	replace
21	[BUG]  [BUGGY]  betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	betroffene)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
22	[BUG]  [BUGGY]  allowNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  allowNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	allowNull(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  SuccessfulJSON  must  start  with  an  array  or  an  object.   ");  [CE]  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  SuccessfulJSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	SuccessfulJSON  must  start  with  an  array  or  an  object.   ");	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Thread.currentThread().interrupt();	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	compilable	  [FE]  MalformedJsonException  	3	2	replace
25	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [FE]  MalformedJsonException  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Thread.currentThread().interrupt();	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	compilable	  [FE]  MalformedJsonException  	3	2	replace
26	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	compilable	  [FE]  MalformedJsonException  	10	3	add
27	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [FE]  MalformedJsonException  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	compilable	  [FE]  MalformedJsonException  	10	3	add
28	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	compilable	  [FE]  MalformedJsonException  	10	3	add
29	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [FE]  MalformedJsonException  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	compilable	  [FE]  MalformedJsonException  	10	3	add
30	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	compilable	  [FE]  MalformedJsonException  	10	2	add
31	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [FE]  MalformedJsonException  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	compilable	  [FE]  MalformedJsonException  	10	2	add
32	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	compilable	  [FE]  MalformedJsonException  	10	2	add
33	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [FE]  MalformedJsonException  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  	compilable	  [FE]  MalformedJsonException  	10	2	add
34	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "),  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "),  root);	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "));    	compilable	  [FE]  MalformedJsonException  	6	2	replace
35	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "),  root);  [FE]  MalformedJsonException  [FE]                MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "),  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. "),  root);	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "));    	compilable	  [FE]  MalformedJsonException  	6	2	replace
36	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n "));  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n "));	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "));    	compilable	  [FE]  MalformedJsonException  	6	2	replace
37	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n "));  [FE]  MalformedJsonException  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n "));  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n "));	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "));    	compilable	  [FE]  MalformedJsonException  	6	2	replace
38	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "));    	compilable	  [FE]  MalformedJsonException  	6	2	replace
39	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [FE]  MalformedJsonException  [FE]                    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap(new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");	  Throwables.wrap(new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   "));    	compilable	  [FE]  MalformedJsonException  	6	2	replace
40	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	7	2	replace
41	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ");  [FE]  MalformedJsonException  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.n ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	7	2	replace
42	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	7	2	replace
43	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ");  [FE]  MalformedJsonException  [FE]                    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.. ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	7	2	replace
44	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ",  root);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	7	2	replace
45	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ",  root);  [FE]  MalformedJsonException  [FE]                      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ",  root);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	7	2	replace
46	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ".);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ".);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	7	2	replace
47	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ".);  [FE]  MalformedJsonException  [FE]                        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ".);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object. ".);	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	7	2	replace
48	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	JSON  must  start  with  an  array  or  an  object.n ");	  JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	4	2	replace
49	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.n ");  [FE]  MalformedJsonException  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.n ");	  JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	4	2	replace
50	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	JSON  must  start  with  an  array  or  an  object.. ");	  JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	4	2	replace
51	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object.. ");  [FE]  MalformedJsonException  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object.. ");	  JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	4	2	replace
52	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	JSON  must  start  with  an  array  or  an  object. ",  root);	  JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	4	2	replace
53	[BUG]  [BUGGY]  JSON  must  start  with  an  array  or  an  object. ",  root);  [FE]  MalformedJsonException  [FE]                MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  array  or  an  object. ",  root);	  JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	4	2	replace
54	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  JSON  must  start  with  an  object  or  an  array.   ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	JSON  must  start  with  an  object  or  an  array.   ");	  JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	4	2	replace
55	[BUG]  [BUGGY]  JSON  must  start  with  an  object  or  an  array.   ");  [FE]  MalformedJsonException  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  JSON  must  start  with  an  object  or  an  array.   ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	JSON  must  start  with  an  object  or  an  array.   ");	  JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	4	2	replace
56	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.log( "JSON  must  start  with  an  array  or  an  object.n ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	5	2	replace
57	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n ");  [FE]  MalformedJsonException  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.n ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	5	2	replace
58	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.log( "JSON  must  start  with  an  array  or  an  object. ",  root);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	5	2	replace
59	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ",  root);  [FE]  MalformedJsonException  [FE]                MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object. ",  root);	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	5	2	replace
60	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	5	2	replace
61	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ");  [FE]  MalformedJsonException  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object.. ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ");    	compilable	  [FE]  MalformedJsonException  	5	2	replace
62	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
63	[BUG]  [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [FE]  MalformedJsonException  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
64	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
65	[BUG]  [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [FE]  MalformedJsonException  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||(!lenient  &&  root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
66	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
67	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [FE]  MalformedJsonException  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
68	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
69	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [FE]  MalformedJsonException  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
70	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
71	[BUG]  [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [FE]  MalformedJsonException  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
72	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
73	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [FE]  MalformedJsonException  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	compilable	  [FE]  MalformedJsonException  	13	2	replace
74	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	compilable	  [FE]  MalformedJsonException  	16	2	replace
75	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [FE]  MalformedJsonException  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	compilable	  [FE]  MalformedJsonException  	16	2	replace
76	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	compilable	  [FE]  MalformedJsonException  	16	2	replace
77	[BUG]  [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [FE]  MalformedJsonException  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	compilable	  [FE]  MalformedJsonException  	16	2	replace
78	[BUG]  [BUGGY]  [FE]  MalformedJsonException  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	add	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	compilable	  [FE]  MalformedJsonException  	16	2	replace
79	[BUG]  [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [FE]  MalformedJsonException  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	compilable	  [FE]  MalformedJsonException  	16	2	replace
80	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	14	None	replace
81	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	14	None	replace
82	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [CE]  <identifier>  expected  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
83	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  cannot  find  symbol  root  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  cannot  find  symbol  root	2	None	add
84	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  cannot  find  symbol  root  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  cannot  find  symbol  root	2	None	add
85	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [CE]  <identifier>  expected  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }	  	non-compiled	[CE]  <identifier>  expected	2	None	add
86	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  	2	None	add
87	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  [CE]  <identifier>  expected  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.n ");	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
88	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",  root);  [CE]  <identifier>  expected  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",  root);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ",  root);	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
89	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  [CE]  <identifier>  expected  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
90	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  cannot  find  symbol  root  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  root	12	None	add
91	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  cannot  find  symbol  root  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  cannot  find  symbol  root	12	None	add
92	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    If(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  	12	None	add
93	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  <identifier>  expected  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ".);  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  <identifier>  expected	12	None	add
94	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	14	None	replace
95	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Could  not  be  initialized. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	14	None	replace
96	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  is  not  supported. ");  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  is  not  supported. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Please  check  that  the  top-level  value  is  not  supported. ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	14	None	replace
97	[BUG]  [BUGGY]  Throwables.log(Level.WARNING, "JSON  must  start  with  an  array  or  an  object. ");  [CE]  cannot  find  symbol  Level  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.log(Level.WARNING, "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log(Level.WARNING, "JSON  must  start  with  an  array  or  an  object. ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  cannot  find  symbol  Level	5	None	replace
98	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
99	[BUG]  [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.isEmpty())  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
100	[BUG]  [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
101	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(root)  {  throw  new  IllegalStateException( " ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
102	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [CE]  cannot  find  symbol  buffer  [FE]                  MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again. ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  cannot  find  symbol  buffer	7	None	replace
103	[BUG]  [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");  [CE]  orphaned  case  [FE]                    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.wrap( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");	  Throwables.wrap(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  orphaned  case	7	None	replace
104	[BUG]  [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  ||  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
105	[BUG]  [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
106	[BUG]  [BUGGY]  mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	mock(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  	3	None	replace
107	[BUG]  [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
108	[BUG]  [BUGGY]      int[]  newStack  =  stack.toArray(new  int[size()  ]);  [CE]  case,  default,  or  '}'  expected  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      int[]  newStack  =  stack.toArray(new  int[size()  ]);  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        int[]  newStack  =  stack.toArray(new  int[size()  ]);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	8	None	add
109	[BUG]  [BUGGY]      if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [CE]  case,  default,  or  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(EMPTY_DOCUMENT);  }	  	non-compiled	[CE]  case,  default,  or  	8	None	add
110	[BUG]  [BUGGY]      if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  case,  default,  or  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  	non-compiled	[CE]  case,  default,  or  	8	None	add
111	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  >  expected  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  >  expected	16	None	replace
112	[BUG]  [BUGGY]  parent  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  ==  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	16	None	replace
113	[BUG]  [BUGGY]  parent!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null  &&!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	16	None	replace
114	[BUG]  [BUGGY]  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	16	None	replace
115	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  case,  default,  or  '}'  expected  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replacementTop(NONEMPTY_DOCUMENT);  return;  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	12	None	add
116	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  >  expected  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  >  expected	13	None	replace
117	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  >  expected  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  >  expected	16	None	replace
118	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  >  expected  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(!lenient)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  >  expected	16	None	replace
119	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  type  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  [Delete]  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	[Delete]	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
120	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  type  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [CE]  illegal  start  of  type  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
122	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  illegal  start  of  type  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent  ==  root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
123	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [CE]  illegal  start  of  type  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  If(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object. ");  }	  Throwables.throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
124	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");  [CE]  illegal  start  of  type  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.  Try  again! ");	  Throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
125	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
126	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  &&  parent!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
127	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(root))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
128	[BUG]  [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	parent  <  NONEMPTY_DOCUMENT  ||!parent.equals(parent))  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    }    	non-compiled	[CE]  not  a  statement	11	None	replace
129	[BUG]  [BUGGY]      _reportError( "JSON  must  start  with  an  array  or  an  object.   ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      _reportError( "JSON  must  start  with  an  array  or  an  object.   ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        _reportError( "JSON  must  start  with  an  array  or  an  object.   ");	  	non-compiled	[CE]  not  a  statement	8	None	add
130	[BUG]  [BUGGY]      if(root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      if(root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        if(root!=  null)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }	  	non-compiled	[CE]  not  a  statement	8	None	add
131	[BUG]  [BUGGY]      if(root!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      if(root!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        if(root!=  null)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  not  a  statement	8	None	add
132	[BUG]  [BUGGY]      _reportError( "JSON  must  start  with  an  array  or  an  object.   ");  break;  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      _reportError( "JSON  must  start  with  an  array  or  an  object.   ");  break;  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        _reportError( "JSON  must  start  with  an  array  or  an  object.   ");  break;	  	non-compiled	[CE]  not  a  statement	8	None	add
133	[BUG]  [BUGGY]      if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [CE]  not  a  statement  [FE]            MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]      if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	        if(!lenient)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.. ");  }	  	non-compiled	[CE]  not  a  statement	8	None	add
134	[BUG]  [BUGGY]  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object. ");	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
135	[BUG]  [BUGGY]  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  not  a  statement  [FE]      MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtInvalidEmpty( "JSON  must  start  with  an  array  or  an  object. ");	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
136	[BUG]  [BUGGY]  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object. ");  [CE]  not  a  statement  [FE]        MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object. ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtInvalidEOFInValue( "JSON  must  start  with  an  array  or  an  object. ");	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
137	[BUG]  [BUGGY]  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object. ");  }  [CE]  not  a  statement  [FE]          MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object. ");  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	aughtInvalidEmptyException( "JSON  must  start  with  an  array  or  an  object. ");  }	  if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    	non-compiled	[CE]  not  a  statement	3	None	replace
138	[BUG]  [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [CE]  not  a  statement  [FE]    MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  if(root)  {  throw  new  IllegalStateException(   "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  return;  }  if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	if(root)    {    throw    new    IllegalStateException(   "JSON    must    start    with    an    array    or    an    object.   ");    }    else    {    replaceTop(NONEMPTY_DOCUMENT);    return;    }    if(root)  {  throw  new  IllegalStateException( "JSON  must  start  with  an  array  or  an  object.   ");  }  else  {  replaceTop(NONEMPTY_DOCUMENT);  break;  }	  	non-compiled	[CE]  not  a  statement	12	None	add
139	[BUG]  [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object: ");  [CE]  not  a  statement  [FE]              MalformedJsonException    [CONTEXT]    private  void  beforeValue(boolean  root)  throws  IOException  {  switch  (peek())  {  case  NONEMPTY_DOCUMENT:  if  (!lenient)  {  throw  new  IllegalStateException(     "JSON  must  have  only  one  top-level  value.   ");  }  case  EMPTY_DOCUMENT:  //  first  in  document  if  (!lenient  &&  !root)  {    [BUGGY]  Throwables.log( "JSON  must  start  with  an  array  or  an  object: ");  [BUGGY]     "JSON  must  start  with  an  array  or  an  object.   ");  }  replaceTop(NONEMPTY_DOCUMENT);  break;  case  EMPTY_ARRAY:  //  first  in  array  replaceTop(NONEMPTY_ARRAY);  newline();  break;  [CLASS]  JsonWriter  [METHOD]  beforeValue  [RETURN_TYPE]  void  boolean  root  [VARIABLES]  boolean  htmlSafe  lenient  root  serializeNulls  value  int[]  newStack  stack  String[]  HTML_SAFE_REPLACEMENT_CHARS  REPLACEMENT_CHARS  replacements  String  closeBracket  deferredName  indent  name  openBracket  replacement  separator  string  value  Writer  out  int  context  empty  i  last  length  newTop  nonempty  size  stackSize  topOfStack  	projects/Gson4/gson/src/main/java/com/google/gson/stream/JsonWriter.java	0.5773502691896258	623	624	3	replace	Throwables.log( "JSON  must  start  with  an  array  or  an  object: ");	  Throwables.log(   "JSON    must    start    with    an    array    or    an    object.   ");    	non-compiled	[CE]  not  a  statement	5	None	replace
